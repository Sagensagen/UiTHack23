!function(Q){function U(U){for(var B,n,g=U[0],e=U[1],t=U[2],C=0,i=[];C<g.length;C++)n=g[C],Object.prototype.hasOwnProperty.call(s,n)&&s[n]&&i.push(s[n][0]),s[n]=0;for(B in e)Object.prototype.hasOwnProperty.call(e,B)&&(Q[B]=e[B]);for(c&&c(U);i.length;)i.shift()();return I.push.apply(I,t||[]),F()}function F(){for(var Q,U=0;U<I.length;U++){for(var F=I[U],B=!0,g=1;g<F.length;g++){var e=F[g];0!==s[e]&&(B=!1)}B&&(I.splice(U--,1),Q=n(n.s=F[0]))}return Q}var B={},s={0:0},I=[];function n(U){if(B[U])return B[U].exports;var F=B[U]={i:U,l:!1,exports:{}};return Q[U].call(F.exports,F,F.exports,n),F.l=!0,F.exports}n.m=Q,n.c=B,n.d=function(Q,U,F){n.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:F})},n.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},n.t=function(Q,U){if(1&U&&(Q=n(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var F=Object.create(null);if(n.r(F),Object.defineProperty(F,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var B in Q)n.d(F,B,function(U){return Q[U]}.bind(null,B));return F},n.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return n.d(U,"a",U),U},n.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},n.p="";var g=window.webpackJsonp=window.webpackJsonp||[],e=g.push.bind(g);g.push=U,g=g.slice();for(var t=0;t<g.length;t++)U(g[t]);var c=e;I.push([229,1]),F()}({0:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export isIterable */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return isArrayLike; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return isDisposable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return disposeSafe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return sameConstructor; });\n/* unused harmony export Enumerator */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return getEnumerator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return toIterator; });\n/* unused harmony export Comparer */\n/* unused harmony export comparerFromEqualityComparer */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertNotEqual; });\n/* unused harmony export Lazy */\n/* unused harmony export lazyFromValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return padWithZeros; });\n/* unused harmony export padLeftAndRightWithZeros */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return dateOffset; });\n/* unused harmony export int16ToString */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return int32ToString; });\n/* unused harmony export ObjectRef */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return stringHash; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return numberHash; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return combineHashCodes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return physicalHash; });\n/* unused harmony export identityHash */\n/* unused harmony export dateHash */\n/* unused harmony export arrayHash */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return structuralHash; });\n/* unused harmony export fastStructuralHash */\n/* unused harmony export safeHash */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return equalArraysWith; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return equalArrays; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return compareDates; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return comparePrimitives; });\n/* unused harmony export compareArraysWith */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return compareArrays; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return compare; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return min; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return max; });\n/* unused harmony export clamp */\n/* unused harmony export createAtom */\n/* unused harmony export createObj */\n/* unused harmony export jsOptions */\n/* unused harmony export round */\n/* unused harmony export sign */\n/* unused harmony export unescapeDataString */\n/* unused harmony export escapeDataString */\n/* unused harmony export escapeUriString */\n/* unused harmony export count */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return clear; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return uncurry; });\n/* unused harmony export curry */\n/* unused harmony export checkArity */\n/* unused harmony export partialApply */\n/* unused harmony export mapCurriedArgs */\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(24);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(29);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(25);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(27);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(60);\n/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(252);\n/* harmony import */ var core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(97);\n/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(46);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(254);\n/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(119);\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(112);\n/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(196);\n/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(160);\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(121);\n/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(42);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(68);\n/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(113);\n/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(36);\n/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(37);\n/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_21__);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(31);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(35);\n/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(39);\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(41);\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_25__);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n// tslint:disable:ban-types\nfunction isIterable(x) {\n  return x != null && _typeof(x) === "object" && Symbol.iterator in x;\n}\nfunction isArrayLike(x) {\n  return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n  return typeof x.Compare === "function";\n}\nfunction isComparable(x) {\n  return typeof x.CompareTo === "function";\n}\nfunction isEquatable(x) {\n  return typeof x.Equals === "function";\n}\nfunction isHashable(x) {\n  return typeof x.GetHashCode === "function";\n}\nfunction isDisposable(x) {\n  return x != null && typeof x.Dispose === "function";\n}\nfunction disposeSafe(x) {\n  if (isDisposable(x)) {\n    x.Dispose();\n  }\n}\nfunction sameConstructor(x, y) {\n  var _a, _b;\n  return ((_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor) === ((_b = Object.getPrototypeOf(y)) === null || _b === void 0 ? void 0 : _b.constructor);\n}\nvar Enumerator = /*#__PURE__*/function () {\n  function Enumerator(iter) {\n    _classCallCheck(this, Enumerator);\n    this.iter = iter;\n  }\n  _createClass(Enumerator, [{\n    key: "System.Collections.Generic.IEnumerator`1.get_Current",\n    value: function SystemCollectionsGenericIEnumerator1Get_Current() {\n      return this.current;\n    }\n  }, {\n    key: "System.Collections.IEnumerator.get_Current",\n    value: function SystemCollectionsIEnumeratorGet_Current() {\n      return this.current;\n    }\n  }, {\n    key: "System.Collections.IEnumerator.MoveNext",\n    value: function SystemCollectionsIEnumeratorMoveNext() {\n      var cur = this.iter.next();\n      this.current = cur.value;\n      return !cur.done;\n    }\n  }, {\n    key: "System.Collections.IEnumerator.Reset",\n    value: function SystemCollectionsIEnumeratorReset() {\n      throw new Error("JS iterators cannot be reset");\n    }\n  }, {\n    key: "Dispose",\n    value: function Dispose() {\n      return;\n    }\n  }]);\n  return Enumerator;\n}();\nfunction getEnumerator(o) {\n  return typeof o.GetEnumerator === "function" ? o.GetEnumerator() : new Enumerator(o[Symbol.iterator]());\n}\nfunction toIterator(en) {\n  var _ref;\n  return _ref = {}, _defineProperty(_ref, Symbol.iterator, function () {\n    return this;\n  }), _defineProperty(_ref, "next", function next() {\n    var hasNext = en["System.Collections.IEnumerator.MoveNext"]();\n    var current = hasNext ? en["System.Collections.IEnumerator.get_Current"]() : undefined;\n    return {\n      done: !hasNext,\n      value: current\n    };\n  }), _ref;\n}\nvar Comparer = /*#__PURE__*/_createClass(function Comparer(f) {\n  _classCallCheck(this, Comparer);\n  this.Compare = f || compare;\n});\nfunction comparerFromEqualityComparer(comparer) {\n  // Sometimes IEqualityComparer also implements IComparer\n  if (isComparer(comparer)) {\n    return new Comparer(comparer.Compare);\n  } else {\n    return new Comparer(function (x, y) {\n      var xhash = comparer.GetHashCode(x);\n      var yhash = comparer.GetHashCode(y);\n      if (xhash === yhash) {\n        return comparer.Equals(x, y) ? 0 : -1;\n      } else {\n        return xhash < yhash ? -1 : 1;\n      }\n    });\n  }\n}\nfunction assertEqual(actual, expected, msg) {\n  if (!equals(actual, expected)) {\n    throw Object.assign(new Error(msg || "Expected: ".concat(expected, " - Actual: ").concat(actual)), {\n      actual: actual,\n      expected: expected\n    });\n  }\n}\nfunction assertNotEqual(actual, expected, msg) {\n  if (equals(actual, expected)) {\n    throw Object.assign(new Error(msg || "Expected: ".concat(expected, " - Actual: ").concat(actual)), {\n      actual: actual,\n      expected: expected\n    });\n  }\n}\nvar Lazy = /*#__PURE__*/function () {\n  function Lazy(factory) {\n    _classCallCheck(this, Lazy);\n    this.factory = factory;\n    this.isValueCreated = false;\n  }\n  _createClass(Lazy, [{\n    key: "Value",\n    get: function get() {\n      if (!this.isValueCreated) {\n        this.createdValue = this.factory();\n        this.isValueCreated = true;\n      }\n      return this.createdValue;\n    }\n  }, {\n    key: "IsValueCreated",\n    get: function get() {\n      return this.isValueCreated;\n    }\n  }]);\n  return Lazy;\n}();\nfunction lazyFromValue(v) {\n  return new Lazy(function () {\n    return v;\n  });\n}\nfunction padWithZeros(i, length) {\n  var str = i.toString(10);\n  while (str.length < length) {\n    str = "0" + str;\n  }\n  return str;\n}\nfunction padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n  var str = i.toString(10);\n  while (str.length < lengthLeft) {\n    str = "0" + str;\n  }\n  while (str.length < lengthRight) {\n    str = str + "0";\n  }\n  return str;\n}\nfunction dateOffset(date) {\n  var date1 = date;\n  return typeof date1.offset === "number" ? date1.offset : date.kind === 1 /* UTC */ ? 0 : date.getTimezoneOffset() * -60000;\n}\nfunction int16ToString(i, radix) {\n  i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n  return i.toString(radix);\n}\nfunction int32ToString(i, radix) {\n  i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n  return i.toString(radix);\n}\nvar ObjectRef = /*#__PURE__*/function () {\n  function ObjectRef() {\n    _classCallCheck(this, ObjectRef);\n  }\n  _createClass(ObjectRef, null, [{\n    key: "id",\n    value: function id(o) {\n      if (!ObjectRef.idMap.has(o)) {\n        ObjectRef.idMap.set(o, ++ObjectRef.count);\n      }\n      return ObjectRef.idMap.get(o);\n    }\n  }]);\n  return ObjectRef;\n}();\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nfunction stringHash(s) {\n  var i = 0;\n  var h = 5381;\n  var len = s.length;\n  while (i < len) {\n    h = h * 33 ^ s.charCodeAt(i++);\n  }\n  return h;\n}\nfunction numberHash(x) {\n  return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nfunction combineHashCodes(hashes) {\n  if (hashes.length === 0) {\n    return 0;\n  }\n  return hashes.reduce(function (h1, h2) {\n    return (h1 << 5) + h1 ^ h2;\n  });\n}\nfunction physicalHash(x) {\n  if (x == null) {\n    return 0;\n  }\n  switch (_typeof(x)) {\n    case "boolean":\n      return x ? 1 : 0;\n    case "number":\n      return numberHash(x);\n    case "string":\n      return stringHash(x);\n    default:\n      return numberHash(ObjectRef.id(x));\n  }\n}\nfunction identityHash(x) {\n  if (x == null) {\n    return 0;\n  } else if (isHashable(x)) {\n    return x.GetHashCode();\n  } else {\n    return physicalHash(x);\n  }\n}\nfunction dateHash(x) {\n  return x.getTime();\n}\nfunction arrayHash(x) {\n  var len = x.length;\n  var hashes = new Array(len);\n  for (var i = 0; i < len; i++) {\n    hashes[i] = structuralHash(x[i]);\n  }\n  return combineHashCodes(hashes);\n}\nfunction structuralHash(x) {\n  var _a;\n  if (x == null) {\n    return 0;\n  }\n  switch (_typeof(x)) {\n    case "boolean":\n      return x ? 1 : 0;\n    case "number":\n      return numberHash(x);\n    case "string":\n      return stringHash(x);\n    default:\n      {\n        if (isHashable(x)) {\n          return x.GetHashCode();\n        } else if (isArrayLike(x)) {\n          return arrayHash(x);\n        } else if (x instanceof Date) {\n          return dateHash(x);\n        } else if (((_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor) === Object) {\n          // TODO: check call-stack to prevent cyclic objects?\n          var hashes = Object.values(x).map(function (v) {\n            return structuralHash(v);\n          });\n          return combineHashCodes(hashes);\n        } else {\n          // Classes don\'t implement GetHashCode by default, but must use identity hashing\n          return numberHash(ObjectRef.id(x));\n          // return stringHash(String(x));\n        }\n      }\n  }\n}\n// Intended for custom numeric types, like long or decimal\nfunction fastStructuralHash(x) {\n  return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nfunction safeHash(x) {\n  return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nfunction equalArraysWith(x, y, eq) {\n  if (x == null) {\n    return y == null;\n  }\n  if (y == null) {\n    return false;\n  }\n  if (x.length !== y.length) {\n    return false;\n  }\n  for (var i = 0; i < x.length; i++) {\n    if (!eq(x[i], y[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction equalArrays(x, y) {\n  return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  if (xKeys.length !== yKeys.length) {\n    return false;\n  }\n  xKeys.sort();\n  yKeys.sort();\n  for (var i = 0; i < xKeys.length; i++) {\n    if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction equals(x, y) {\n  var _a;\n  if (x === y) {\n    return true;\n  } else if (x == null) {\n    return y == null;\n  } else if (y == null) {\n    return false;\n  } else if (_typeof(x) !== "object") {\n    return false;\n  } else if (isEquatable(x)) {\n    return x.Equals(y);\n  } else if (isArrayLike(x)) {\n    return isArrayLike(y) && equalArrays(x, y);\n  } else if (x instanceof Date) {\n    return y instanceof Date && compareDates(x, y) === 0;\n  } else {\n    return ((_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor) === Object && equalObjects(x, y);\n  }\n}\nfunction compareDates(x, y) {\n  var xtime;\n  var ytime;\n  // DateTimeOffset and DateTime deals with equality differently.\n  if ("offset" in x && "offset" in y) {\n    xtime = x.getTime();\n    ytime = y.getTime();\n  } else {\n    xtime = x.getTime() + dateOffset(x);\n    ytime = y.getTime() + dateOffset(y);\n  }\n  return xtime === ytime ? 0 : xtime < ytime ? -1 : 1;\n}\nfunction comparePrimitives(x, y) {\n  return x === y ? 0 : x < y ? -1 : 1;\n}\nfunction compareArraysWith(x, y, comp) {\n  if (x == null) {\n    return y == null ? 0 : 1;\n  }\n  if (y == null) {\n    return -1;\n  }\n  if (x.length !== y.length) {\n    return x.length < y.length ? -1 : 1;\n  }\n  for (var i = 0, j = 0; i < x.length; i++) {\n    j = comp(x[i], y[i]);\n    if (j !== 0) {\n      return j;\n    }\n  }\n  return 0;\n}\nfunction compareArrays(x, y) {\n  return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  if (xKeys.length !== yKeys.length) {\n    return xKeys.length < yKeys.length ? -1 : 1;\n  }\n  xKeys.sort();\n  yKeys.sort();\n  for (var i = 0, j = 0; i < xKeys.length; i++) {\n    var key = xKeys[i];\n    if (key !== yKeys[i]) {\n      return key < yKeys[i] ? -1 : 1;\n    } else {\n      j = compare(x[key], y[key]);\n      if (j !== 0) {\n        return j;\n      }\n    }\n  }\n  return 0;\n}\nfunction compare(x, y) {\n  var _a;\n  if (x === y) {\n    return 0;\n  } else if (x == null) {\n    return y == null ? 0 : -1;\n  } else if (y == null) {\n    return 1;\n  } else if (_typeof(x) !== "object") {\n    return x < y ? -1 : 1;\n  } else if (isComparable(x)) {\n    return x.CompareTo(y);\n  } else if (isArrayLike(x)) {\n    return isArrayLike(y) ? compareArrays(x, y) : -1;\n  } else if (x instanceof Date) {\n    return y instanceof Date ? compareDates(x, y) : -1;\n  } else {\n    return ((_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor) === Object ? compareObjects(x, y) : -1;\n  }\n}\nfunction min(comparer, x, y) {\n  return comparer(x, y) < 0 ? x : y;\n}\nfunction max(comparer, x, y) {\n  return comparer(x, y) > 0 ? x : y;\n}\nfunction clamp(comparer, value, min, max) {\n  return comparer(value, min) < 0 ? min : comparer(value, max) > 0 ? max : value;\n}\nfunction createAtom(value) {\n  var atom = value;\n  return function (value, isSetter) {\n    if (!isSetter) {\n      return atom;\n    } else {\n      atom = value;\n      return void 0;\n    }\n  };\n}\nfunction createObj(fields) {\n  var obj = {};\n  var _iterator = _createForOfIteratorHelper(fields),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var kv = _step.value;\n      obj[kv[0]] = kv[1];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return obj;\n}\nfunction jsOptions(mutator) {\n  var opts = {};\n  mutator(opts);\n  return opts;\n}\nfunction round(value) {\n  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var m = Math.pow(10, digits);\n  var n = +(digits ? value * m : value).toFixed(8);\n  var i = Math.floor(n);\n  var f = n - i;\n  var e = 1e-8;\n  var r = f > 0.5 - e && f < 0.5 + e ? i % 2 === 0 ? i : i + 1 : Math.round(n);\n  return digits ? r / m : r;\n}\nfunction sign(x) {\n  return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nfunction unescapeDataString(s) {\n  // https://stackoverflow.com/a/4458580/524236\n  return decodeURIComponent(s.replace(/\\+/g, "%20"));\n}\nfunction escapeDataString(s) {\n  return encodeURIComponent(s).replace(/!/g, "%21").replace(/\'/g, "%27").replace(/\\(/g, "%28").replace(/\\)/g, "%29").replace(/\\*/g, "%2A");\n}\nfunction escapeUriString(s) {\n  return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nfunction count(col) {\n  if (isArrayLike(col)) {\n    return col.length;\n  } else {\n    var _count = 0;\n    var _iterator2 = _createForOfIteratorHelper(col),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _ = _step2.value;\n        _count++;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return _count;\n  }\n}\nfunction clear(col) {\n  if (isArrayLike(col)) {\n    col.splice(0);\n  } else {\n    col.clear();\n  }\n}\nvar CURRIED = Symbol("curried");\nfunction uncurry(arity, f) {\n  // f may be a function option with None value\n  if (f == null || f.length > 1) {\n    return f;\n  }\n  var uncurried = function uncurried() {\n    var res = f;\n    for (var i = 0; i < arity; i++) {\n      res = res(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n    }\n    return res;\n  };\n  uncurried[CURRIED] = f;\n  return uncurried;\n}\nfunction _curry(args, arity, f) {\n  return function (arg) {\n    return arity === 1 ? f.apply(void 0, _toConsumableArray(args.concat([arg])))\n    // Note it\'s important to generate a new args array every time\n    // because a partially applied function can be run multiple times\n    : _curry(args.concat([arg]), arity - 1, f);\n  };\n}\nfunction curry(arity, f) {\n  if (f == null || f.length === 1) {\n    return f;\n  } else if (CURRIED in f) {\n    return f[CURRIED];\n  } else {\n    return _curry([], arity, f);\n  }\n}\nfunction checkArity(arity, f) {\n  return f.length > arity ? function () {\n    for (var _len = arguments.length, args1 = new Array(_len), _key = 0; _key < _len; _key++) {\n      args1[_key] = arguments[_key];\n    }\n    return function () {\n      for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args2[_key2] = arguments[_key2];\n      }\n      return f.apply(undefined, args1.concat(args2));\n    };\n  } : f;\n}\nfunction partialApply(arity, f, args) {\n  if (f == null) {\n    return undefined;\n  } else if (CURRIED in f) {\n    f = f[CURRIED];\n    for (var i = 0; i < args.length; i++) {\n      f = f(args[i]);\n    }\n    return f;\n  } else {\n    return _curry(args, arity, f);\n  }\n}\nfunction mapCurriedArgs(fn, mappings) {\n  function mapArg(fn, arg, mappings, idx) {\n    var mapping = mappings[idx];\n    if (mapping !== 0) {\n      var expectedArity = mapping[0];\n      var actualArity = mapping[1];\n      if (expectedArity > 1) {\n        arg = curry(expectedArity, arg);\n      }\n      if (actualArity > 1) {\n        arg = uncurry(actualArity, arg);\n      }\n    }\n    var res = fn(arg);\n    if (idx + 1 === mappings.length) {\n      return res;\n    } else {\n      return function (arg) {\n        return mapArg(res, arg, mappings, idx + 1);\n      };\n    }\n  }\n  return function (arg) {\n    return mapArg(fn, arg, mappings, 0);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},1:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "e", function() { return /* binding */ printf; });\n__webpack_require__.d(__webpack_exports__, "h", function() { return /* binding */ toText; });\n__webpack_require__.d(__webpack_exports__, "g", function() { return /* binding */ toFail; });\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ String_format; });\n__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ isNullOrEmpty; });\n__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ isNullOrWhiteSpace; });\n__webpack_require__.d(__webpack_exports__, "d", function() { return /* binding */ join; });\n__webpack_require__.d(__webpack_exports__, "i", function() { return /* binding */ String_trim; });\n__webpack_require__.d(__webpack_exports__, "f", function() { return /* binding */ substring; });\n\n// UNUSED EXPORTS: compare, compareOrdinal, compareTo, startsWith, indexOfAny, interpolate, toConsole, toConsoleError, fsFormat, endsWith, initialize, insert, concat, joinWithIndices, toBase64String, fromBase64String, padLeft, padRight, remove, replace, replicate, getCharAtIndex, split, trimStart, trimEnd, filter, fmt, fmtWith, getFormat\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js\nvar es_array_index_of = __webpack_require__(67);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(42);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(68);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.parse-int.js\nvar es_parse_int = __webpack_require__(122);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __webpack_require__(39);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.splice.js\nvar es_array_splice = __webpack_require__(113);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.last-index-of.js\nvar es_array_last_index_of = __webpack_require__(207);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js\nvar es_array_map = __webpack_require__(112);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __webpack_require__(41);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __webpack_require__(24);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __webpack_require__(20);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint8-array.js\nvar es_typed_array_uint8_array = __webpack_require__(123);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.copy-within.js\nvar es_typed_array_copy_within = __webpack_require__(125);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.every.js\nvar es_typed_array_every = __webpack_require__(126);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.fill.js\nvar es_typed_array_fill = __webpack_require__(127);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.filter.js\nvar es_typed_array_filter = __webpack_require__(128);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find.js\nvar es_typed_array_find = __webpack_require__(129);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find-index.js\nvar es_typed_array_find_index = __webpack_require__(130);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.for-each.js\nvar es_typed_array_for_each = __webpack_require__(131);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.includes.js\nvar es_typed_array_includes = __webpack_require__(132);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.index-of.js\nvar es_typed_array_index_of = __webpack_require__(133);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.iterator.js\nvar es_typed_array_iterator = __webpack_require__(134);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.join.js\nvar es_typed_array_join = __webpack_require__(135);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.last-index-of.js\nvar es_typed_array_last_index_of = __webpack_require__(136);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.map.js\nvar es_typed_array_map = __webpack_require__(137);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce.js\nvar es_typed_array_reduce = __webpack_require__(138);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce-right.js\nvar es_typed_array_reduce_right = __webpack_require__(139);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reverse.js\nvar es_typed_array_reverse = __webpack_require__(140);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.set.js\nvar es_typed_array_set = __webpack_require__(141);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.slice.js\nvar es_typed_array_slice = __webpack_require__(142);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.some.js\nvar es_typed_array_some = __webpack_require__(143);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.sort.js\nvar es_typed_array_sort = __webpack_require__(144);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-locale-string.js\nvar es_typed_array_to_locale_string = __webpack_require__(145);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-string.js\nvar es_typed_array_to_string = __webpack_require__(146);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.constructor.js\nvar es_regexp_constructor = __webpack_require__(220);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js\nvar es_regexp_to_string = __webpack_require__(46);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js\nvar es_array_filter = __webpack_require__(221);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js\nvar es_string_trim = __webpack_require__(147);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim-start.js\nvar es_string_trim_start = __webpack_require__(283);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim-end.js\nvar es_string_trim_end = __webpack_require__(285);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reduce.js\nvar es_array_reduce = __webpack_require__(119);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __webpack_require__(25);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __webpack_require__(27);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __webpack_require__(28);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(29);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js\nvar es_number_constructor = __webpack_require__(31);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.parse-float.js\nvar es_parse_float = __webpack_require__(287);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Long.js + 2 modules\nvar Long = __webpack_require__(81);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Util.js\nvar Util = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/Date.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\n\n\nfunction dateOffsetToString(offset) {\n  var isMinus = offset < 0;\n  offset = Math.abs(offset);\n  var hours = ~~(offset / 3600000);\n  var minutes = offset % 3600000 / 60000;\n  return (isMinus ? "-" : "+") + Object(Util["u" /* padWithZeros */])(hours, 2) + ":" + Object(Util["u" /* padWithZeros */])(minutes, 2);\n}\nfunction dateToHalfUTCString(date, half) {\n  var str = date.toISOString();\n  return half === "first" ? str.substring(0, str.indexOf("T")) : str.substring(str.indexOf("T") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n  if (utc) {\n    return d.toISOString();\n  } else {\n    // JS Date is always local\n    var printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n    return Object(Util["u" /* padWithZeros */])(d.getFullYear(), 4) + "-" + Object(Util["u" /* padWithZeros */])(d.getMonth() + 1, 2) + "-" + Object(Util["u" /* padWithZeros */])(d.getDate(), 2) + "T" + Object(Util["u" /* padWithZeros */])(d.getHours(), 2) + ":" + Object(Util["u" /* padWithZeros */])(d.getMinutes(), 2) + ":" + Object(Util["u" /* padWithZeros */])(d.getSeconds(), 2) + "." + Object(Util["u" /* padWithZeros */])(d.getMilliseconds(), 3) + (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : "");\n  }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n  var str = dateWithOffset.toISOString();\n  return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n  return format.replace(/(\\w)\\1*/g, function (match) {\n    var rep = Number.NaN;\n    switch (match.substring(0, 1)) {\n      case "y":\n        var y = utc ? date.getUTCFullYear() : date.getFullYear();\n        rep = match.length < 4 ? y % 100 : y;\n        break;\n      case "M":\n        rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n        break;\n      case "d":\n        rep = utc ? date.getUTCDate() : date.getDate();\n        break;\n      case "H":\n        rep = utc ? date.getUTCHours() : date.getHours();\n        break;\n      case "h":\n        var h = utc ? date.getUTCHours() : date.getHours();\n        rep = h > 12 ? h % 12 : h;\n        break;\n      case "m":\n        rep = utc ? date.getUTCMinutes() : date.getMinutes();\n        break;\n      case "s":\n        rep = utc ? date.getUTCSeconds() : date.getSeconds();\n        break;\n      case "f":\n        rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n        break;\n    }\n    if (Number.isNaN(rep)) {\n      return match;\n    } else {\n      return rep < 10 && match.length > 1 ? "0" + rep : "" + rep;\n    }\n  });\n}\nfunction dateToStringWithOffset(date, format) {\n  var _a, _b, _c;\n  var d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n  if (typeof format !== "string") {\n    return d.toISOString().replace(/\\.\\d+/, "").replace(/[A-Z]|\\.\\d+/g, " ") + dateOffsetToString((_b = date.offset) !== null && _b !== void 0 ? _b : 0);\n  } else if (format.length === 1) {\n    switch (format) {\n      case "D":\n      case "d":\n        return dateToHalfUTCString(d, "first");\n      case "T":\n      case "t":\n        return dateToHalfUTCString(d, "second");\n      case "O":\n      case "o":\n        return dateToISOStringWithOffset(d, (_c = date.offset) !== null && _c !== void 0 ? _c : 0);\n      default:\n        throw new Error("Unrecognized Date print format");\n    }\n  } else {\n    return dateToStringWithCustomFormat(d, format, true);\n  }\n}\nfunction dateToStringWithKind(date, format) {\n  var utc = date.kind === 1 /* UTC */;\n  if (typeof format !== "string") {\n    return utc ? date.toUTCString() : date.toLocaleString();\n  } else if (format.length === 1) {\n    switch (format) {\n      case "D":\n      case "d":\n        return utc ? dateToHalfUTCString(date, "first") : date.toLocaleDateString();\n      case "T":\n      case "t":\n        return utc ? dateToHalfUTCString(date, "second") : date.toLocaleTimeString();\n      case "O":\n      case "o":\n        return dateToISOString(date, utc);\n      default:\n        throw new Error("Unrecognized Date print format");\n    }\n  } else {\n    return dateToStringWithCustomFormat(date, format, utc);\n  }\n}\nfunction Date_toString(date, format, _provider) {\n  return date.offset != null ? dateToStringWithOffset(date, format) : dateToStringWithKind(date, format);\n}\nfunction DateTime(value, kind) {\n  var d = new Date(value);\n  d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n  return d;\n}\nfunction fromTicks(ticks, kind) {\n  ticks = Object(Long["b" /* fromValue */])(ticks);\n  kind = kind != null ? kind : 2 /* Local */; // better default than Unspecified\n  var date = DateTime(Object(Long["c" /* ticksToUnixEpochMilliseconds */])(ticks), kind);\n  // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n  // If kind is anything but UTC, that means that the tick number was not\n  // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n  if (kind !== 1 /* UTC */) {\n    date = DateTime(date.getTime() - Object(Util["i" /* dateOffset */])(date), kind);\n  }\n  return date;\n}\nfunction fromDateTimeOffset(date, kind) {\n  var _a;\n  switch (kind) {\n    case 1 /* UTC */:\n      return DateTime(date.getTime(), 1 /* UTC */);\n    case 2 /* Local */:\n      return DateTime(date.getTime(), 2 /* Local */);\n    default:\n      var d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n      return DateTime(d.getTime() - Object(Util["i" /* dateOffset */])(d), kind);\n  }\n}\nfunction getTicks(date) {\n  return Object(Long["d" /* unixEpochMillisecondsToTicks */])(date.getTime(), Object(Util["i" /* dateOffset */])(date));\n}\nfunction minValue() {\n  // This is "0001-01-01T00:00:00.000Z", actual JS min value is -8640000000000000\n  return DateTime(-62135596800000, 0 /* Unspecified */);\n}\n\nfunction maxValue() {\n  // This is "9999-12-31T23:59:59.999Z", actual JS max value is 8640000000000000\n  return DateTime(253402300799999, 0 /* Unspecified */);\n}\n\nfunction parseRaw(input) {\n  function fail() {\n    throw new Error("The string is not a valid Date: ".concat(input));\n  }\n  if (input == null || input.trim() === "") {\n    fail();\n  }\n  // ISO dates without TZ are parsed as UTC. Adding time without TZ keeps them local.\n  if (input.length === 10 && input[4] === "-" && input[7] === "-") {\n    input += "T00:00:00";\n  }\n  var date = new Date(input);\n  var offset = null;\n  if (isNaN(date.getTime())) {\n    // Try to check strings JS Date cannot parse (see #1045, #1422)\n    // tslint:disable-next-line:max-line-length\n    var m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*(Z|[+-]([01]?\\d):?([0-5]?\\d)?)?\\s*$/.exec(input);\n    if (m != null) {\n      var baseDate;\n      var timeInSeconds = 0;\n      if (m[2] != null) {\n        var timeParts = m[2].split(":");\n        timeInSeconds = parseInt(timeParts[0], 10) * 3600 + parseInt(timeParts[1] || "0", 10) * 60 + parseFloat(timeParts[2] || "0");\n        if (m[3] != null && m[3].toUpperCase() === "PM") {\n          timeInSeconds += 720;\n        }\n      }\n      if (m[4] != null) {\n        // There\'s an offset, parse as UTC\n        if (m[1] != null) {\n          baseDate = new Date(m[1] + " UTC");\n        } else {\n          var d = new Date();\n          baseDate = new Date(d.getUTCFullYear() + "/" + (d.getUTCMonth() + 1) + "/" + d.getUTCDate());\n        }\n        if (m[4] === "Z") {\n          offset = "Z";\n        } else {\n          var offsetInMinutes = parseInt(m[5], 10) * 60 + parseInt(m[6] || "0", 10);\n          if (m[4][0] === "-") {\n            offsetInMinutes *= -1;\n          }\n          offset = offsetInMinutes;\n          timeInSeconds -= offsetInMinutes * 60;\n        }\n      } else {\n        if (m[1] != null) {\n          baseDate = new Date(m[1]);\n        } else {\n          var _d = new Date();\n          baseDate = new Date(_d.getFullYear() + "/" + (_d.getMonth() + 1) + "/" + _d.getDate());\n        }\n      }\n      date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n      // correct for daylight savings time\n      date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n    } else {\n      fail();\n    }\n    // Check again the date is valid after transformations, see #2229\n    if (isNaN(date.getTime())) {\n      fail();\n    }\n  }\n  return [date, offset];\n}\nfunction parse(str) {\n  var detectUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var _parseRaw = parseRaw(str),\n    _parseRaw2 = _slicedToArray(_parseRaw, 2),\n    date = _parseRaw2[0],\n    offset = _parseRaw2[1];\n  // .NET always parses DateTime as Local if there\'s offset info (even "Z")\n  // Newtonsoft.Json uses UTC if the offset is "Z"\n  var kind = offset != null ? detectUTC && offset === "Z" ? 1 /* UTC */ : 2 /* Local */ : 0 /* Unspecified */;\n  return DateTime(date.getTime(), kind);\n}\nfunction tryParse(v, defValue) {\n  try {\n    defValue.contents = parse(v);\n    return true;\n  } catch (_err) {\n    return false;\n  }\n}\nfunction create(year, month, day) {\n  var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var m = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var ms = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  var kind = arguments.length > 7 ? arguments[7] : undefined;\n  var dateValue = kind === 1 /* UTC */ ? Date.UTC(year, month - 1, day, h, m, s, ms) : new Date(year, month - 1, day, h, m, s, ms).getTime();\n  if (isNaN(dateValue)) {\n    throw new Error("The parameters describe an unrepresentable Date.");\n  }\n  var date = DateTime(dateValue, kind);\n  if (year <= 99) {\n    date.setFullYear(year, month - 1, day);\n  }\n  return date;\n}\nfunction now() {\n  return DateTime(Date.now(), 2 /* Local */);\n}\n\nfunction utcNow() {\n  return DateTime(Date.now(), 1 /* UTC */);\n}\n\nfunction today() {\n  return Date_date(now());\n}\nfunction isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nfunction daysInMonth(year, month) {\n  return month === 2 ? isLeapYear(year) ? 29 : 28 : month >= 8 ? month % 2 === 0 ? 31 : 30 : month % 2 === 0 ? 30 : 31;\n}\nfunction toUniversalTime(date) {\n  return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\n\nfunction toLocalTime(date) {\n  return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\n\nfunction specifyKind(d, kind) {\n  return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nfunction timeOfDay(d) {\n  return hour(d) * 3600000 + minute(d) * 60000 + second(d) * 1000 + millisecond(d);\n}\nfunction Date_date(d) {\n  return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nfunction day(d) {\n  return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nfunction hour(d) {\n  return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nfunction millisecond(d) {\n  return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nfunction minute(d) {\n  return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nfunction month(d) {\n  return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nfunction second(d) {\n  return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nfunction year(d) {\n  return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nfunction dayOfWeek(d) {\n  return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nfunction dayOfYear(d) {\n  var _year = year(d);\n  var _month = month(d);\n  var _day = day(d);\n  for (var i = 1; i < _month; i++) {\n    _day += daysInMonth(_year, i);\n  }\n  return _day;\n}\nfunction add(d, ts) {\n  var newDate = DateTime(d.getTime() + ts, d.kind);\n  if (d.kind === 2 /* Local */) {\n    var oldTzOffset = d.getTimezoneOffset();\n    var newTzOffset = newDate.getTimezoneOffset();\n    return oldTzOffset !== newTzOffset ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind) : newDate;\n  } else {\n    return newDate;\n  }\n}\nfunction addDays(d, v) {\n  return add(d, v * 86400000);\n}\nfunction addHours(d, v) {\n  return add(d, v * 3600000);\n}\nfunction addMinutes(d, v) {\n  return add(d, v * 60000);\n}\nfunction addSeconds(d, v) {\n  return add(d, v * 1000);\n}\nfunction addMilliseconds(d, v) {\n  return add(d, v);\n}\nfunction addYears(d, v) {\n  var newMonth = month(d);\n  var newYear = year(d) + v;\n  var _daysInMonth = daysInMonth(newYear, newMonth);\n  var newDay = Math.min(_daysInMonth, day(d));\n  return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nfunction addMonths(d, v) {\n  var newMonth = month(d) + v;\n  var newMonth_ = 0;\n  var yearOffset = 0;\n  if (newMonth > 12) {\n    newMonth_ = newMonth % 12;\n    yearOffset = Math.floor(newMonth / 12);\n    newMonth = newMonth_;\n  } else if (newMonth < 1) {\n    newMonth_ = 12 + newMonth % 12;\n    yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n    newMonth = newMonth_;\n  }\n  var newYear = year(d) + yearOffset;\n  var _daysInMonth = daysInMonth(newYear, newMonth);\n  var newDay = Math.min(_daysInMonth, day(d));\n  return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nfunction subtract(d, that) {\n  return typeof that === "number" ? add(d, -that) : d.getTime() - that.getTime();\n}\nfunction toLongDateString(d) {\n  return d.toDateString();\n}\nfunction toShortDateString(d) {\n  return d.toLocaleDateString();\n}\nfunction toLongTimeString(d) {\n  return d.toLocaleTimeString();\n}\nfunction toShortTimeString(d) {\n  return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, "");\n}\nfunction equals(d1, d2) {\n  return d1.getTime() === d2.getTime();\n}\nvar compare = Util["g" /* compareDates */];\nvar compareTo = Util["g" /* compareDates */];\nfunction op_Addition(x, y) {\n  return add(x, y);\n}\nfunction op_Subtraction(x, y) {\n  return subtract(x, y);\n}\nfunction isDaylightSavingTime(x) {\n  var jan = new Date(x.getFullYear(), 0, 1);\n  var jul = new Date(x.getFullYear(), 6, 1);\n  return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n  return Math.min(janOffset, julOffset) === tOffset;\n}\n/* harmony default export */ var fable_library_3_7_17_Date = (DateTime);\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Numeric.js\nvar Numeric = __webpack_require__(16);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.split.js\nvar es_string_split = __webpack_require__(289);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/RegExp.js\n\n\n\n\n\nfunction RegExp_create(pattern) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Supported RegexOptions\n  // * IgnoreCase:  0x0001\n  // * Multiline:   0x0002\n  // * Compiled:    0x0008 (ignored)\n  // * Singleline:  0x0010\n  // * ECMAScript:  0x0100 (ignored)\n  if ((options & ~(1 ^ 2 ^ 8 ^ 16 ^ 256)) !== 0) {\n    throw new Error("RegexOptions only supports: IgnoreCase, Multiline, Compiled, Singleline and ECMAScript");\n  }\n  // Set always global and unicode flags for compatibility with dotnet, see #2925\n  var flags = "gu";\n  flags += options & 1 ? "i" : ""; // 0x0001 RegexOptions.IgnoreCase\n  flags += options & 2 ? "m" : "";\n  flags += options & 16 ? "s" : "";\n  return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nfunction RegExp_escape(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, "\\\\$&");\n}\nfunction RegExp_unescape(str) {\n  return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, "$1");\n}\nfunction isMatch(reg, input) {\n  var startAt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  reg.lastIndex = startAt;\n  return reg.test(input);\n}\nfunction RegExp_match(reg, input) {\n  var startAt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  reg.lastIndex = startAt;\n  return reg.exec(input);\n}\nfunction matches(reg, input) {\n  var startAt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (input == null) {\n    throw new Error("Input cannot ve null");\n  }\n  if (!reg.global) {\n    throw new Error("Non-global RegExp"); // Prevent infinite loop\n  }\n\n  reg.lastIndex = startAt;\n  var matches = [];\n  var m;\n  var lastMatchIndex = -1;\n  // tslint:disable-next-line:no-conditional-assignment\n  while ((m = reg.exec(input)) != null) {\n    // It can happen even global regex get stuck, see #2845\n    if (m.index === lastMatchIndex) {\n      reg.lastIndex++;\n    } else {\n      lastMatchIndex = m.index;\n      matches.push(m);\n    }\n  }\n  return matches;\n}\nfunction RegExp_options(reg) {\n  var options = 256; // ECMAScript\n  options |= reg.ignoreCase ? 1 : 0;\n  options |= reg.multiline ? 2 : 0;\n  return options;\n}\nfunction RegExp_replace(reg, input, replacement, limit) {\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  function replacer() {\n    var res = arguments[0];\n    if (limit) {\n      limit--;\n      var _match = [];\n      var len = arguments.length;\n      // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n      // * match: matched substring\n      // * p1, p2, ...: nth capture group string\n      // * offset: offset of matched substring\n      // * string: whole string examined\n      // * groups: named capturing groups\n      //           ONLY if regex contains a named capture group AND browser supports named groups\n      // -> last element can be groups OR input string\n      // -> check if last element is string\n      var withGroups = typeof arguments[len - 1] !== "string";\n      var pLast = withGroups ? len - 3 : len - 2;\n      for (var i = 0; i < pLast; i++) {\n        _match.push(arguments[i]);\n      }\n      _match.index = arguments[pLast++];\n      _match.input = arguments[pLast++];\n      if (withGroups) {\n        _match.groups = arguments[pLast];\n      }\n      res = replacement(_match);\n    }\n    return res;\n  }\n  if (typeof reg === "string") {\n    var tmp = reg;\n    reg = RegExp_create(input, limit !== null && limit !== void 0 ? limit : 0);\n    input = tmp;\n    limit = undefined;\n  }\n  if (typeof replacement === "function") {\n    limit = limit == null ? -1 : limit;\n    return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n  } else {\n    replacement = replacement\n    // $0 doesn\'t work with JS regex, see #1155\n    .replace(/\\$0/g, function (_s) {\n      return "$&";\n    })\n    // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n    .replace(/\\${([^}]+)}/g, "\\$<$1>");\n    if (limit != null) {\n      var m;\n      var sub1 = input.substring(offset);\n      var _matches = matches(reg, sub1);\n      var sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n      return input.substring(0, offset) + sub2.replace(reg, replacement) + input.substring(offset + sub2.length);\n    } else {\n      return input.replace(reg, replacement);\n    }\n  }\n}\nfunction split(reg, input, limit) {\n  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (typeof reg === "string") {\n    var tmp = reg;\n    reg = RegExp_create(input, limit !== null && limit !== void 0 ? limit : 0);\n    input = tmp;\n    limit = undefined;\n  }\n  input = input.substring(offset);\n  return input.split(reg, limit);\n}\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Types.js\nvar Types = __webpack_require__(8);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/String.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction String_slicedToArray(arr, i) { return String_arrayWithHoles(arr) || String_iterableToArrayLimit(arr, i) || String_unsupportedIterableToArray(arr, i) || String_nonIterableRest(); }\nfunction String_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction String_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction String_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = String_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction String_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return String_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return String_arrayLikeToArray(o, minLen); }\nfunction String_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\nvar fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nvar interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nvar formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n  return Object(Numeric["a" /* compare */])(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n  function isIgnoreCase(i) {\n    return i === true || i === 1 /* CurrentCultureIgnoreCase */ || i === 3 /* InvariantCultureIgnoreCase */ || i === 5 /* OrdinalIgnoreCase */;\n  }\n\n  function isOrdinal(i) {\n    return i === 4 /* Ordinal */ || i === 5 /* OrdinalIgnoreCase */;\n  }\n\n  if (x == null) {\n    return y == null ? 0 : -1;\n  }\n  if (y == null) {\n    return 1;\n  } // everything is bigger than null\n  if (isOrdinal(ic)) {\n    if (isIgnoreCase(ic)) {\n      x = x.toLowerCase();\n      y = y.toLowerCase();\n    }\n    return x === y ? 0 : x < y ? -1 : 1;\n  } else {\n    if (isIgnoreCase(ic)) {\n      x = x.toLocaleLowerCase();\n      y = y.toLocaleLowerCase();\n    }\n    return x.localeCompare(y);\n  }\n}\nfunction String_compare() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  switch (args.length) {\n    case 2:\n      return cmp(args[0], args[1], false);\n    case 3:\n      return cmp(args[0], args[1], args[2]);\n    case 4:\n      return cmp(args[0], args[1], args[2] === true);\n    case 5:\n      return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n    case 6:\n      return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n    case 7:\n      return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n    default:\n      throw new Error("String.compare: Unsupported number of parameters");\n  }\n}\nfunction compareOrdinal(x, y) {\n  return cmp(x, y, 4 /* Ordinal */);\n}\n\nfunction String_compareTo(x, y) {\n  return cmp(x, y, 0 /* CurrentCulture */);\n}\n\nfunction startsWith(str, pattern, ic) {\n  if (str.length >= pattern.length) {\n    return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n  }\n  return false;\n}\nfunction indexOfAny(str, anyOf) {\n  if (str == null || str === "") {\n    return -1;\n  }\n  var startIndex = (arguments.length <= 2 ? 0 : arguments.length - 2) > 0 ? arguments.length <= 2 ? undefined : arguments[2] : 0;\n  if (startIndex < 0) {\n    throw new Error("Start index cannot be negative");\n  }\n  var length = (arguments.length <= 2 ? 0 : arguments.length - 2) > 1 ? arguments.length <= 3 ? undefined : arguments[3] : str.length - startIndex;\n  if (length < 0) {\n    throw new Error("Length cannot be negative");\n  }\n  if (length > str.length - startIndex) {\n    throw new Error("Invalid startIndex and length");\n  }\n  str = str.substr(startIndex, length);\n  var _iterator = _createForOfIteratorHelper(anyOf),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var c = _step.value;\n      var index = str.indexOf(c);\n      if (index > -1) {\n        return index + startIndex;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return -1;\n}\nfunction printf(input) {\n  return {\n    input: input,\n    cont: fsFormat(input)\n  };\n}\nfunction interpolate(str, values) {\n  var valIdx = 0;\n  var strIdx = 0;\n  var result = "";\n  interpolateRegExp.lastIndex = 0;\n  var match = interpolateRegExp.exec(str);\n  while (match) {\n    // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n    // Note: we don\'t use negative lookbehind because some browsers don\'t support it yet\n    var matchIndex = match.index + (match[1] || "").length;\n    result += str.substring(strIdx, matchIndex).replace(/%%/g, "%");\n    var _match = match,\n      _match2 = String_slicedToArray(_match, 6),\n      flags = _match2[2],\n      padLength = _match2[3],\n      precision = _match2[4],\n      _format = _match2[5];\n    result += formatReplacement(values[valIdx++], flags, padLength, precision, _format);\n    strIdx = interpolateRegExp.lastIndex;\n    // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n    interpolateRegExp.lastIndex -= 1;\n    match = interpolateRegExp.exec(str);\n  }\n  result += str.substring(strIdx).replace(/%%/g, "%");\n  return result;\n}\nfunction continuePrint(cont, arg) {\n  return typeof arg === "string" ? cont(arg) : arg.cont(cont);\n}\nfunction toConsole(arg) {\n  // Don\'t remove the lambda here, see #1357\n  return continuePrint(function (x) {\n    return console.log(x);\n  }, arg);\n}\nfunction toConsoleError(arg) {\n  return continuePrint(function (x) {\n    return console.error(x);\n  }, arg);\n}\nfunction toText(arg) {\n  return continuePrint(function (x) {\n    return x;\n  }, arg);\n}\nfunction toFail(arg) {\n  return continuePrint(function (x) {\n    throw new Error(x);\n  }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n  var sign = "";\n  flags = flags || "";\n  format = format || "";\n  if (Object(Numeric["b" /* isNumeric */])(rep)) {\n    if (format.toLowerCase() !== "x") {\n      if (isLessThan(rep, 0)) {\n        rep = Object(Numeric["c" /* multiply */])(rep, -1);\n        sign = "-";\n      } else {\n        if (flags.indexOf(" ") >= 0) {\n          sign = " ";\n        } else if (flags.indexOf("+") >= 0) {\n          sign = "+";\n        }\n      }\n    }\n    precision = precision == null ? null : parseInt(precision, 10);\n    switch (format) {\n      case "f":\n      case "F":\n        precision = precision != null ? precision : 6;\n        rep = Object(Numeric["f" /* toFixed */])(rep, precision);\n        break;\n      case "g":\n      case "G":\n        rep = precision != null ? Object(Numeric["h" /* toPrecision */])(rep, precision) : Object(Numeric["h" /* toPrecision */])(rep);\n        break;\n      case "e":\n      case "E":\n        rep = precision != null ? Object(Numeric["e" /* toExponential */])(rep, precision) : Object(Numeric["e" /* toExponential */])(rep);\n        break;\n      case "x":\n        rep = Object(Numeric["g" /* toHex */])(rep);\n        break;\n      case "X":\n        rep = Object(Numeric["g" /* toHex */])(rep).toUpperCase();\n        break;\n      default:\n        // AOid\n        rep = String(rep);\n        break;\n    }\n  } else if (rep instanceof Date) {\n    rep = Date_toString(rep);\n  } else {\n    rep = Object(Types["f" /* toString */])(rep);\n  }\n  padLength = typeof padLength === "number" ? padLength : parseInt(padLength, 10);\n  if (!isNaN(padLength)) {\n    var zeroFlag = flags.indexOf("0") >= 0; // Use \'0\' for left padding\n    var minusFlag = flags.indexOf("-") >= 0; // Right padding\n    var ch = minusFlag || !zeroFlag ? " " : "0";\n    if (ch === "0") {\n      rep = pad(rep, padLength - sign.length, ch, minusFlag);\n      rep = sign + rep;\n    } else {\n      rep = pad(sign + rep, padLength, ch, minusFlag);\n    }\n  } else {\n    rep = sign + rep;\n  }\n  return rep;\n}\nfunction createPrinter(cont, _strParts, _matches) {\n  var _result = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";\n  var padArg = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n  return function () {\n    // Make copies of the values passed by reference because the function can be used multiple times\n    var result = _result;\n    var strParts = _strParts.slice();\n    var matches = _matches.slice();\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    for (var _i2 = 0, _args = args; _i2 < _args.length; _i2++) {\n      var arg = _args[_i2];\n      var _matches$ = String_slicedToArray(matches[0], 6),\n        flags = _matches$[2],\n        _padLength = _matches$[3],\n        precision = _matches$[4],\n        _format2 = _matches$[5];\n      var padLength = _padLength;\n      if (padArg >= 0) {\n        padLength = padArg;\n        padArg = -1;\n      } else if (padLength === "*") {\n        if (arg < 0) {\n          throw new Error("Non-negative number required");\n        }\n        padArg = arg;\n        continue;\n      }\n      result += strParts[0];\n      result += formatReplacement(arg, flags, padLength, precision, _format2);\n      strParts.splice(0, 1);\n      matches.splice(0, 1);\n    }\n    if (matches.length === 0) {\n      result += strParts[0];\n      return cont(result);\n    } else {\n      return createPrinter(cont, strParts, matches, result, padArg);\n    }\n  };\n}\nfunction fsFormat(str) {\n  return function (cont) {\n    fsFormatRegExp.lastIndex = 0;\n    var strParts = [];\n    var matches = [];\n    var strIdx = 0;\n    var match = fsFormatRegExp.exec(str);\n    while (match) {\n      // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n      // Note: we don\'t use negative lookbehind because some browsers don\'t support it yet\n      var matchIndex = match.index + (match[1] || "").length;\n      strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, "%"));\n      matches.push(match);\n      strIdx = fsFormatRegExp.lastIndex;\n      // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n      fsFormatRegExp.lastIndex -= 1;\n      match = fsFormatRegExp.exec(str);\n    }\n    if (strParts.length === 0) {\n      return cont(str.replace(/%%/g, "%"));\n    } else {\n      strParts.push(str.substring(strIdx).replace(/%%/g, "%"));\n      return createPrinter(cont, strParts, matches);\n    }\n  };\n}\nfunction String_format(str) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n  if (_typeof(str) === "object" && args.length > 0) {\n    // Called with culture info\n    str = args[0];\n    args.shift();\n  }\n  return str.replace(formatRegExp, function (_, idx, padLength, format, precision, pattern) {\n    if (idx < 0 || idx >= args.length) {\n      throw new Error("Index must be greater or equal to zero and less than the arguments\' length.");\n    }\n    var rep = args[idx];\n    if (Object(Numeric["b" /* isNumeric */])(rep)) {\n      precision = precision == null ? null : parseInt(precision, 10);\n      switch (format) {\n        case "f":\n        case "F":\n          precision = precision != null ? precision : 2;\n          rep = Object(Numeric["f" /* toFixed */])(rep, precision);\n          break;\n        case "g":\n        case "G":\n          rep = precision != null ? Object(Numeric["h" /* toPrecision */])(rep, precision) : Object(Numeric["h" /* toPrecision */])(rep);\n          break;\n        case "e":\n        case "E":\n          rep = precision != null ? Object(Numeric["e" /* toExponential */])(rep, precision) : Object(Numeric["e" /* toExponential */])(rep);\n          break;\n        case "p":\n        case "P":\n          precision = precision != null ? precision : 2;\n          rep = Object(Numeric["f" /* toFixed */])(Object(Numeric["c" /* multiply */])(rep, 100), precision) + " %";\n          break;\n        case "d":\n        case "D":\n          rep = precision != null ? padLeft(String(rep), precision, "0") : String(rep);\n          break;\n        case "x":\n        case "X":\n          rep = precision != null ? padLeft(Object(Numeric["g" /* toHex */])(rep), precision, "0") : Object(Numeric["g" /* toHex */])(rep);\n          if (format === "X") {\n            rep = rep.toUpperCase();\n          }\n          break;\n        default:\n          if (pattern) {\n            var sign = "";\n            rep = pattern.replace(/([0#,]+)(\\.[0#]+)?/, function (_, intPart, decimalPart) {\n              if (isLessThan(rep, 0)) {\n                rep = Object(Numeric["c" /* multiply */])(rep, -1);\n                sign = "-";\n              }\n              decimalPart = decimalPart == null ? "" : decimalPart.substring(1);\n              rep = Object(Numeric["f" /* toFixed */])(rep, Math.max(decimalPart.length, 0));\n              var _rep$split = rep.split("."),\n                _rep$split2 = String_slicedToArray(_rep$split, 2),\n                repInt = _rep$split2[0],\n                repDecimal = _rep$split2[1];\n              repDecimal || (repDecimal = "");\n              var leftZeroes = intPart.replace(/,/g, "").replace(/^#+/, "").length;\n              repInt = padLeft(repInt, leftZeroes, "0");\n              var rightZeros = decimalPart.replace(/#+$/, "").length;\n              if (rightZeros > repDecimal.length) {\n                repDecimal = padRight(repDecimal, rightZeros, "0");\n              } else if (rightZeros < repDecimal.length) {\n                repDecimal = repDecimal.substring(0, rightZeros) + repDecimal.substring(rightZeros).replace(/0+$/, "");\n              }\n              // Thousands separator\n              if (intPart.indexOf(",") > 0) {\n                var i = repInt.length % 3;\n                var thousandGroups = Math.floor(repInt.length / 3);\n                var thousands = i > 0 ? repInt.substr(0, i) + (thousandGroups > 0 ? "," : "") : "";\n                for (var j = 0; j < thousandGroups; j++) {\n                  thousands += repInt.substr(i + j * 3, 3) + (j < thousandGroups - 1 ? "," : "");\n                }\n                repInt = thousands;\n              }\n              return repDecimal.length > 0 ? repInt + "." + repDecimal : repInt;\n            });\n            rep = sign + rep;\n          }\n      }\n    } else if (rep instanceof Date) {\n      rep = Date_toString(rep, pattern || format);\n    } else {\n      rep = Object(Types["f" /* toString */])(rep);\n    }\n    padLength = parseInt((padLength || " ").substring(1), 10);\n    if (!isNaN(padLength)) {\n      rep = pad(String(rep), Math.abs(padLength), " ", padLength < 0);\n    }\n    return rep;\n  });\n}\nfunction endsWith(str, search) {\n  var idx = str.lastIndexOf(search);\n  return idx >= 0 && idx === str.length - search.length;\n}\nfunction initialize(n, f) {\n  if (n < 0) {\n    throw new Error("String length must be non-negative");\n  }\n  var xs = new Array(n);\n  for (var i = 0; i < n; i++) {\n    xs[i] = f(i);\n  }\n  return xs.join("");\n}\nfunction insert(str, startIndex, value) {\n  if (startIndex < 0 || startIndex > str.length) {\n    throw new Error("startIndex is negative or greater than the length of this instance.");\n  }\n  return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nfunction isNullOrEmpty(str) {\n  return typeof str !== "string" || str.length === 0;\n}\nfunction isNullOrWhiteSpace(str) {\n  return typeof str !== "string" || /^\\s*$/.test(str);\n}\nfunction concat() {\n  for (var _len4 = arguments.length, xs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    xs[_key4] = arguments[_key4];\n  }\n  return xs.map(function (x) {\n    return String(x);\n  }).join("");\n}\nfunction join(delimiter, xs) {\n  if (Array.isArray(xs)) {\n    return xs.join(delimiter);\n  } else {\n    return Array.from(xs).join(delimiter);\n  }\n}\nfunction joinWithIndices(delimiter, xs, startIndex, count) {\n  var endIndexPlusOne = startIndex + count;\n  if (endIndexPlusOne > xs.length) {\n    throw new Error("Index and count must refer to a location within the buffer.");\n  }\n  return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n  throw new Error("The environment doesn\'t support \'" + name + "\', please use a polyfill.");\n}\nfunction toBase64String(inArray) {\n  var str = "";\n  for (var i = 0; i < inArray.length; i++) {\n    str += String.fromCharCode(inArray[i]);\n  }\n  return typeof btoa === "function" ? btoa(str) : notSupported("btoa");\n}\nfunction fromBase64String(b64Encoded) {\n  var binary = typeof atob === "function" ? atob(b64Encoded) : notSupported("atob");\n  var bytes = new Uint8Array(binary.length);\n  for (var i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return bytes;\n}\nfunction pad(str, len, ch, isRight) {\n  ch = ch || " ";\n  len = len - str.length;\n  for (var i = 0; i < len; i++) {\n    str = isRight ? str + ch : ch + str;\n  }\n  return str;\n}\nfunction padLeft(str, len, ch) {\n  return pad(str, len, ch);\n}\nfunction padRight(str, len, ch) {\n  return pad(str, len, ch, true);\n}\nfunction remove(str, startIndex, count) {\n  if (startIndex >= str.length) {\n    throw new Error("startIndex must be less than length of string");\n  }\n  if (typeof count === "number" && startIndex + count > str.length) {\n    throw new Error("Index and count must refer to a location within the string.");\n  }\n  return str.slice(0, startIndex) + (typeof count === "number" ? str.substr(startIndex + count) : "");\n}\nfunction String_replace(str, search, replace) {\n  return str.replace(new RegExp(RegExp_escape(search), "g"), replace);\n}\nfunction replicate(n, x) {\n  return initialize(n, function () {\n    return x;\n  });\n}\nfunction getCharAtIndex(input, index) {\n  if (index < 0 || index >= input.length) {\n    throw new Error("Index was outside the bounds of the array.");\n  }\n  return input[index];\n}\nfunction String_split(str, splitters, count, options) {\n  count = typeof count === "number" ? count : undefined;\n  options = typeof options === "number" ? options : 0;\n  if (count && count < 0) {\n    throw new Error("Count cannot be less than zero");\n  }\n  if (count === 0) {\n    return [];\n  }\n  var removeEmpty = (options & 1) === 1;\n  var trim = (options & 2) === 2;\n  splitters = splitters || [];\n  splitters = splitters.filter(function (x) {\n    return x;\n  }).map(RegExp_escape);\n  splitters = splitters.length > 0 ? splitters : ["\\\\s"];\n  var splits = [];\n  var reg = new RegExp(splitters.join("|"), "g");\n  var findSplits = true;\n  var i = 0;\n  do {\n    var match = reg.exec(str);\n    if (match === null) {\n      var candidate = trim ? str.substring(i).trim() : str.substring(i);\n      if (!removeEmpty || candidate.length > 0) {\n        splits.push(candidate);\n      }\n      findSplits = false;\n    } else {\n      var _candidate = trim ? str.substring(i, match.index).trim() : str.substring(i, match.index);\n      if (!removeEmpty || _candidate.length > 0) {\n        if (count != null && splits.length + 1 === count) {\n          splits.push(trim ? str.substring(i).trim() : str.substring(i));\n          findSplits = false;\n        } else {\n          splits.push(_candidate);\n        }\n      }\n      i = reg.lastIndex;\n    }\n  } while (findSplits);\n  return splits;\n}\nfunction String_trim(str) {\n  for (var _len5 = arguments.length, chars = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    chars[_key5 - 1] = arguments[_key5];\n  }\n  if (chars.length === 0) {\n    return str.trim();\n  }\n  var pattern = "[" + RegExp_escape(chars.join("")) + "]+";\n  return str.replace(new RegExp("^" + pattern), "").replace(new RegExp(pattern + "$"), "");\n}\nfunction trimStart(str) {\n  for (var _len6 = arguments.length, chars = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    chars[_key6 - 1] = arguments[_key6];\n  }\n  return chars.length === 0 ? str.trimStart() : str.replace(new RegExp("^[" + RegExp_escape(chars.join("")) + "]+"), "");\n}\nfunction trimEnd(str) {\n  for (var _len7 = arguments.length, chars = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n    chars[_key7 - 1] = arguments[_key7];\n  }\n  return chars.length === 0 ? str.trimEnd() : str.replace(new RegExp("[" + RegExp_escape(chars.join("")) + "]+$"), "");\n}\nfunction filter(pred, x) {\n  return x.split("").filter(function (c) {\n    return pred(c);\n  }).join("");\n}\nfunction substring(str, startIndex, length) {\n  if (startIndex + (length || 0) > str.length) {\n    throw new Error("Invalid startIndex and/or length");\n  }\n  return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\nfunction fmt(strs) {\n  for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n    args[_key8 - 1] = arguments[_key8];\n  }\n  return {\n    strs: strs,\n    args: args\n  };\n}\nfunction fmtWith(fmts) {\n  return function (strs) {\n    for (var _len9 = arguments.length, args = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n      args[_key9 - 1] = arguments[_key9];\n    }\n    return {\n      strs: strs,\n      args: args,\n      fmts: fmts\n    };\n  };\n}\nfunction getFormat(s) {\n  return s.fmts ? s.strs.reduce(function (acc, newPart, index) {\n    return acc + "{".concat(String(index - 1) + s.fmts[index - 1], "}") + newPart;\n  }) : s.strs.reduce(function (acc, newPart, index) {\n    return acc + "{".concat(index - 1, "}") + newPart;\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},10:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export Helpers_allocateArrayFromCons */\n/* unused harmony export append */\n/* unused harmony export filter */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return fill; });\n/* unused harmony export getSubArray */\n/* unused harmony export last */\n/* unused harmony export tryLast */\n/* unused harmony export mapIndexed */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return map; });\n/* unused harmony export mapIndexed2 */\n/* unused harmony export map2 */\n/* unused harmony export mapIndexed3 */\n/* unused harmony export map3 */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return mapFold; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return mapFoldBack; });\n/* unused harmony export indexed */\n/* unused harmony export truncate */\n/* unused harmony export concat */\n/* unused harmony export collect */\n/* unused harmony export where */\n/* unused harmony export indexOf */\n/* unused harmony export contains */\n/* unused harmony export empty */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return singleton; });\n/* unused harmony export initialize */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return pairwise; });\n/* unused harmony export replicate */\n/* unused harmony export copy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return reverse; });\n/* unused harmony export scan */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return scanBack; });\n/* unused harmony export skip */\n/* unused harmony export skipWhile */\n/* unused harmony export take */\n/* unused harmony export takeWhile */\n/* unused harmony export addInPlace */\n/* unused harmony export addRangeInPlace */\n/* unused harmony export insertRangeInPlace */\n/* unused harmony export removeInPlace */\n/* unused harmony export removeAllInPlace */\n/* unused harmony export copyTo */\n/* unused harmony export copyToTypedArray */\n/* unused harmony export partition */\n/* unused harmony export find */\n/* unused harmony export tryFind */\n/* unused harmony export findIndex */\n/* unused harmony export tryFindIndex */\n/* unused harmony export pick */\n/* unused harmony export tryPick */\n/* unused harmony export findBack */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return tryFindBack; });\n/* unused harmony export findLastIndex */\n/* unused harmony export findIndexBack */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return tryFindIndexBack; });\n/* unused harmony export choose */\n/* unused harmony export foldIndexed */\n/* unused harmony export fold */\n/* unused harmony export iterate */\n/* unused harmony export iterateIndexed */\n/* unused harmony export iterate2 */\n/* unused harmony export iterateIndexed2 */\n/* unused harmony export isEmpty */\n/* unused harmony export forAll */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return permute; });\n/* unused harmony export setSlice */\n/* unused harmony export sortInPlaceBy */\n/* unused harmony export sortInPlace */\n/* unused harmony export sort */\n/* unused harmony export sortBy */\n/* unused harmony export sortDescending */\n/* unused harmony export sortByDescending */\n/* unused harmony export sortWith */\n/* unused harmony export allPairs */\n/* unused harmony export unfold */\n/* unused harmony export unzip */\n/* unused harmony export unzip3 */\n/* unused harmony export zip */\n/* unused harmony export zip3 */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return chunkBySize; });\n/* unused harmony export splitAt */\n/* unused harmony export compareWith */\n/* unused harmony export compareTo */\n/* unused harmony export equalsWith */\n/* unused harmony export exactlyOne */\n/* unused harmony export tryExactlyOne */\n/* unused harmony export head */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return tryHead; });\n/* unused harmony export tail */\n/* unused harmony export item */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return tryItem; });\n/* unused harmony export foldBackIndexed */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return foldBack; });\n/* unused harmony export foldIndexed2 */\n/* unused harmony export fold2 */\n/* unused harmony export foldBackIndexed2 */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return foldBack2; });\n/* unused harmony export reduce */\n/* unused harmony export reduceBack */\n/* unused harmony export forAll2 */\n/* unused harmony export existsOffset */\n/* unused harmony export exists */\n/* unused harmony export existsOffset2 */\n/* unused harmony export exists2 */\n/* unused harmony export sum */\n/* unused harmony export sumBy */\n/* unused harmony export maxBy */\n/* unused harmony export max */\n/* unused harmony export minBy */\n/* unused harmony export min */\n/* unused harmony export average */\n/* unused harmony export averageBy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return windowed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return splitInto; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return transpose; });\n/* unused harmony export insertAt */\n/* unused harmony export insertManyAt */\n/* unused harmony export removeAt */\n/* unused harmony export removeManyAt */\n/* unused harmony export updateAt */\n/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(221);\n/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_array_fill_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(290);\n/* harmony import */ var core_js_modules_es_array_fill_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_fill_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39);\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(41);\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(24);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(113);\n/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(219);\n/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(291);\n/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(119);\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(121);\n/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var core_js_modules_es_array_reduce_right_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(224);\n/* harmony import */ var core_js_modules_es_array_reduce_right_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce_right_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(4);\n/* harmony import */ var _Util_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(0);\n/* harmony import */ var _Global_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(7);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Helpers_allocateArrayFromCons(cons, len) {\n  if (typeof cons === "function") {\n    return new cons(len);\n  } else {\n    return new Array(len);\n  }\n}\nfunction indexNotFound() {\n  throw new Error("An index satisfying the predicate was not found in the collection.");\n}\nfunction differentLengths() {\n  throw new Error("Arrays had different lengths");\n}\nfunction append(array1, array2, cons) {\n  var len1 = array1.length | 0;\n  var len2 = array2.length | 0;\n  var newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\n  for (var i = 0; i <= len1 - 1; i++) {\n    newArray[i] = array1[i];\n  }\n  for (var i_1 = 0; i_1 <= len2 - 1; i_1++) {\n    newArray[i_1 + len1] = array2[i_1];\n  }\n  return newArray;\n}\nfunction filter(predicate, array) {\n  return array.filter(predicate);\n}\nfunction fill(target, targetIndex, count, value) {\n  var start = targetIndex | 0;\n  return target.fill(value, start, start + count);\n}\nfunction getSubArray(array, start, count) {\n  var start_1 = start | 0;\n  return array.slice(start_1, start_1 + count);\n}\nfunction last(array) {\n  if (array.length === 0) {\n    throw new Error("The input array was empty\\\\nParameter name: array");\n  }\n  return array[array.length - 1];\n}\nfunction tryLast(array) {\n  if (array.length === 0) {\n    return void 0;\n  } else {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* some */ "c"])(array[array.length - 1]);\n  }\n}\nfunction mapIndexed(f, source, cons) {\n  var len = source.length | 0;\n  var target = Helpers_allocateArrayFromCons(cons, len);\n  for (var i = 0; i <= len - 1; i++) {\n    target[i] = f(i, source[i]);\n  }\n  return target;\n}\nfunction map(f, source, cons) {\n  var len = source.length | 0;\n  var target = Helpers_allocateArrayFromCons(cons, len);\n  for (var i = 0; i <= len - 1; i++) {\n    target[i] = f(source[i]);\n  }\n  return target;\n}\nfunction mapIndexed2(f, source1, source2, cons) {\n  if (source1.length !== source2.length) {\n    throw new Error("Arrays had different lengths");\n  }\n  var result = Helpers_allocateArrayFromCons(cons, source1.length);\n  for (var i = 0; i <= source1.length - 1; i++) {\n    result[i] = f(i, source1[i], source2[i]);\n  }\n  return result;\n}\nfunction map2(f, source1, source2, cons) {\n  if (source1.length !== source2.length) {\n    throw new Error("Arrays had different lengths");\n  }\n  var result = Helpers_allocateArrayFromCons(cons, source1.length);\n  for (var i = 0; i <= source1.length - 1; i++) {\n    result[i] = f(source1[i], source2[i]);\n  }\n  return result;\n}\nfunction mapIndexed3(f, source1, source2, source3, cons) {\n  if (source1.length !== source2.length ? true : source2.length !== source3.length) {\n    throw new Error("Arrays had different lengths");\n  }\n  var result = Helpers_allocateArrayFromCons(cons, source1.length);\n  for (var i = 0; i <= source1.length - 1; i++) {\n    result[i] = f(i, source1[i], source2[i], source3[i]);\n  }\n  return result;\n}\nfunction map3(f, source1, source2, source3, cons) {\n  if (source1.length !== source2.length ? true : source2.length !== source3.length) {\n    throw new Error("Arrays had different lengths");\n  }\n  var result = Helpers_allocateArrayFromCons(cons, source1.length);\n  for (var i = 0; i <= source1.length - 1; i++) {\n    result[i] = f(source1[i], source2[i], source3[i]);\n  }\n  return result;\n}\nfunction mapFold(mapping, state, array, cons) {\n  var matchValue = array.length | 0;\n  if (matchValue === 0) {\n    return [[], state];\n  } else {\n    var acc = state;\n    var res = Helpers_allocateArrayFromCons(cons, matchValue);\n    for (var i = 0; i <= array.length - 1; i++) {\n      var patternInput = mapping(acc, array[i]);\n      res[i] = patternInput[0];\n      acc = patternInput[1];\n    }\n    return [res, acc];\n  }\n}\nfunction mapFoldBack(mapping, array, state, cons) {\n  var matchValue = array.length | 0;\n  if (matchValue === 0) {\n    return [[], state];\n  } else {\n    var acc = state;\n    var res = Helpers_allocateArrayFromCons(cons, matchValue);\n    for (var i = array.length - 1; i >= 0; i--) {\n      var patternInput = mapping(array[i], acc);\n      res[i] = patternInput[0];\n      acc = patternInput[1];\n    }\n    return [res, acc];\n  }\n}\nfunction indexed(source) {\n  var len = source.length | 0;\n  var target = new Array(len);\n  for (var i = 0; i <= len - 1; i++) {\n    target[i] = [i, source[i]];\n  }\n  return target;\n}\nfunction truncate(count, array) {\n  var count_1 = Object(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* max */ "r"])(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* comparePrimitives */ "h"], 0, count) | 0;\n  var start = 0;\n  return array.slice(start, start + count_1);\n}\nfunction concat(arrays, cons) {\n  var arrays_1 = Array.isArray(arrays) ? arrays : Array.from(arrays);\n  var matchValue = arrays_1.length | 0;\n  switch (matchValue) {\n    case 0:\n      {\n        return Helpers_allocateArrayFromCons(cons, 0);\n      }\n    case 1:\n      {\n        return arrays_1[0];\n      }\n    default:\n      {\n        var totalIdx = 0;\n        var totalLength = 0;\n        for (var idx = 0; idx <= arrays_1.length - 1; idx++) {\n          var arr_1 = arrays_1[idx];\n          totalLength = totalLength + arr_1.length | 0;\n        }\n        var result = Helpers_allocateArrayFromCons(cons, totalLength);\n        for (var idx_1 = 0; idx_1 <= arrays_1.length - 1; idx_1++) {\n          var arr_2 = arrays_1[idx_1];\n          for (var j = 0; j <= arr_2.length - 1; j++) {\n            result[totalIdx] = arr_2[j];\n            totalIdx = totalIdx + 1 | 0;\n          }\n        }\n        return result;\n      }\n  }\n}\nfunction collect(mapping, array, cons) {\n  return concat(map(mapping, array, null), cons);\n}\nfunction where(predicate, array) {\n  return array.filter(predicate);\n}\nfunction indexOf(array, item_1, start, count, eq) {\n  var start_1 = Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* defaultArg */ "a"])(start, 0) | 0;\n  var end$0027 = Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* defaultArg */ "a"])(Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* map */ "b"])(function (c) {\n    return start_1 + c;\n  }, count), array.length) | 0;\n  var loop = function loop(i_mut) {\n    loop: while (true) {\n      var i = i_mut;\n      if (i >= end$0027) {\n        return -1;\n      } else if (eq.Equals(item_1, array[i])) {\n        return i | 0;\n      } else {\n        i_mut = i + 1;\n        continue loop;\n      }\n      break;\n    }\n  };\n  return loop(start_1) | 0;\n}\nfunction contains(value, array, eq) {\n  return indexOf(array, value, void 0, void 0, eq) >= 0;\n}\nfunction empty(cons) {\n  return Helpers_allocateArrayFromCons(cons, 0);\n}\nfunction singleton(value, cons) {\n  var ar = Helpers_allocateArrayFromCons(cons, 1);\n  ar[0] = value;\n  return ar;\n}\nfunction initialize(count, initializer, cons) {\n  if (count < 0) {\n    throw new Error("The input must be non-negative\\\\nParameter name: count");\n  }\n  var result = Helpers_allocateArrayFromCons(cons, count);\n  for (var i = 0; i <= count - 1; i++) {\n    result[i] = initializer(i);\n  }\n  return result;\n}\nfunction pairwise(array) {\n  if (array.length < 2) {\n    return [];\n  } else {\n    var count = array.length - 1 | 0;\n    var result = new Array(count);\n    for (var i = 0; i <= count - 1; i++) {\n      result[i] = [array[i], array[i + 1]];\n    }\n    return result;\n  }\n}\nfunction replicate(count, initial, cons) {\n  if (count < 0) {\n    throw new Error("The input must be non-negative\\\\nParameter name: count");\n  }\n  var result = Helpers_allocateArrayFromCons(cons, count);\n  for (var i = 0; i <= result.length - 1; i++) {\n    result[i] = initial;\n  }\n  return result;\n}\nfunction copy(array) {\n  return array.slice();\n}\nfunction reverse(array) {\n  var array_2 = array.slice();\n  return array_2.reverse();\n}\nfunction scan(folder, state, array, cons) {\n  var res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n  res[0] = state;\n  for (var i = 0; i <= array.length - 1; i++) {\n    res[i + 1] = folder(res[i], array[i]);\n  }\n  return res;\n}\nfunction scanBack(folder, array, state, cons) {\n  var res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n  res[array.length] = state;\n  for (var i = array.length - 1; i >= 0; i--) {\n    res[i] = folder(array[i], res[i + 1]);\n  }\n  return res;\n}\nfunction skip(count, array, cons) {\n  if (count > array.length) {\n    throw new Error("count is greater than array length\\\\nParameter name: count");\n  }\n  if (count === array.length) {\n    return Helpers_allocateArrayFromCons(cons, 0);\n  } else {\n    var count_1 = (count < 0 ? 0 : count) | 0;\n    return array.slice(count_1);\n  }\n}\nfunction skipWhile(predicate, array, cons) {\n  var count = 0;\n  while (count < array.length && predicate(array[count])) {\n    count = count + 1 | 0;\n  }\n  if (count === array.length) {\n    return Helpers_allocateArrayFromCons(cons, 0);\n  } else {\n    var count_1 = count | 0;\n    return array.slice(count_1);\n  }\n}\nfunction take(count, array, cons) {\n  if (count < 0) {\n    throw new Error("The input must be non-negative\\\\nParameter name: count");\n  }\n  if (count > array.length) {\n    throw new Error("count is greater than array length\\\\nParameter name: count");\n  }\n  if (count === 0) {\n    return Helpers_allocateArrayFromCons(cons, 0);\n  } else {\n    var start = 0;\n    return array.slice(start, start + count);\n  }\n}\nfunction takeWhile(predicate, array, cons) {\n  var count = 0;\n  while (count < array.length && predicate(array[count])) {\n    count = count + 1 | 0;\n  }\n  if (count === 0) {\n    return Helpers_allocateArrayFromCons(cons, 0);\n  } else {\n    var start = 0;\n    var count_1 = count | 0;\n    return array.slice(start, start + count_1);\n  }\n}\nfunction addInPlace(x, array) {\n  array.push(x);\n}\nfunction addRangeInPlace(range, array) {\n  var enumerator = Object(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* getEnumerator */ "n"])(range);\n  try {\n    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {\n      addInPlace(enumerator["System.Collections.Generic.IEnumerator`1.get_Current"](), array);\n    }\n  } finally {\n    Object(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* disposeSafe */ "j"])(enumerator);\n  }\n}\nfunction insertRangeInPlace(index, range, array) {\n  var index_1;\n  var i = index;\n  var enumerator = Object(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* getEnumerator */ "n"])(range);\n  try {\n    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {\n      var x = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();\n      index_1 = i | 0, array.splice(index_1, 0, x);\n      i = i + 1 | 0;\n    }\n  } finally {\n    Object(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* disposeSafe */ "j"])(enumerator);\n  }\n}\nfunction removeInPlace(item_1, array, eq) {\n  var i = indexOf(array, item_1, void 0, void 0, eq) | 0;\n  if (i > -1) {\n    array.splice(i, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction removeAllInPlace(predicate, array) {\n  var countRemoveAll = function countRemoveAll(count) {\n    var i = array.findIndex(predicate) | 0;\n    if (i > -1) {\n      array.splice(i, 1);\n      return countRemoveAll(count) + 1 | 0;\n    } else {\n      return count | 0;\n    }\n  };\n  return countRemoveAll(0) | 0;\n}\nfunction copyTo(source, sourceIndex, target, targetIndex, count) {\n  var diff = targetIndex - sourceIndex | 0;\n  for (var i = sourceIndex; i <= sourceIndex + count - 1; i++) {\n    target[i + diff] = source[i];\n  }\n}\nfunction copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\n  try {\n    target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\n  } catch (matchValue) {\n    copyTo(source, sourceIndex, target, targetIndex, count);\n  }\n}\nfunction partition(f, source, cons) {\n  var len = source.length | 0;\n  var res1 = Helpers_allocateArrayFromCons(cons, len);\n  var res2 = Helpers_allocateArrayFromCons(cons, len);\n  var iTrue = 0;\n  var iFalse = 0;\n  for (var i = 0; i <= len - 1; i++) {\n    if (f(source[i])) {\n      res1[iTrue] = source[i];\n      iTrue = iTrue + 1 | 0;\n    } else {\n      res2[iFalse] = source[i];\n      iFalse = iFalse + 1 | 0;\n    }\n  }\n  return [truncate(iTrue, res1), truncate(iFalse, res2)];\n}\nfunction find(predicate, array) {\n  var matchValue = array.find(predicate);\n  if (matchValue == null) {\n    return indexNotFound();\n  } else {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* value */ "d"])(matchValue);\n  }\n}\nfunction tryFind(predicate, array) {\n  return array.find(predicate);\n}\nfunction findIndex(predicate, array) {\n  var matchValue = array.findIndex(predicate) | 0;\n  if (matchValue > -1) {\n    return matchValue | 0;\n  } else {\n    return indexNotFound() | 0;\n  }\n}\nfunction tryFindIndex(predicate, array) {\n  var matchValue = array.findIndex(predicate) | 0;\n  if (matchValue > -1) {\n    return matchValue;\n  } else {\n    return void 0;\n  }\n}\nfunction pick(chooser, array) {\n  var loop = function loop(i_mut) {\n    loop: while (true) {\n      var i = i_mut;\n      if (i >= array.length) {\n        return indexNotFound();\n      } else {\n        var matchValue = chooser(array[i]);\n        if (matchValue != null) {\n          return Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* value */ "d"])(matchValue);\n        } else {\n          i_mut = i + 1;\n          continue loop;\n        }\n      }\n      break;\n    }\n  };\n  return loop(0);\n}\nfunction tryPick(chooser, array) {\n  var loop = function loop(i_mut) {\n    loop: while (true) {\n      var i = i_mut;\n      if (i >= array.length) {\n        return void 0;\n      } else {\n        var matchValue = chooser(array[i]);\n        if (matchValue == null) {\n          i_mut = i + 1;\n          continue loop;\n        } else {\n          return matchValue;\n        }\n      }\n      break;\n    }\n  };\n  return loop(0);\n}\nfunction findBack(predicate, array) {\n  var loop = function loop(i_mut) {\n    loop: while (true) {\n      var i = i_mut;\n      if (i < 0) {\n        return indexNotFound();\n      } else if (predicate(array[i])) {\n        return array[i];\n      } else {\n        i_mut = i - 1;\n        continue loop;\n      }\n      break;\n    }\n  };\n  return loop(array.length - 1);\n}\nfunction tryFindBack(predicate, array) {\n  var loop = function loop(i_mut) {\n    loop: while (true) {\n      var i = i_mut;\n      if (i < 0) {\n        return void 0;\n      } else if (predicate(array[i])) {\n        return Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* some */ "c"])(array[i]);\n      } else {\n        i_mut = i - 1;\n        continue loop;\n      }\n      break;\n    }\n  };\n  return loop(array.length - 1);\n}\nfunction findLastIndex(predicate, array) {\n  var loop = function loop(i_mut) {\n    loop: while (true) {\n      var i = i_mut;\n      if (i < 0) {\n        return -1;\n      } else if (predicate(array[i])) {\n        return i | 0;\n      } else {\n        i_mut = i - 1;\n        continue loop;\n      }\n      break;\n    }\n  };\n  return loop(array.length - 1) | 0;\n}\nfunction findIndexBack(predicate, array) {\n  var loop = function loop(i_mut) {\n    loop: while (true) {\n      var i = i_mut;\n      if (i < 0) {\n        return indexNotFound() | 0;\n      } else if (predicate(array[i])) {\n        return i | 0;\n      } else {\n        i_mut = i - 1;\n        continue loop;\n      }\n      break;\n    }\n  };\n  return loop(array.length - 1) | 0;\n}\nfunction tryFindIndexBack(predicate, array) {\n  var loop = function loop(i_mut) {\n    loop: while (true) {\n      var i = i_mut;\n      if (i < 0) {\n        return void 0;\n      } else if (predicate(array[i])) {\n        return i;\n      } else {\n        i_mut = i - 1;\n        continue loop;\n      }\n      break;\n    }\n  };\n  return loop(array.length - 1);\n}\nfunction choose(chooser, array, cons) {\n  var res = [];\n  for (var i = 0; i <= array.length - 1; i++) {\n    var matchValue = chooser(array[i]);\n    if (matchValue != null) {\n      var y = Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* value */ "d"])(matchValue);\n      res.push(y);\n    }\n  }\n  if (typeof cons === "function") {\n    return map(function (x) {\n      return x;\n    }, res, cons);\n  } else {\n    return res;\n  }\n}\nfunction foldIndexed(folder, state, array) {\n  return array.reduce(function (delegateArg, delegateArg_1, delegateArg_2) {\n    return folder(delegateArg_2, delegateArg, delegateArg_1);\n  }, state);\n}\nfunction fold(folder, state, array) {\n  return array.reduce(folder, state);\n}\nfunction iterate(action, array) {\n  for (var i = 0; i <= array.length - 1; i++) {\n    action(array[i]);\n  }\n}\nfunction iterateIndexed(action, array) {\n  for (var i = 0; i <= array.length - 1; i++) {\n    action(i, array[i]);\n  }\n}\nfunction iterate2(action, array1, array2) {\n  if (array1.length !== array2.length) {\n    differentLengths();\n  }\n  for (var i = 0; i <= array1.length - 1; i++) {\n    action(array1[i], array2[i]);\n  }\n}\nfunction iterateIndexed2(action, array1, array2) {\n  if (array1.length !== array2.length) {\n    differentLengths();\n  }\n  for (var i = 0; i <= array1.length - 1; i++) {\n    action(i, array1[i], array2[i]);\n  }\n}\nfunction isEmpty(array) {\n  return array.length === 0;\n}\nfunction forAll(predicate, array) {\n  return array.every(predicate);\n}\nfunction permute(f, array) {\n  var size = array.length | 0;\n  var res = array.slice();\n  var checkFlags = new Array(size);\n  iterateIndexed(function (i, x) {\n    var j = f(i) | 0;\n    if (j < 0 ? true : j >= size) {\n      throw new Error("Not a valid permutation");\n    }\n    res[j] = x;\n    checkFlags[j] = 1;\n  }, array);\n  if (!checkFlags.every(function (y) {\n    return 1 === y;\n  })) {\n    throw new Error("Not a valid permutation");\n  }\n  return res;\n}\nfunction setSlice(target, lower, upper, source) {\n  var lower_1 = Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* defaultArg */ "a"])(lower, 0) | 0;\n  var upper_1 = Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* defaultArg */ "a"])(upper, -1) | 0;\n  var length = (upper_1 >= 0 ? upper_1 : target.length - 1) - lower_1 | 0;\n  for (var i = 0; i <= length; i++) {\n    target[i + lower_1] = source[i];\n  }\n}\nfunction sortInPlaceBy(projection, xs, comparer) {\n  xs.sort(function (x, y) {\n    return comparer.Compare(projection(x), projection(y));\n  });\n}\nfunction sortInPlace(xs, comparer) {\n  xs.sort(function (x, y) {\n    return comparer.Compare(x, y);\n  });\n}\nfunction sort(xs, comparer) {\n  var xs_1 = xs.slice();\n  xs_1.sort(function (x, y) {\n    return comparer.Compare(x, y);\n  });\n  return xs_1;\n}\nfunction sortBy(projection, xs, comparer) {\n  var xs_1 = xs.slice();\n  xs_1.sort(function (x, y) {\n    return comparer.Compare(projection(x), projection(y));\n  });\n  return xs_1;\n}\nfunction sortDescending(xs, comparer) {\n  var xs_1 = xs.slice();\n  xs_1.sort(function (x, y) {\n    return comparer.Compare(x, y) * -1;\n  });\n  return xs_1;\n}\nfunction sortByDescending(projection, xs, comparer) {\n  var xs_1 = xs.slice();\n  xs_1.sort(function (x, y) {\n    return comparer.Compare(projection(x), projection(y)) * -1;\n  });\n  return xs_1;\n}\nfunction sortWith(comparer, xs) {\n  var comparer_1 = comparer;\n  var xs_1 = xs.slice();\n  xs_1.sort(comparer_1);\n  return xs_1;\n}\nfunction allPairs(xs, ys) {\n  var len1 = xs.length | 0;\n  var len2 = ys.length | 0;\n  var res = new Array(len1 * len2);\n  for (var i = 0; i <= xs.length - 1; i++) {\n    for (var j = 0; j <= ys.length - 1; j++) {\n      res[i * len2 + j] = [xs[i], ys[j]];\n    }\n  }\n  return res;\n}\nfunction unfold(generator, state) {\n  var res = [];\n  var loop = function loop(state_1_mut) {\n    loop: while (true) {\n      var state_1 = state_1_mut;\n      var matchValue = generator(state_1);\n      if (matchValue != null) {\n        var x = matchValue[0];\n        var s = matchValue[1];\n        res.push(x);\n        state_1_mut = s;\n        continue loop;\n      }\n      break;\n    }\n  };\n  loop(state);\n  return res;\n}\nfunction unzip(array) {\n  var len = array.length | 0;\n  var res1 = new Array(len);\n  var res2 = new Array(len);\n  iterateIndexed(function (i, tupledArg) {\n    res1[i] = tupledArg[0];\n    res2[i] = tupledArg[1];\n  }, array);\n  return [res1, res2];\n}\nfunction unzip3(array) {\n  var len = array.length | 0;\n  var res1 = new Array(len);\n  var res2 = new Array(len);\n  var res3 = new Array(len);\n  iterateIndexed(function (i, tupledArg) {\n    res1[i] = tupledArg[0];\n    res2[i] = tupledArg[1];\n    res3[i] = tupledArg[2];\n  }, array);\n  return [res1, res2, res3];\n}\nfunction zip(array1, array2) {\n  if (array1.length !== array2.length) {\n    differentLengths();\n  }\n  var result = new Array(array1.length);\n  for (var i = 0; i <= array1.length - 1; i++) {\n    result[i] = [array1[i], array2[i]];\n  }\n  return result;\n}\nfunction zip3(array1, array2, array3) {\n  if (array1.length !== array2.length ? true : array2.length !== array3.length) {\n    differentLengths();\n  }\n  var result = new Array(array1.length);\n  for (var i = 0; i <= array1.length - 1; i++) {\n    result[i] = [array1[i], array2[i], array3[i]];\n  }\n  return result;\n}\nfunction chunkBySize(chunkSize, array) {\n  if (chunkSize < 1) {\n    throw new Error("The input must be positive.\\\\nParameter name: size");\n  }\n  if (array.length === 0) {\n    return [[]];\n  } else {\n    var result = [];\n    for (var x = 0; x <= ~~Math.ceil(array.length / chunkSize) - 1; x++) {\n      var slice = void 0;\n      var start_1 = x * chunkSize | 0;\n      slice = array.slice(start_1, start_1 + chunkSize);\n      result.push(slice);\n    }\n    return result;\n  }\n}\nfunction splitAt(index, array) {\n  var start;\n  if (index < 0 ? true : index > array.length) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_14__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n  }\n  return [(start = 0, array.slice(start, start + index)), array.slice(index)];\n}\nfunction compareWith(comparer, source1, source2) {\n  if (source1 == null) {\n    if (source2 == null) {\n      return 0;\n    } else {\n      return -1;\n    }\n  } else if (source2 == null) {\n    return 1;\n  } else {\n    var len1 = source1.length | 0;\n    var len2 = source2.length | 0;\n    var len = (len1 < len2 ? len1 : len2) | 0;\n    var i = 0;\n    var res = 0;\n    while (res === 0 && i < len) {\n      res = comparer(source1[i], source2[i]) | 0;\n      i = i + 1 | 0;\n    }\n    if (res !== 0) {\n      return res | 0;\n    } else if (len1 > len2) {\n      return 1;\n    } else if (len1 < len2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n}\nfunction compareTo(comparer, source1, source2) {\n  if (source1 == null) {\n    if (source2 == null) {\n      return 0;\n    } else {\n      return -1;\n    }\n  } else if (source2 == null) {\n    return 1;\n  } else {\n    var len1 = source1.length | 0;\n    var len2 = source2.length | 0;\n    if (len1 > len2) {\n      return 1;\n    } else if (len1 < len2) {\n      return -1;\n    } else {\n      var i = 0;\n      var res = 0;\n      while (res === 0 && i < len1) {\n        res = comparer(source1[i], source2[i]) | 0;\n        i = i + 1 | 0;\n      }\n      return res | 0;\n    }\n  }\n}\nfunction equalsWith(equals, array1, array2) {\n  if (array1 == null) {\n    if (array2 == null) {\n      return true;\n    } else {\n      return false;\n    }\n  } else if (array2 == null) {\n    return false;\n  } else {\n    var i = 0;\n    var result = true;\n    var length1 = array1.length | 0;\n    var length2 = array2.length | 0;\n    if (length1 > length2) {\n      return false;\n    } else if (length1 < length2) {\n      return false;\n    } else {\n      while (i < length1 && result) {\n        result = equals(array1[i], array2[i]);\n        i = i + 1 | 0;\n      }\n      return result;\n    }\n  }\n}\nfunction exactlyOne(array) {\n  if (array.length === 1) {\n    return array[0];\n  } else if (array.length === 0) {\n    throw new Error("The input sequence was empty\\\\nParameter name: array");\n  } else {\n    throw new Error("Input array too long\\\\nParameter name: array");\n  }\n}\nfunction tryExactlyOne(array) {\n  if (array.length === 1) {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* some */ "c"])(array[0]);\n  } else {\n    return void 0;\n  }\n}\nfunction head(array) {\n  if (array.length === 0) {\n    throw new Error("The input array was empty\\\\nParameter name: array");\n  } else {\n    return array[0];\n  }\n}\nfunction tryHead(array) {\n  if (array.length === 0) {\n    return void 0;\n  } else {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* some */ "c"])(array[0]);\n  }\n}\nfunction tail(array) {\n  if (array.length === 0) {\n    throw new Error("Not enough elements\\\\nParameter name: array");\n  }\n  return array.slice(1);\n}\nfunction item(index, array) {\n  return array[index];\n}\nfunction tryItem(index, array) {\n  if (index < 0 ? true : index >= array.length) {\n    return void 0;\n  } else {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_12__[/* some */ "c"])(array[index]);\n  }\n}\nfunction foldBackIndexed(folder, array, state) {\n  return array.reduceRight(function (delegateArg, delegateArg_1, delegateArg_2) {\n    return folder(delegateArg_2, delegateArg_1, delegateArg);\n  }, state);\n}\nfunction foldBack(folder, array, state) {\n  return array.reduceRight(function (delegateArg, delegateArg_1) {\n    return folder(delegateArg_1, delegateArg);\n  }, state);\n}\nfunction foldIndexed2(folder, state, array1, array2) {\n  var acc = state;\n  if (array1.length !== array2.length) {\n    throw new Error("Arrays have different lengths");\n  }\n  for (var i = 0; i <= array1.length - 1; i++) {\n    acc = folder(i, acc, array1[i], array2[i]);\n  }\n  return acc;\n}\nfunction fold2(folder, state, array1, array2) {\n  return foldIndexed2(function (_arg, acc, x, y) {\n    return folder(acc, x, y);\n  }, state, array1, array2);\n}\nfunction foldBackIndexed2(folder, array1, array2, state) {\n  var acc = state;\n  if (array1.length !== array2.length) {\n    differentLengths();\n  }\n  var size = array1.length | 0;\n  for (var i = 1; i <= size; i++) {\n    acc = folder(i - 1, array1[size - i], array2[size - i], acc);\n  }\n  return acc;\n}\nfunction foldBack2(f, array1, array2, state) {\n  return foldBackIndexed2(function (_arg, x, y, acc) {\n    return f(x, y, acc);\n  }, array1, array2, state);\n}\nfunction reduce(reduction, array) {\n  if (array.length === 0) {\n    throw new Error("The input array was empty");\n  }\n  var reduction_1 = reduction;\n  return array.reduce(reduction_1);\n}\nfunction reduceBack(reduction, array) {\n  if (array.length === 0) {\n    throw new Error("The input array was empty");\n  }\n  var reduction_1 = reduction;\n  return array.reduceRight(reduction_1);\n}\nfunction forAll2(predicate, array1, array2) {\n  return fold2(function (acc, x, y) {\n    return acc && predicate(x, y);\n  }, true, array1, array2);\n}\nfunction existsOffset(predicate_mut, array_mut, index_mut) {\n  existsOffset: while (true) {\n    var predicate = predicate_mut,\n      array = array_mut,\n      index = index_mut;\n    if (index === array.length) {\n      return false;\n    } else if (predicate(array[index])) {\n      return true;\n    } else {\n      predicate_mut = predicate;\n      array_mut = array;\n      index_mut = index + 1;\n      continue existsOffset;\n    }\n    break;\n  }\n}\nfunction exists(predicate, array) {\n  return existsOffset(predicate, array, 0);\n}\nfunction existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\n  existsOffset2: while (true) {\n    var predicate = predicate_mut,\n      array1 = array1_mut,\n      array2 = array2_mut,\n      index = index_mut;\n    if (index === array1.length) {\n      return false;\n    } else if (predicate(array1[index], array2[index])) {\n      return true;\n    } else {\n      predicate_mut = predicate;\n      array1_mut = array1;\n      array2_mut = array2;\n      index_mut = index + 1;\n      continue existsOffset2;\n    }\n    break;\n  }\n}\nfunction exists2(predicate, array1, array2) {\n  if (array1.length !== array2.length) {\n    differentLengths();\n  }\n  return existsOffset2(predicate, array1, array2, 0);\n}\nfunction sum(array, adder) {\n  var acc = adder.GetZero();\n  for (var i = 0; i <= array.length - 1; i++) {\n    acc = adder.Add(acc, array[i]);\n  }\n  return acc;\n}\nfunction sumBy(projection, array, adder) {\n  var acc = adder.GetZero();\n  for (var i = 0; i <= array.length - 1; i++) {\n    acc = adder.Add(acc, projection(array[i]));\n  }\n  return acc;\n}\nfunction maxBy(projection, xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(projection(y), projection(x)) > 0 ? y : x;\n  }, xs);\n}\nfunction max(xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(y, x) > 0 ? y : x;\n  }, xs);\n}\nfunction minBy(projection, xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(projection(y), projection(x)) > 0 ? x : y;\n  }, xs);\n}\nfunction min(xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(y, x) > 0 ? x : y;\n  }, xs);\n}\nfunction average(array, averager) {\n  if (array.length === 0) {\n    throw new Error("The input array was empty\\\\nParameter name: array");\n  }\n  var total = averager.GetZero();\n  for (var i = 0; i <= array.length - 1; i++) {\n    total = averager.Add(total, array[i]);\n  }\n  return averager.DivideByInt(total, array.length);\n}\nfunction averageBy(projection, array, averager) {\n  if (array.length === 0) {\n    throw new Error("The input array was empty\\\\nParameter name: array");\n  }\n  var total = averager.GetZero();\n  for (var i = 0; i <= array.length - 1; i++) {\n    total = averager.Add(total, projection(array[i]));\n  }\n  return averager.DivideByInt(total, array.length);\n}\nfunction windowed(windowSize, source) {\n  if (windowSize <= 0) {\n    throw new Error("windowSize must be positive");\n  }\n  var res;\n  var len = Object(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* max */ "r"])(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* comparePrimitives */ "h"], 0, source.length - windowSize + 1) | 0;\n  res = new Array(len);\n  for (var i = windowSize; i <= source.length; i++) {\n    res[i - windowSize] = source.slice(i - windowSize, i - 1 + 1);\n  }\n  return res;\n}\nfunction splitInto(chunks, array) {\n  if (chunks < 1) {\n    throw new Error("The input must be positive.\\\\nParameter name: chunks");\n  }\n  if (array.length === 0) {\n    return [[]];\n  } else {\n    var result = [];\n    var chunks_1 = Object(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* min */ "s"])(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* comparePrimitives */ "h"], chunks, array.length) | 0;\n    var minChunkSize = ~~(array.length / chunks_1) | 0;\n    var chunksWithExtraItem = array.length % chunks_1 | 0;\n    for (var i = 0; i <= chunks_1 - 1; i++) {\n      var chunkSize = (i < chunksWithExtraItem ? minChunkSize + 1 : minChunkSize) | 0;\n      var slice = void 0;\n      var start_1 = i * minChunkSize + Object(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* min */ "s"])(_Util_js__WEBPACK_IMPORTED_MODULE_13__[/* comparePrimitives */ "h"], chunksWithExtraItem, i) | 0;\n      slice = array.slice(start_1, start_1 + chunkSize);\n      result.push(slice);\n    }\n    return result;\n  }\n}\nfunction transpose(arrays, cons) {\n  var arrays_1 = Array.isArray(arrays) ? arrays : Array.from(arrays);\n  var len = arrays_1.length | 0;\n  if (len === 0) {\n    return new Array(0);\n  } else {\n    var firstArray = arrays_1[0];\n    var lenInner = firstArray.length | 0;\n    if (!forAll(function (a) {\n      return a.length === lenInner;\n    }, arrays_1)) {\n      differentLengths();\n    }\n    var result = new Array(lenInner);\n    for (var i = 0; i <= lenInner - 1; i++) {\n      result[i] = Helpers_allocateArrayFromCons(cons, len);\n      for (var j = 0; j <= len - 1; j++) {\n        result[i][j] = arrays_1[j][i];\n      }\n    }\n    return result;\n  }\n}\nfunction insertAt(index, y, xs) {\n  var len = xs.length | 0;\n  if (index < 0 ? true : index > len) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_14__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n  }\n  var target = new xs.constructor(len + 1);\n  for (var i = 0; i <= index - 1; i++) {\n    target[i] = xs[i];\n  }\n  target[index] = y;\n  for (var i_1 = index; i_1 <= len - 1; i_1++) {\n    target[i_1 + 1] = xs[i_1];\n  }\n  return target;\n}\nfunction insertManyAt(index, ys, xs) {\n  var len = xs.length | 0;\n  if (index < 0 ? true : index > len) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_14__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n  }\n  var ys_1 = Array.from(ys);\n  var len2 = ys_1.length | 0;\n  var target = new xs.constructor(len + len2);\n  for (var i = 0; i <= index - 1; i++) {\n    target[i] = xs[i];\n  }\n  for (var i_1 = 0; i_1 <= len2 - 1; i_1++) {\n    target[index + i_1] = ys_1[i_1];\n  }\n  for (var i_2 = index; i_2 <= len - 1; i_2++) {\n    target[i_2 + len2] = xs[i_2];\n  }\n  return target;\n}\nfunction removeAt(index, xs) {\n  if (index < 0 ? true : index >= xs.length) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_14__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n  }\n  var i = -1;\n  return filter(function (_arg) {\n    i = i + 1 | 0;\n    return i !== index;\n  }, xs);\n}\nfunction removeManyAt(index, count, xs) {\n  var i = -1;\n  var status = -1;\n  var ys = filter(function (_arg) {\n    i = i + 1 | 0;\n    if (i === index) {\n      status = 0;\n      return false;\n    } else if (i > index) {\n      if (i < index + count) {\n        return false;\n      } else {\n        status = 1;\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }, xs);\n  var status_1 = (status === 0 && i + 1 === index + count ? 1 : status) | 0;\n  if (status_1 < 1) {\n    var arg = status_1 < 0 ? "index" : "count";\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_14__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + arg);\n  }\n  return ys;\n}\nfunction updateAt(index, y, xs) {\n  var len = xs.length | 0;\n  if (index < 0 ? true : index >= len) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_14__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n  }\n  var target = new xs.constructor(len);\n  for (var i = 0; i <= len - 1; i++) {\n    target[i] = i === index ? y : xs[i];\n  }\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n')},102:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ Test_testCase; });\n__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ Test_testList; });\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Mocha_runTests; });\n\n// UNUSED EXPORTS: FocusState, FocusState$reflection, TestCase, TestCase$reflection, Test_ptestCase, Test_ftestCase, Test_testCaseAsync, Test_ptestCaseAsync, Test_ftestCaseAsync, Test_testSequenced, Env_insideBrowser, Expect_notEqual, Expect_isTrue, Expect_isFalse, Expect_isZero, Expect_isEmpty, Expect_pass, Expect_isOk, Mocha_isFocused, Mocha_invalidateTestResults, Mocha_runViaDotnet\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.set-prototype-of.js\nvar es_object_set_prototype_of = __webpack_require__(65);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-prototype-of.js\nvar es_object_get_prototype_of = __webpack_require__(60);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.construct.js\nvar es_reflect_construct = __webpack_require__(66);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-property.js\nvar es_object_define_property = __webpack_require__(35);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.to-primitive.js\nvar es_symbol_to_primitive = __webpack_require__(36);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.date.to-primitive.js\nvar es_date_to_primitive = __webpack_require__(37);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __webpack_require__(25);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __webpack_require__(27);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js\nvar es_number_constructor = __webpack_require__(31);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __webpack_require__(28);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __webpack_require__(20);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __webpack_require__(24);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(29);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Types.js\nvar Types = __webpack_require__(8);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Reflection.js + 2 modules\nvar Reflection = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/List.js\nvar List = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Util.js\nvar Util = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/String.js + 2 modules\nvar fable_library_3_7_17_String = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __webpack_require__(41);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reduce-right.js\nvar es_array_reduce_right = __webpack_require__(224);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.sort.js\nvar es_array_sort = __webpack_require__(121);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Option.js\nvar Option = __webpack_require__(4);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/FSharp.Collections.js\n\nfunction HashIdentity_FromFunctions(hash, eq) {\n  return {\n    Equals: function Equals(x, y) {\n      return eq(x, y);\n    },\n    GetHashCode: function GetHashCode(x_1) {\n      return hash(x_1);\n    }\n  };\n}\nfunction HashIdentity_Structural() {\n  return HashIdentity_FromFunctions(Util["y" /* structuralHash */], Util["m" /* equals */]);\n}\nfunction HashIdentity_Reference() {\n  return HashIdentity_FromFunctions(Util["v" /* physicalHash */], function (e, e_1) {\n    return e === e_1;\n  });\n}\nfunction ComparisonIdentity_FromFunction(comparer) {\n  return {\n    Compare: function Compare(x, y) {\n      return comparer(x, y);\n    }\n  };\n}\nfunction ComparisonIdentity_Structural() {\n  return ComparisonIdentity_FromFunction(Util["e" /* compare */]);\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js\nvar es_regexp_to_string = __webpack_require__(46);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/System.Text.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\nvar System_Text_StringBuilder = /*#__PURE__*/function () {\n  function StringBuilder(value, capacity) {\n    _classCallCheck(this, StringBuilder);\n    this.buf = [];\n    if (!Object(fable_library_3_7_17_String["b" /* isNullOrEmpty */])(value)) {\n      void this.buf.push(value);\n    }\n  }\n  _createClass(StringBuilder, [{\n    key: "toString",\n    value: function toString() {\n      var __ = this;\n      return Object(fable_library_3_7_17_String["d" /* join */])("", __.buf);\n    }\n  }]);\n  return StringBuilder;\n}();\nfunction StringBuilder$reflection() {\n  return Object(Reflection["b" /* class_type */])("System.Text.StringBuilder", void 0, System_Text_StringBuilder);\n}\nfunction StringBuilder_$ctor_Z18115A39(value, capacity) {\n  return new System_Text_StringBuilder(value, capacity);\n}\nfunction StringBuilder_$ctor_Z524259A4(capacity) {\n  return StringBuilder_$ctor_Z18115A39("", capacity);\n}\nfunction StringBuilder_$ctor_Z721C83C5(value) {\n  return StringBuilder_$ctor_Z18115A39(value, 16);\n}\nfunction StringBuilder_$ctor() {\n  return StringBuilder_$ctor_Z18115A39("", 16);\n}\nfunction StringBuilder__Append_Z721C83C5(x, s) {\n  void x.buf.push(s);\n  return x;\n}\nfunction StringBuilder__Append_244C7CD6(x, c) {\n  void x.buf.push(c);\n  return x;\n}\nfunction StringBuilder__Append_Z524259A4(x, o) {\n  void x.buf.push(Object(Util["o" /* int32ToString */])(o));\n  return x;\n}\nfunction StringBuilder__Append_5E38073B(x, o) {\n  void x.buf.push(o.toString());\n  return x;\n}\nfunction StringBuilder__Append_Z1FBCCD16(x, o) {\n  void x.buf.push(Object(Types["f" /* toString */])(o));\n  return x;\n}\nfunction StringBuilder__Append_4E60E31B(x, o) {\n  void x.buf.push(Object(Types["f" /* toString */])(o));\n  return x;\n}\nfunction StringBuilder__Append_695F1130(x, cs) {\n  void x.buf.push(cs.join(\'\'));\n  return x;\n}\nfunction StringBuilder__Append_43A65C09(x, s) {\n  void x.buf.push(Object(Types["f" /* toString */])(s));\n  return x;\n}\nfunction StringBuilder__AppendFormat_433E080(x, fmt, o) {\n  void x.buf.push(Object(fable_library_3_7_17_String["a" /* format */])(fmt, o));\n  return x;\n}\nfunction StringBuilder__AppendFormat_Z696D8D1B(x, provider, fmt, o) {\n  void x.buf.push(Object(fable_library_3_7_17_String["a" /* format */])(provider, fmt, o));\n  return x;\n}\nfunction StringBuilder__AppendLine(x) {\n  void x.buf.push("\\n");\n  return x;\n}\nfunction StringBuilder__AppendLine_Z721C83C5(x, s) {\n  void x.buf.push(s);\n  void x.buf.push("\\n");\n  return x;\n}\nfunction StringBuilder__get_Length(x) {\n  var len = 0;\n  for (var i = x.buf.length - 1; i >= 0; i--) {\n    len = len + x.buf[i].length | 0;\n  }\n  return len | 0;\n}\nfunction StringBuilder__ToString_Z37302880(x, firstIndex, length) {\n  return Object(fable_library_3_7_17_String["f" /* substring */])(Object(Types["f" /* toString */])(x), firstIndex, length);\n}\nfunction StringBuilder__Clear(x) {\n  Object(Util["c" /* clear */])(x.buf);\n  return x;\n}\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/FSharp.Core.js\n\n\n\n\n\nvar _LanguagePrimitives_G, _LanguagePrimitives_G2;\n\n\n\n\n\n\nfunction FSharp_Core_typeof(obj) { "@babel/helpers - typeof"; return FSharp_Core_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, FSharp_Core_typeof(obj); }\nfunction _defineProperty(obj, key, value) { key = FSharp_Core_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FSharp_Core_toPropertyKey(arg) { var key = FSharp_Core_toPrimitive(arg, "string"); return FSharp_Core_typeof(key) === "symbol" ? key : String(key); }\nfunction FSharp_Core_toPrimitive(input, hint) { if (FSharp_Core_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FSharp_Core_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nvar LanguagePrimitives_GenericEqualityComparer = (_LanguagePrimitives_G = {}, _defineProperty(_LanguagePrimitives_G, "System.Collections.IEqualityComparer.Equals541DA560", function SystemCollectionsIEqualityComparerEquals541DA560(x, y) {\n  return Object(Util["m" /* equals */])(x, y);\n}), _defineProperty(_LanguagePrimitives_G, "System.Collections.IEqualityComparer.GetHashCode4E60E31B", function SystemCollectionsIEqualityComparerGetHashCode4E60E31B(x_1) {\n  return Object(Util["y" /* structuralHash */])(x_1);\n}), _LanguagePrimitives_G);\nvar LanguagePrimitives_GenericEqualityERComparer = (_LanguagePrimitives_G2 = {}, _defineProperty(_LanguagePrimitives_G2, "System.Collections.IEqualityComparer.Equals541DA560", function SystemCollectionsIEqualityComparerEquals541DA560(x, y) {\n  return Object(Util["m" /* equals */])(x, y);\n}), _defineProperty(_LanguagePrimitives_G2, "System.Collections.IEqualityComparer.GetHashCode4E60E31B", function SystemCollectionsIEqualityComparerGetHashCode4E60E31B(x_1) {\n  return Object(Util["y" /* structuralHash */])(x_1);\n}), _LanguagePrimitives_G2);\nfunction LanguagePrimitives_FastGenericComparer() {\n  return ComparisonIdentity_Structural();\n}\nfunction LanguagePrimitives_FastGenericComparerFromTable() {\n  return ComparisonIdentity_Structural();\n}\nfunction LanguagePrimitives_FastGenericEqualityComparer() {\n  return HashIdentity_Structural();\n}\nfunction LanguagePrimitives_FastGenericEqualityComparerFromTable() {\n  return HashIdentity_Structural();\n}\nfunction Operators_Failure(message) {\n  return new Error(message);\n}\nfunction Operators_FailurePattern(exn) {\n  return exn.message;\n}\nfunction Operators_NullArg(x) {\n  throw new Error(x);\n}\nfunction Operators_Using(resource, action) {\n  try {\n    return action(resource);\n  } finally {\n    if (Object(Util["m" /* equals */])(resource, null)) {} else {\n      Object(Util["j" /* disposeSafe */])(resource);\n    }\n  }\n}\nfunction Operators_Lock(_lockObj, action) {\n  return action();\n}\nfunction ExtraTopLevelOperators_LazyPattern(input) {\n  return input.Value;\n}\nfunction PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\n  return format.cont(function (s) {\n    StringBuilder__Append_Z721C83C5(builder, s);\n    return continuation();\n  });\n}\nfunction PrintfModule_PrintFormatToStringBuilder(builder, format) {\n  return PrintfModule_PrintFormatToStringBuilderThen(function () {}, builder, format);\n}\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Array.js\nvar fable_library_3_7_17_Array = __webpack_require__(10);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Global.js\nvar Global = __webpack_require__(7);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/Seq.js\nfunction Seq_typeof(obj) { "@babel/helpers - typeof"; return Seq_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Seq_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Seq_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Seq_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Seq_toPropertyKey(descriptor.key), descriptor); } }\nfunction Seq_createClass(Constructor, protoProps, staticProps) { if (protoProps) Seq_defineProperties(Constructor.prototype, protoProps); if (staticProps) Seq_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Seq_toPropertyKey(arg) { var key = Seq_toPrimitive(arg, "string"); return Seq_typeof(key) === "symbol" ? key : String(key); }\nfunction Seq_toPrimitive(input, hint) { if (Seq_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Seq_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\nvar SR_enumerationAlreadyFinished = "Enumeration already finished.";\nvar SR_enumerationNotStarted = "Enumeration has not started. Call MoveNext.";\nvar SR_inputSequenceEmpty = "The input sequence was empty.";\nvar SR_inputSequenceTooLong = "The input sequence contains more than one element.";\nvar SR_keyNotFoundAlt = "An index satisfying the predicate was not found in the collection.";\nvar SR_notEnoughElements = "The input sequence has an insufficient number of elements.";\nvar SR_resetNotSupported = "Reset is not supported on this enumerator.";\nfunction Enumerator_noReset() {\n  throw new Error(SR_resetNotSupported);\n}\nfunction Enumerator_notStarted() {\n  throw new Error(SR_enumerationNotStarted);\n}\nfunction Enumerator_alreadyFinished() {\n  throw new Error(SR_enumerationAlreadyFinished);\n}\nvar Seq_Enumerator_Seq = /*#__PURE__*/function (_Symbol$iterator) {\n  function Enumerator_Seq(f) {\n    Seq_classCallCheck(this, Enumerator_Seq);\n    this.f = f;\n  }\n  Seq_createClass(Enumerator_Seq, [{\n    key: "toString",\n    value: function toString() {\n      var xs = this;\n      var maxCount = 4;\n      var i = 0;\n      var str = "seq [";\n      var e = Object(Util["n" /* getEnumerator */])(xs);\n      try {\n        while (i < maxCount && e["System.Collections.IEnumerator.MoveNext"]()) {\n          if (i > 0) {\n            str = str + "; ";\n          }\n          str = str + Object(Types["f" /* toString */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n          i = i + 1 | 0;\n        }\n        if (i === maxCount) {\n          str = str + "; ...";\n        }\n        return str + "]";\n      } finally {\n        Object(Util["j" /* disposeSafe */])(e);\n      }\n    }\n  }, {\n    key: "GetEnumerator",\n    value: function GetEnumerator() {\n      var x = this;\n      return x.f();\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return Object(Util["z" /* toIterator */])(this.GetEnumerator());\n    }\n  }, {\n    key: "System.Collections.IEnumerable.GetEnumerator",\n    value: function SystemCollectionsIEnumerableGetEnumerator() {\n      var x = this;\n      return x.f();\n    }\n  }]);\n  return Enumerator_Seq;\n}(Symbol.iterator);\nfunction Enumerator_Seq$reflection(gen0) {\n  return Object(Reflection["b" /* class_type */])("SeqModule.Enumerator.Seq", [gen0], Seq_Enumerator_Seq);\n}\nfunction Enumerator_Seq_$ctor_673A07F2(f) {\n  return new Seq_Enumerator_Seq(f);\n}\nvar Enumerator_FromFunctions$1 = /*#__PURE__*/function () {\n  function Enumerator_FromFunctions$1(current, next, dispose) {\n    Seq_classCallCheck(this, Enumerator_FromFunctions$1);\n    this.current = current;\n    this.next = next;\n    this.dispose = dispose;\n  }\n  Seq_createClass(Enumerator_FromFunctions$1, [{\n    key: "System.Collections.Generic.IEnumerator`1.get_Current",\n    value: function SystemCollectionsGenericIEnumerator1Get_Current() {\n      var __ = this;\n      return __.current();\n    }\n  }, {\n    key: "System.Collections.IEnumerator.get_Current",\n    value: function SystemCollectionsIEnumeratorGet_Current() {\n      var __ = this;\n      return __.current();\n    }\n  }, {\n    key: "System.Collections.IEnumerator.MoveNext",\n    value: function SystemCollectionsIEnumeratorMoveNext() {\n      var __ = this;\n      return __.next();\n    }\n  }, {\n    key: "System.Collections.IEnumerator.Reset",\n    value: function SystemCollectionsIEnumeratorReset() {\n      Enumerator_noReset();\n    }\n  }, {\n    key: "Dispose",\n    value: function Dispose() {\n      var __ = this;\n      __.dispose();\n    }\n  }]);\n  return Enumerator_FromFunctions$1;\n}();\nfunction Enumerator_FromFunctions$1$reflection(gen0) {\n  return Object(Reflection["b" /* class_type */])("SeqModule.Enumerator.FromFunctions`1", [gen0], Enumerator_FromFunctions$1);\n}\nfunction Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\n  return new Enumerator_FromFunctions$1(current, next, dispose);\n}\nfunction Enumerator_cast(e) {\n  return Enumerator_FromFunctions$1_$ctor_58C54629(function () {\n    return e["System.Collections.IEnumerator.get_Current"]();\n  }, function () {\n    return e["System.Collections.IEnumerator.MoveNext"]();\n  }, function () {\n    if (Object(Util["q" /* isDisposable */])(e)) {\n      Object(Util["j" /* disposeSafe */])(e);\n    }\n  });\n}\nfunction Enumerator_concat(sources) {\n  var outerOpt = void 0;\n  var innerOpt = void 0;\n  var started = false;\n  var finished = false;\n  var curr = void 0;\n  var finish = function finish() {\n    finished = true;\n    if (innerOpt != null) {\n      var inner = innerOpt;\n      try {\n        Object(Util["j" /* disposeSafe */])(inner);\n      } finally {\n        innerOpt = void 0;\n      }\n    }\n    if (outerOpt != null) {\n      var outer = outerOpt;\n      try {\n        Object(Util["j" /* disposeSafe */])(outer);\n      } finally {\n        outerOpt = void 0;\n      }\n    }\n  };\n  return Enumerator_FromFunctions$1_$ctor_58C54629(function () {\n    if (!started) {\n      Enumerator_notStarted();\n    } else if (finished) {\n      Enumerator_alreadyFinished();\n    }\n    if (curr != null) {\n      return Object(Option["d" /* value */])(curr);\n    } else {\n      return Enumerator_alreadyFinished();\n    }\n  }, function () {\n    var copyOfStruct;\n    if (!started) {\n      started = true;\n    }\n    if (finished) {\n      return false;\n    } else {\n      var res = void 0;\n      while (res == null) {\n        var matchValue = [outerOpt, innerOpt];\n        if (matchValue[0] != null) {\n          if (matchValue[1] != null) {\n            var inner_1 = matchValue[1];\n            if (inner_1["System.Collections.IEnumerator.MoveNext"]()) {\n              curr = Object(Option["c" /* some */])(inner_1["System.Collections.Generic.IEnumerator`1.get_Current"]());\n              res = true;\n            } else {\n              try {\n                Object(Util["j" /* disposeSafe */])(inner_1);\n              } finally {\n                innerOpt = void 0;\n              }\n            }\n          } else {\n            var outer_1 = matchValue[0];\n            if (outer_1["System.Collections.IEnumerator.MoveNext"]()) {\n              var ie = outer_1["System.Collections.Generic.IEnumerator`1.get_Current"]();\n              innerOpt = (copyOfStruct = ie, Object(Util["n" /* getEnumerator */])(copyOfStruct));\n            } else {\n              finish();\n              res = false;\n            }\n          }\n        } else {\n          outerOpt = Object(Util["n" /* getEnumerator */])(sources);\n        }\n      }\n      return Object(Option["d" /* value */])(res);\n    }\n  }, function () {\n    if (!finished) {\n      finish();\n    }\n  });\n}\nfunction Enumerator_enumerateThenFinally(f, e) {\n  return Enumerator_FromFunctions$1_$ctor_58C54629(function () {\n    return e["System.Collections.Generic.IEnumerator`1.get_Current"]();\n  }, function () {\n    return e["System.Collections.IEnumerator.MoveNext"]();\n  }, function () {\n    try {\n      Object(Util["j" /* disposeSafe */])(e);\n    } finally {\n      f();\n    }\n  });\n}\nfunction Enumerator_generateWhileSome(openf, compute, closef) {\n  var started = false;\n  var curr = void 0;\n  var state = Object(Option["c" /* some */])(openf());\n  var dispose = function dispose() {\n    if (state != null) {\n      var x_1 = Object(Option["d" /* value */])(state);\n      try {\n        closef(x_1);\n      } finally {\n        state = void 0;\n      }\n    }\n  };\n  var finish = function finish() {\n    try {\n      dispose();\n    } finally {\n      curr = void 0;\n    }\n  };\n  return Enumerator_FromFunctions$1_$ctor_58C54629(function () {\n    if (!started) {\n      Enumerator_notStarted();\n    }\n    if (curr != null) {\n      return Object(Option["d" /* value */])(curr);\n    } else {\n      return Enumerator_alreadyFinished();\n    }\n  }, function () {\n    if (!started) {\n      started = true;\n    }\n    if (state != null) {\n      var s = Object(Option["d" /* value */])(state);\n      var matchValue_1;\n      try {\n        matchValue_1 = compute(s);\n      } catch (matchValue) {\n        finish();\n        throw matchValue;\n      }\n      if (matchValue_1 != null) {\n        curr = matchValue_1;\n        return true;\n      } else {\n        finish();\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }, dispose);\n}\nfunction Enumerator_unfold(f, state) {\n  var curr = void 0;\n  var acc = state;\n  return Enumerator_FromFunctions$1_$ctor_58C54629(function () {\n    if (curr != null) {\n      var x = curr[0];\n      var st = curr[1];\n      return x;\n    } else {\n      return Enumerator_notStarted();\n    }\n  }, function () {\n    curr = f(acc);\n    if (curr != null) {\n      var x_1 = curr[0];\n      var st_1 = curr[1];\n      acc = st_1;\n      return true;\n    } else {\n      return false;\n    }\n  }, function () {});\n}\nfunction indexNotFound() {\n  throw new Error(SR_keyNotFoundAlt);\n}\nfunction checkNonNull(argName, arg) {\n  if (arg == null) {\n    Operators_NullArg(argName);\n  }\n}\nfunction mkSeq(f) {\n  return Enumerator_Seq_$ctor_673A07F2(f);\n}\nfunction ofSeq(xs) {\n  checkNonNull("source", xs);\n  return Object(Util["n" /* getEnumerator */])(xs);\n}\nfunction delay(generator) {\n  return mkSeq(function () {\n    return Object(Util["n" /* getEnumerator */])(generator());\n  });\n}\nfunction concat(sources) {\n  return mkSeq(function () {\n    return Enumerator_concat(sources);\n  });\n}\nfunction unfold(generator, state) {\n  return mkSeq(function () {\n    return Enumerator_unfold(generator, state);\n  });\n}\nfunction empty() {\n  return delay(function () {\n    return new Array(0);\n  });\n}\nfunction singleton(x) {\n  return delay(function () {\n    return Object(fable_library_3_7_17_Array["l" /* singleton */])(x);\n  });\n}\nfunction ofArray(arr) {\n  return arr;\n}\nfunction toArray(xs) {\n  if (xs instanceof List["a" /* FSharpList */]) {\n    return Object(List["m" /* toArray */])(xs);\n  } else {\n    return Array.from(xs);\n  }\n}\nfunction ofList(xs) {\n  return xs;\n}\nfunction toList(xs) {\n  if (Object(Util["p" /* isArrayLike */])(xs)) {\n    return Object(List["j" /* ofArray */])(xs);\n  } else if (xs instanceof List["a" /* FSharpList */]) {\n    return xs;\n  } else {\n    return Object(List["k" /* ofSeq */])(xs);\n  }\n}\nfunction generate(create, compute, dispose) {\n  return mkSeq(function () {\n    return Enumerator_generateWhileSome(create, compute, dispose);\n  });\n}\nfunction generateIndexed(create, compute, dispose) {\n  return mkSeq(function () {\n    var i = -1;\n    return Enumerator_generateWhileSome(create, function (x) {\n      i = i + 1 | 0;\n      return compute(i, x);\n    }, dispose);\n  });\n}\nfunction append(xs, ys) {\n  return concat([xs, ys]);\n}\nfunction cast(xs) {\n  return mkSeq(function () {\n    checkNonNull("source", xs);\n    return Enumerator_cast(Object(Util["n" /* getEnumerator */])(xs));\n  });\n}\nfunction choose(chooser, xs) {\n  return generate(function () {\n    return ofSeq(xs);\n  }, function (e) {\n    var curr = void 0;\n    while (curr == null && e["System.Collections.IEnumerator.MoveNext"]()) {\n      curr = chooser(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n    }\n    return curr;\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\nfunction compareWith(comparer, xs, ys) {\n  var e1 = ofSeq(xs);\n  try {\n    var e2 = ofSeq(ys);\n    try {\n      var c = 0;\n      var b1 = e1["System.Collections.IEnumerator.MoveNext"]();\n      var b2 = e2["System.Collections.IEnumerator.MoveNext"]();\n      while (c === 0 && b1 && b2) {\n        c = comparer(e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]()) | 0;\n        if (c === 0) {\n          b1 = e1["System.Collections.IEnumerator.MoveNext"]();\n          b2 = e2["System.Collections.IEnumerator.MoveNext"]();\n        }\n      }\n      return (c !== 0 ? c : b1 ? 1 : b2 ? -1 : 0) | 0;\n    } finally {\n      Object(Util["j" /* disposeSafe */])(e2);\n    }\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e1);\n  }\n}\nfunction contains(value, xs, comparer) {\n  var e = ofSeq(xs);\n  try {\n    var found = false;\n    while (!found && e["System.Collections.IEnumerator.MoveNext"]()) {\n      found = comparer.Equals(value, e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n    }\n    return found;\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction enumerateFromFunctions(create, moveNext, current) {\n  return generate(create, function (x) {\n    return moveNext(x) ? Object(Option["c" /* some */])(current(x)) : void 0;\n  }, function (x_1) {\n    var matchValue = x_1;\n    if (Object(Util["q" /* isDisposable */])(matchValue)) {\n      Object(Util["j" /* disposeSafe */])(matchValue);\n    }\n  });\n}\nfunction enumerateThenFinally(source, compensation) {\n  var compensation_1 = compensation;\n  return mkSeq(function () {\n    try {\n      return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\n    } catch (matchValue) {\n      compensation_1();\n      throw matchValue;\n    }\n  });\n}\nfunction enumerateUsing(resource, source) {\n  var compensation = function compensation() {\n    if (Object(Util["m" /* equals */])(resource, null)) {} else {\n      var copyOfStruct = resource;\n      Object(Util["j" /* disposeSafe */])(copyOfStruct);\n    }\n  };\n  return mkSeq(function () {\n    try {\n      return Enumerator_enumerateThenFinally(compensation, ofSeq(source(resource)));\n    } catch (matchValue_1) {\n      compensation();\n      throw matchValue_1;\n    }\n  });\n}\nfunction enumerateWhile(guard, xs) {\n  return concat(unfold(function (i) {\n    return guard() ? [xs, i + 1] : void 0;\n  }, 0));\n}\nfunction filter(f, xs) {\n  return choose(function (x) {\n    if (f(x)) {\n      return Object(Option["c" /* some */])(x);\n    } else {\n      return void 0;\n    }\n  }, xs);\n}\nfunction exists(predicate, xs) {\n  var e = ofSeq(xs);\n  try {\n    var found = false;\n    while (!found && e["System.Collections.IEnumerator.MoveNext"]()) {\n      found = predicate(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n    }\n    return found;\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction exists2(predicate, xs, ys) {\n  var e1 = ofSeq(xs);\n  try {\n    var e2 = ofSeq(ys);\n    try {\n      var found = false;\n      while (!found && e1["System.Collections.IEnumerator.MoveNext"]() && e2["System.Collections.IEnumerator.MoveNext"]()) {\n        found = predicate(e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]());\n      }\n      return found;\n    } finally {\n      Object(Util["j" /* disposeSafe */])(e2);\n    }\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e1);\n  }\n}\nfunction exactlyOne(xs) {\n  var e = ofSeq(xs);\n  try {\n    if (e["System.Collections.IEnumerator.MoveNext"]()) {\n      var v = e["System.Collections.Generic.IEnumerator`1.get_Current"]();\n      if (e["System.Collections.IEnumerator.MoveNext"]()) {\n        throw new Error(SR_inputSequenceTooLong + "\\\\nParameter name: " + "source");\n      } else {\n        return v;\n      }\n    } else {\n      throw new Error(SR_inputSequenceEmpty + "\\\\nParameter name: " + "source");\n    }\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction tryExactlyOne(xs) {\n  var e = ofSeq(xs);\n  try {\n    if (e["System.Collections.IEnumerator.MoveNext"]()) {\n      var v = e["System.Collections.Generic.IEnumerator`1.get_Current"]();\n      return e["System.Collections.IEnumerator.MoveNext"]() ? void 0 : Object(Option["c" /* some */])(v);\n    } else {\n      return void 0;\n    }\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction tryFind(predicate, xs) {\n  var e = ofSeq(xs);\n  try {\n    var res = void 0;\n    while (res == null && e["System.Collections.IEnumerator.MoveNext"]()) {\n      var c = e["System.Collections.Generic.IEnumerator`1.get_Current"]();\n      if (predicate(c)) {\n        res = Object(Option["c" /* some */])(c);\n      }\n    }\n    return res;\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction find(predicate, xs) {\n  var matchValue = tryFind(predicate, xs);\n  if (matchValue == null) {\n    return indexNotFound();\n  } else {\n    return Object(Option["d" /* value */])(matchValue);\n  }\n}\nfunction tryFindBack(predicate, xs) {\n  return Object(fable_library_3_7_17_Array["o" /* tryFindBack */])(predicate, toArray(xs));\n}\nfunction findBack(predicate, xs) {\n  var matchValue = tryFindBack(predicate, xs);\n  if (matchValue == null) {\n    return indexNotFound();\n  } else {\n    return Object(Option["d" /* value */])(matchValue);\n  }\n}\nfunction tryFindIndex(predicate, xs) {\n  var e = ofSeq(xs);\n  try {\n    var loop = function loop(i_mut) {\n      loop: while (true) {\n        var i = i_mut;\n        if (e["System.Collections.IEnumerator.MoveNext"]()) {\n          if (predicate(e["System.Collections.Generic.IEnumerator`1.get_Current"]())) {\n            return i;\n          } else {\n            i_mut = i + 1;\n            continue loop;\n          }\n        } else {\n          return void 0;\n        }\n        break;\n      }\n    };\n    return loop(0);\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction findIndex(predicate, xs) {\n  var matchValue = tryFindIndex(predicate, xs);\n  if (matchValue == null) {\n    return indexNotFound() | 0;\n  } else {\n    return matchValue | 0;\n  }\n}\nfunction tryFindIndexBack(predicate, xs) {\n  return Object(fable_library_3_7_17_Array["p" /* tryFindIndexBack */])(predicate, toArray(xs));\n}\nfunction findIndexBack(predicate, xs) {\n  var matchValue = tryFindIndexBack(predicate, xs);\n  if (matchValue == null) {\n    return indexNotFound() | 0;\n  } else {\n    return matchValue | 0;\n  }\n}\nfunction fold(folder, state, xs) {\n  var e = ofSeq(xs);\n  try {\n    var acc = state;\n    while (e["System.Collections.IEnumerator.MoveNext"]()) {\n      acc = folder(acc, e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n    }\n    return acc;\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction foldBack(folder, xs, state) {\n  return Object(fable_library_3_7_17_Array["c" /* foldBack */])(folder, toArray(xs), state);\n}\nfunction fold2(folder, state, xs, ys) {\n  var e1 = ofSeq(xs);\n  try {\n    var e2 = ofSeq(ys);\n    try {\n      var acc = state;\n      while (e1["System.Collections.IEnumerator.MoveNext"]() && e2["System.Collections.IEnumerator.MoveNext"]()) {\n        acc = folder(acc, e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]());\n      }\n      return acc;\n    } finally {\n      Object(Util["j" /* disposeSafe */])(e2);\n    }\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e1);\n  }\n}\nfunction foldBack2(folder, xs, ys, state) {\n  return Object(fable_library_3_7_17_Array["d" /* foldBack2 */])(folder, toArray(xs), toArray(ys), state);\n}\nfunction forAll(predicate, xs) {\n  return !exists(function (x) {\n    return !predicate(x);\n  }, xs);\n}\nfunction forAll2(predicate, xs, ys) {\n  return !exists2(function (x, y) {\n    return !predicate(x, y);\n  }, xs, ys);\n}\nfunction tryHead(xs) {\n  if (Object(Util["p" /* isArrayLike */])(xs)) {\n    return Object(fable_library_3_7_17_Array["q" /* tryHead */])(xs);\n  } else if (xs instanceof List["a" /* FSharpList */]) {\n    return Object(List["n" /* tryHead */])(xs);\n  } else {\n    var e = ofSeq(xs);\n    try {\n      return e["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) : void 0;\n    } finally {\n      Object(Util["j" /* disposeSafe */])(e);\n    }\n  }\n}\nfunction head(xs) {\n  var matchValue = tryHead(xs);\n  if (matchValue == null) {\n    throw new Error(SR_inputSequenceEmpty + "\\\\nParameter name: " + "source");\n  } else {\n    return Object(Option["d" /* value */])(matchValue);\n  }\n}\nfunction initialize(count, f) {\n  return unfold(function (i) {\n    return i < count ? [f(i), i + 1] : void 0;\n  }, 0);\n}\nfunction initializeInfinite(f) {\n  return initialize(2147483647, f);\n}\nfunction isEmpty(xs) {\n  if (Object(Util["p" /* isArrayLike */])(xs)) {\n    return xs.length === 0;\n  } else if (xs instanceof List["a" /* FSharpList */]) {\n    return Object(List["f" /* isEmpty */])(xs);\n  } else {\n    var e = ofSeq(xs);\n    try {\n      return !e["System.Collections.IEnumerator.MoveNext"]();\n    } finally {\n      Object(Util["j" /* disposeSafe */])(e);\n    }\n  }\n}\nfunction tryItem(index, xs) {\n  if (Object(Util["p" /* isArrayLike */])(xs)) {\n    return Object(fable_library_3_7_17_Array["r" /* tryItem */])(index, xs);\n  } else if (xs instanceof List["a" /* FSharpList */]) {\n    return Object(List["o" /* tryItem */])(index, xs);\n  } else {\n    var e = ofSeq(xs);\n    try {\n      var loop = function loop(index_1_mut) {\n        loop: while (true) {\n          var index_1 = index_1_mut;\n          if (!e["System.Collections.IEnumerator.MoveNext"]()) {\n            return void 0;\n          } else if (index_1 === 0) {\n            return Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n          } else {\n            index_1_mut = index_1 - 1;\n            continue loop;\n          }\n          break;\n        }\n      };\n      return loop(index);\n    } finally {\n      Object(Util["j" /* disposeSafe */])(e);\n    }\n  }\n}\nfunction item(index, xs) {\n  var matchValue = tryItem(index, xs);\n  if (matchValue == null) {\n    throw new Error(SR_notEnoughElements + "\\\\nParameter name: " + "index");\n  } else {\n    return Object(Option["d" /* value */])(matchValue);\n  }\n}\nfunction iterate(action, xs) {\n  fold(function (unitVar, x) {\n    action(x);\n  }, void 0, xs);\n}\nfunction iterate2(action, xs, ys) {\n  fold2(function (unitVar, x, y) {\n    action(x, y);\n  }, void 0, xs, ys);\n}\nfunction iterateIndexed(action, xs) {\n  fold(function (i, x) {\n    action(i, x);\n    return i + 1 | 0;\n  }, 0, xs);\n}\nfunction iterateIndexed2(action, xs, ys) {\n  fold2(function (i, x, y) {\n    action(i, x, y);\n    return i + 1 | 0;\n  }, 0, xs, ys);\n}\nfunction tryLast(xs) {\n  var e = ofSeq(xs);\n  try {\n    var loop = function loop(acc_mut) {\n      loop: while (true) {\n        var acc = acc_mut;\n        if (!e["System.Collections.IEnumerator.MoveNext"]()) {\n          return acc;\n        } else {\n          acc_mut = e["System.Collections.Generic.IEnumerator`1.get_Current"]();\n          continue loop;\n        }\n        break;\n      }\n    };\n    return e["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(loop(e["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction last(xs) {\n  var matchValue = tryLast(xs);\n  if (matchValue == null) {\n    throw new Error(SR_notEnoughElements + "\\\\nParameter name: " + "source");\n  } else {\n    return Object(Option["d" /* value */])(matchValue);\n  }\n}\nfunction Seq_length(xs) {\n  if (Object(Util["p" /* isArrayLike */])(xs)) {\n    return xs.length | 0;\n  } else if (xs instanceof List["a" /* FSharpList */]) {\n    return Object(List["h" /* length */])(xs) | 0;\n  } else {\n    var e = ofSeq(xs);\n    try {\n      var count = 0;\n      while (e["System.Collections.IEnumerator.MoveNext"]()) {\n        count = count + 1 | 0;\n      }\n      return count | 0;\n    } finally {\n      Object(Util["j" /* disposeSafe */])(e);\n    }\n  }\n}\nfunction map(mapping, xs) {\n  return generate(function () {\n    return ofSeq(xs);\n  }, function (e) {\n    return e["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(mapping(e["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\nfunction mapIndexed(mapping, xs) {\n  return generateIndexed(function () {\n    return ofSeq(xs);\n  }, function (i, e) {\n    return e["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(mapping(i, e["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\nfunction indexed(xs) {\n  return mapIndexed(function (i, x) {\n    return [i, x];\n  }, xs);\n}\nfunction map2(mapping, xs, ys) {\n  return generate(function () {\n    return [ofSeq(xs), ofSeq(ys)];\n  }, function (tupledArg) {\n    var e1 = tupledArg[0];\n    var e2 = tupledArg[1];\n    return e1["System.Collections.IEnumerator.MoveNext"]() && e2["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(mapping(e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;\n  }, function (tupledArg_1) {\n    try {\n      Object(Util["j" /* disposeSafe */])(tupledArg_1[0]);\n    } finally {\n      Object(Util["j" /* disposeSafe */])(tupledArg_1[1]);\n    }\n  });\n}\nfunction mapIndexed2(mapping, xs, ys) {\n  return generateIndexed(function () {\n    return [ofSeq(xs), ofSeq(ys)];\n  }, function (i, tupledArg) {\n    var e1 = tupledArg[0];\n    var e2 = tupledArg[1];\n    return e1["System.Collections.IEnumerator.MoveNext"]() && e2["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(mapping(i, e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;\n  }, function (tupledArg_1) {\n    try {\n      Object(Util["j" /* disposeSafe */])(tupledArg_1[0]);\n    } finally {\n      Object(Util["j" /* disposeSafe */])(tupledArg_1[1]);\n    }\n  });\n}\nfunction map3(mapping, xs, ys, zs) {\n  return generate(function () {\n    return [ofSeq(xs), ofSeq(ys), ofSeq(zs)];\n  }, function (tupledArg) {\n    var e1 = tupledArg[0];\n    var e2 = tupledArg[1];\n    var e3 = tupledArg[2];\n    return e1["System.Collections.IEnumerator.MoveNext"]() && e2["System.Collections.IEnumerator.MoveNext"]() && e3["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(mapping(e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"](), e3["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;\n  }, function (tupledArg_1) {\n    try {\n      Object(Util["j" /* disposeSafe */])(tupledArg_1[0]);\n    } finally {\n      try {\n        Object(Util["j" /* disposeSafe */])(tupledArg_1[1]);\n      } finally {\n        Object(Util["j" /* disposeSafe */])(tupledArg_1[2]);\n      }\n    }\n  });\n}\nfunction readOnly(xs) {\n  checkNonNull("source", xs);\n  return map(function (x) {\n    return x;\n  }, xs);\n}\nvar Seq_CachedSeq$1 = /*#__PURE__*/function (_Symbol$iterator2) {\n  function CachedSeq$1(cleanup, res) {\n    Seq_classCallCheck(this, CachedSeq$1);\n    this.cleanup = cleanup;\n    this.res = res;\n  }\n  Seq_createClass(CachedSeq$1, [{\n    key: "Dispose",\n    value: function Dispose() {\n      var _ = this;\n      _.cleanup();\n    }\n  }, {\n    key: "GetEnumerator",\n    value: function GetEnumerator() {\n      var _ = this;\n      return Object(Util["n" /* getEnumerator */])(_.res);\n    }\n  }, {\n    key: _Symbol$iterator2,\n    value: function value() {\n      return Object(Util["z" /* toIterator */])(this.GetEnumerator());\n    }\n  }, {\n    key: "System.Collections.IEnumerable.GetEnumerator",\n    value: function SystemCollectionsIEnumerableGetEnumerator() {\n      var _ = this;\n      return Object(Util["n" /* getEnumerator */])(_.res);\n    }\n  }]);\n  return CachedSeq$1;\n}(Symbol.iterator);\nfunction CachedSeq$1$reflection(gen0) {\n  return Object(Reflection["b" /* class_type */])("SeqModule.CachedSeq`1", [gen0], Seq_CachedSeq$1);\n}\nfunction CachedSeq$1_$ctor_Z7A8347D4(cleanup, res) {\n  return new Seq_CachedSeq$1(cleanup, res);\n}\nfunction CachedSeq$1__Clear(_) {\n  _.cleanup();\n}\nfunction cache(source) {\n  checkNonNull("source", source);\n  var prefix = [];\n  var enumeratorR = void 0;\n  return CachedSeq$1_$ctor_Z7A8347D4(function () {\n    Operators_Lock(prefix, function () {\n      Object(Util["c" /* clear */])(prefix);\n      var pattern_matching_result, e;\n      if (enumeratorR != null) {\n        if (Object(Option["d" /* value */])(enumeratorR) != null) {\n          pattern_matching_result = 0;\n          e = Object(Option["d" /* value */])(enumeratorR);\n        } else {\n          pattern_matching_result = 1;\n        }\n      } else {\n        pattern_matching_result = 1;\n      }\n      switch (pattern_matching_result) {\n        case 0:\n          {\n            Object(Util["j" /* disposeSafe */])(e);\n            break;\n          }\n      }\n      enumeratorR = void 0;\n    });\n  }, unfold(function (i_1) {\n    return Operators_Lock(prefix, function () {\n      if (i_1 < prefix.length) {\n        return [prefix[i_1], i_1 + 1];\n      } else {\n        if (i_1 >= prefix.length) {\n          var optEnumerator_2;\n          if (enumeratorR != null) {\n            optEnumerator_2 = Object(Option["d" /* value */])(enumeratorR);\n          } else {\n            var optEnumerator = Object(Util["n" /* getEnumerator */])(source);\n            enumeratorR = Object(Option["c" /* some */])(optEnumerator);\n            optEnumerator_2 = optEnumerator;\n          }\n          if (optEnumerator_2 == null) {} else {\n            var enumerator = optEnumerator_2;\n            if (enumerator["System.Collections.IEnumerator.MoveNext"]()) {\n              void prefix.push(enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]());\n            } else {\n              Object(Util["j" /* disposeSafe */])(enumerator);\n              enumeratorR = Object(Option["c" /* some */])(void 0);\n            }\n          }\n        }\n        return i_1 < prefix.length ? [prefix[i_1], i_1 + 1] : void 0;\n      }\n    });\n  }, 0));\n}\nfunction allPairs(xs, ys) {\n  var ysCache = cache(ys);\n  return delay(function () {\n    return concat(map(function (x) {\n      return map(function (y) {\n        return [x, y];\n      }, ysCache);\n    }, xs));\n  });\n}\nfunction mapFold(mapping, state, xs) {\n  var patternInput = Object(fable_library_3_7_17_Array["f" /* mapFold */])(mapping, state, toArray(xs));\n  return [readOnly(patternInput[0]), patternInput[1]];\n}\nfunction mapFoldBack(mapping, xs, state) {\n  var patternInput = Object(fable_library_3_7_17_Array["g" /* mapFoldBack */])(mapping, toArray(xs), state);\n  return [readOnly(patternInput[0]), patternInput[1]];\n}\nfunction tryPick(chooser, xs) {\n  var e = ofSeq(xs);\n  try {\n    var res = void 0;\n    while (res == null && e["System.Collections.IEnumerator.MoveNext"]()) {\n      res = chooser(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n    }\n    return res;\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction pick(chooser, xs) {\n  var matchValue = tryPick(chooser, xs);\n  if (matchValue == null) {\n    return indexNotFound();\n  } else {\n    return Object(Option["d" /* value */])(matchValue);\n  }\n}\nfunction reduce(folder, xs) {\n  var e = ofSeq(xs);\n  try {\n    var loop = function loop(acc_mut) {\n      loop: while (true) {\n        var acc = acc_mut;\n        if (e["System.Collections.IEnumerator.MoveNext"]()) {\n          acc_mut = folder(acc, e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n          continue loop;\n        } else {\n          return acc;\n        }\n        break;\n      }\n    };\n    if (e["System.Collections.IEnumerator.MoveNext"]()) {\n      return loop(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n    } else {\n      throw new Error(SR_inputSequenceEmpty);\n    }\n  } finally {\n    Object(Util["j" /* disposeSafe */])(e);\n  }\n}\nfunction reduceBack(folder, xs) {\n  var arr = toArray(xs);\n  if (arr.length > 0) {\n    return arr.reduceRight(folder);\n  } else {\n    throw new Error(SR_inputSequenceEmpty);\n  }\n}\nfunction replicate(n, x) {\n  return initialize(n, function (_arg) {\n    return x;\n  });\n}\nfunction reverse(xs) {\n  return delay(function () {\n    return ofArray(Object(fable_library_3_7_17_Array["j" /* reverse */])(toArray(xs)));\n  });\n}\nfunction scan(folder, state, xs) {\n  return delay(function () {\n    var acc = state;\n    return concat([singleton(state), map(function (x) {\n      acc = folder(acc, x);\n      return acc;\n    }, xs)]);\n  });\n}\nfunction scanBack(folder, xs, state) {\n  return delay(function () {\n    return ofArray(Object(fable_library_3_7_17_Array["k" /* scanBack */])(folder, toArray(xs), state));\n  });\n}\nfunction skip(count, source) {\n  return mkSeq(function () {\n    var e = ofSeq(source);\n    try {\n      for (var _ = 1; _ <= count; _++) {\n        if (!e["System.Collections.IEnumerator.MoveNext"]()) {\n          throw new Error(SR_notEnoughElements + "\\\\nParameter name: " + "source");\n        }\n      }\n      return Enumerator_enumerateThenFinally(function () {}, e);\n    } catch (matchValue) {\n      Object(Util["j" /* disposeSafe */])(e);\n      throw matchValue;\n    }\n  });\n}\nfunction skipWhile(predicate, xs) {\n  return delay(function () {\n    var skipped = true;\n    return filter(function (x) {\n      if (skipped) {\n        skipped = predicate(x);\n      }\n      return !skipped;\n    }, xs);\n  });\n}\nfunction tail(xs) {\n  return skip(1, xs);\n}\nfunction take(count, xs) {\n  return generateIndexed(function () {\n    return ofSeq(xs);\n  }, function (i, e) {\n    if (i < count) {\n      if (e["System.Collections.IEnumerator.MoveNext"]()) {\n        return Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n      } else {\n        throw new Error(SR_notEnoughElements + "\\\\nParameter name: " + "source");\n      }\n    } else {\n      return void 0;\n    }\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\nfunction takeWhile(predicate, xs) {\n  return generate(function () {\n    return ofSeq(xs);\n  }, function (e) {\n    return e["System.Collections.IEnumerator.MoveNext"]() && predicate(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) ? Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) : void 0;\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\nfunction truncate(count, xs) {\n  return generateIndexed(function () {\n    return ofSeq(xs);\n  }, function (i, e) {\n    return i < count && e["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) : void 0;\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\nfunction zip(xs, ys) {\n  return map2(function (x, y) {\n    return [x, y];\n  }, xs, ys);\n}\nfunction zip3(xs, ys, zs) {\n  return map3(function (x, y, z) {\n    return [x, y, z];\n  }, xs, ys, zs);\n}\nfunction collect(mapping, xs) {\n  return delay(function () {\n    return concat(map(mapping, xs));\n  });\n}\nfunction where(predicate, xs) {\n  return filter(predicate, xs);\n}\nfunction pairwise(xs) {\n  return delay(function () {\n    return ofArray(Object(fable_library_3_7_17_Array["h" /* pairwise */])(toArray(xs)));\n  });\n}\nfunction splitInto(chunks, xs) {\n  return delay(function () {\n    return ofArray(Object(fable_library_3_7_17_Array["e" /* map */])(ofArray, Object(fable_library_3_7_17_Array["m" /* splitInto */])(chunks, toArray(xs))));\n  });\n}\nfunction windowed(windowSize, xs) {\n  return delay(function () {\n    return ofArray(Object(fable_library_3_7_17_Array["e" /* map */])(ofArray, Object(fable_library_3_7_17_Array["s" /* windowed */])(windowSize, toArray(xs))));\n  });\n}\nfunction transpose(xss) {\n  return delay(function () {\n    return ofArray(Object(fable_library_3_7_17_Array["e" /* map */])(ofArray, Object(fable_library_3_7_17_Array["n" /* transpose */])(Object(fable_library_3_7_17_Array["e" /* map */])(toArray, toArray(xss)))));\n  });\n}\nfunction sortWith(comparer, xs) {\n  return delay(function () {\n    var arr = toArray(xs);\n    arr.sort(comparer);\n    return ofArray(arr);\n  });\n}\nfunction sort(xs, comparer) {\n  return sortWith(function (x, y) {\n    return comparer.Compare(x, y);\n  }, xs);\n}\nfunction sortBy(projection, xs, comparer) {\n  return sortWith(function (x, y) {\n    return comparer.Compare(projection(x), projection(y));\n  }, xs);\n}\nfunction sortDescending(xs, comparer) {\n  return sortWith(function (x, y) {\n    return comparer.Compare(x, y) * -1;\n  }, xs);\n}\nfunction sortByDescending(projection, xs, comparer) {\n  return sortWith(function (x, y) {\n    return comparer.Compare(projection(x), projection(y)) * -1;\n  }, xs);\n}\nfunction sum(xs, adder) {\n  return fold(function (acc, x) {\n    return adder.Add(acc, x);\n  }, adder.GetZero(), xs);\n}\nfunction sumBy(f, xs, adder) {\n  return fold(function (acc, x) {\n    return adder.Add(acc, f(x));\n  }, adder.GetZero(), xs);\n}\nfunction maxBy(projection, xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(projection(y), projection(x)) > 0 ? y : x;\n  }, xs);\n}\nfunction max(xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(y, x) > 0 ? y : x;\n  }, xs);\n}\nfunction minBy(projection, xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(projection(y), projection(x)) > 0 ? x : y;\n  }, xs);\n}\nfunction min(xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(y, x) > 0 ? x : y;\n  }, xs);\n}\nfunction average(xs, averager) {\n  var count = 0;\n  var total = fold(function (acc, x) {\n    count = count + 1 | 0;\n    return averager.Add(acc, x);\n  }, averager.GetZero(), xs);\n  if (count === 0) {\n    throw new Error(SR_inputSequenceEmpty + "\\\\nParameter name: " + "source");\n  } else {\n    return averager.DivideByInt(total, count);\n  }\n}\nfunction averageBy(f, xs, averager) {\n  var count = 0;\n  var total = fold(function (acc, x) {\n    count = count + 1 | 0;\n    return averager.Add(acc, f(x));\n  }, averager.GetZero(), xs);\n  if (count === 0) {\n    throw new Error(SR_inputSequenceEmpty + "\\\\nParameter name: " + "source");\n  } else {\n    return averager.DivideByInt(total, count);\n  }\n}\nfunction permute(f, xs) {\n  return delay(function () {\n    return ofArray(Object(fable_library_3_7_17_Array["i" /* permute */])(f, toArray(xs)));\n  });\n}\nfunction chunkBySize(chunkSize, xs) {\n  return delay(function () {\n    return ofArray(Object(fable_library_3_7_17_Array["e" /* map */])(ofArray, Object(fable_library_3_7_17_Array["a" /* chunkBySize */])(chunkSize, toArray(xs))));\n  });\n}\nfunction insertAt(index, y, xs) {\n  var isDone = false;\n  if (index < 0) {\n    throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n  }\n  return generateIndexed(function () {\n    return ofSeq(xs);\n  }, function (i, e) {\n    if ((isDone ? true : i < index) && e["System.Collections.IEnumerator.MoveNext"]()) {\n      return Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n    } else if (i === index) {\n      isDone = true;\n      return Object(Option["c" /* some */])(y);\n    } else {\n      if (!isDone) {\n        throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n      }\n      return void 0;\n    }\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\nfunction insertManyAt(index, ys, xs) {\n  var status = -1;\n  if (index < 0) {\n    throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n  }\n  return generateIndexed(function () {\n    return [ofSeq(xs), ofSeq(ys)];\n  }, function (i, tupledArg) {\n    var e1 = tupledArg[0];\n    var e2 = tupledArg[1];\n    if (i === index) {\n      status = 0;\n    }\n    var inserted;\n    if (status === 0) {\n      if (e2["System.Collections.IEnumerator.MoveNext"]()) {\n        inserted = Object(Option["c" /* some */])(e2["System.Collections.Generic.IEnumerator`1.get_Current"]());\n      } else {\n        status = 1;\n        inserted = void 0;\n      }\n    } else {\n      inserted = void 0;\n    }\n    if (inserted == null) {\n      if (e1["System.Collections.IEnumerator.MoveNext"]()) {\n        return Object(Option["c" /* some */])(e1["System.Collections.Generic.IEnumerator`1.get_Current"]());\n      } else {\n        if (status < 1) {\n          throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n        }\n        return void 0;\n      }\n    } else {\n      return Object(Option["c" /* some */])(Object(Option["d" /* value */])(inserted));\n    }\n  }, function (tupledArg_1) {\n    Object(Util["j" /* disposeSafe */])(tupledArg_1[0]);\n    Object(Util["j" /* disposeSafe */])(tupledArg_1[1]);\n  });\n}\nfunction removeAt(index, xs) {\n  var isDone = false;\n  if (index < 0) {\n    throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n  }\n  return generateIndexed(function () {\n    return ofSeq(xs);\n  }, function (i, e) {\n    if ((isDone ? true : i < index) && e["System.Collections.IEnumerator.MoveNext"]()) {\n      return Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n    } else if (i === index && e["System.Collections.IEnumerator.MoveNext"]()) {\n      isDone = true;\n      return e["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) : void 0;\n    } else {\n      if (!isDone) {\n        throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n      }\n      return void 0;\n    }\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\nfunction removeManyAt(index, count, xs) {\n  if (index < 0) {\n    throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n  }\n  return generateIndexed(function () {\n    return ofSeq(xs);\n  }, function (i, e) {\n    if (i < index) {\n      if (e["System.Collections.IEnumerator.MoveNext"]()) {\n        return Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n      } else {\n        throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n      }\n    } else {\n      if (i === index) {\n        for (var _ = 1; _ <= count; _++) {\n          if (!e["System.Collections.IEnumerator.MoveNext"]()) {\n            throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "count");\n          }\n        }\n      }\n      return e["System.Collections.IEnumerator.MoveNext"]() ? Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) : void 0;\n    }\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\nfunction updateAt(index, y, xs) {\n  var isDone = false;\n  if (index < 0) {\n    throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n  }\n  return generateIndexed(function () {\n    return ofSeq(xs);\n  }, function (i, e) {\n    if ((isDone ? true : i < index) && e["System.Collections.IEnumerator.MoveNext"]()) {\n      return Object(Option["c" /* some */])(e["System.Collections.Generic.IEnumerator`1.get_Current"]());\n    } else if (i === index && e["System.Collections.IEnumerator.MoveNext"]()) {\n      isDone = true;\n      return Object(Option["c" /* some */])(y);\n    } else {\n      if (!isDone) {\n        throw new Error(Global["b" /* SR_indexOutOfBounds */] + "\\\\nParameter name: " + "index");\n      }\n      return void 0;\n    }\n  }, function (e_1) {\n    Object(Util["j" /* disposeSafe */])(e_1);\n  });\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(42);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(68);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js\nvar es_string_trim = __webpack_require__(147);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint8-array.js\nvar es_typed_array_uint8_array = __webpack_require__(123);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.copy-within.js\nvar es_typed_array_copy_within = __webpack_require__(125);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.every.js\nvar es_typed_array_every = __webpack_require__(126);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.fill.js\nvar es_typed_array_fill = __webpack_require__(127);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.filter.js\nvar es_typed_array_filter = __webpack_require__(128);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find.js\nvar es_typed_array_find = __webpack_require__(129);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find-index.js\nvar es_typed_array_find_index = __webpack_require__(130);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.for-each.js\nvar es_typed_array_for_each = __webpack_require__(131);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.includes.js\nvar es_typed_array_includes = __webpack_require__(132);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.index-of.js\nvar es_typed_array_index_of = __webpack_require__(133);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.iterator.js\nvar es_typed_array_iterator = __webpack_require__(134);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.join.js\nvar es_typed_array_join = __webpack_require__(135);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.last-index-of.js\nvar es_typed_array_last_index_of = __webpack_require__(136);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.map.js\nvar es_typed_array_map = __webpack_require__(137);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce.js\nvar es_typed_array_reduce = __webpack_require__(138);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce-right.js\nvar es_typed_array_reduce_right = __webpack_require__(139);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reverse.js\nvar es_typed_array_reverse = __webpack_require__(140);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.set.js\nvar es_typed_array_set = __webpack_require__(141);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.slice.js\nvar es_typed_array_slice = __webpack_require__(142);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.some.js\nvar es_typed_array_some = __webpack_require__(143);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.sort.js\nvar es_typed_array_sort = __webpack_require__(144);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-locale-string.js\nvar es_typed_array_to_locale_string = __webpack_require__(145);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-string.js\nvar es_typed_array_to_string = __webpack_require__(146);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/Guid.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nvar guidRegex = /^[\\(\\{]{0,2}[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[\\)\\}]{0,2}$/;\nvar guidRegexNoHyphen = /^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/;\nvar guidRegexHex = /^\\{0x[0-9a-f]{8},(0x[0-9a-f]{4},){2}\\{(0x[0-9a-f]{2},){7}0x[0-9a-f]{2}\\}\\}$/;\nvar guidHexCaptures = /^([0-9a-f]{8})-(([0-9a-f]{4})-)(([0-9a-f]{4})-)([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/;\nfunction Guid_toString(str, format, _provider) {\n  if (format && (format === null || format === void 0 ? void 0 : format.length) > 0) {\n    switch (format) {\n      case "N":\n        return str.replace(/-/g, \'\');\n      case "D":\n        return str;\n      case "B":\n        return "{" + str + "}";\n      case "P":\n        return "(" + str + ")";\n      case "X":\n        return str.replace(guidHexCaptures, "{0x$1,0x$3,0x$5,{0x$6,0x$7,0x$8,0x$9,0x$10,0x$11,0x$12,0x$13}}");\n      default:\n        throw new Error("Unrecognized Guid print format");\n    }\n  } else {\n    return str;\n  }\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). */\nfunction parse(str) {\n  function hyphenateGuid(str) {\n    return str.replace(guidRegexNoHyphen, "$1-$2-$3-$4-$5");\n  }\n  var wsTrimAndLowered = str.trim().toLowerCase();\n  if (guidRegex.test(wsTrimAndLowered)) {\n    return Object(fable_library_3_7_17_String["i" /* trim */])(wsTrimAndLowered, "{", "}", "(", ")");\n  } else if (guidRegexNoHyphen.test(wsTrimAndLowered)) {\n    return hyphenateGuid(wsTrimAndLowered);\n  } else if (guidRegexHex.test(wsTrimAndLowered)) {\n    return hyphenateGuid(wsTrimAndLowered.replace(/[\\{\\},]|0x/g, \'\'));\n  } else {\n    throw new Error("Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");\n  }\n}\nfunction tryParse(str, defValue) {\n  try {\n    defValue.contents = parse(str);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n// From https://gist.github.com/LeverOne/1308368\nfunction newGuid() {\n  var b = "";\n  for (var a = 0; a++ < 36;) {\n    b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : "-";\n  }\n  return b;\n}\n// Maps for number <-> hex string conversion\nvar _convertMapsInitialized = false;\nvar _byteToHex;\nvar _hexToByte;\nfunction initConvertMaps() {\n  _byteToHex = new Array(256);\n  _hexToByte = {};\n  for (var i = 0; i < 256; i++) {\n    _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n    _hexToByte[_byteToHex[i]] = i;\n  }\n  _convertMapsInitialized = true;\n}\n/** Parse a UUID into it\'s component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nfunction guidToArray(s) {\n  if (!_convertMapsInitialized) {\n    initConvertMaps();\n  }\n  var i = 0;\n  var buf = new Uint8Array(16);\n  s.toLowerCase().replace(/[0-9a-f]{2}/g, function (oct) {\n    switch (i) {\n      // .NET saves first three byte groups with different endianness\n      // See https://stackoverflow.com/a/16722909/3922220\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n        buf[3 - i++] = _hexToByte[oct];\n        break;\n      case 4:\n      case 5:\n        buf[9 - i++] = _hexToByte[oct];\n        break;\n      case 6:\n      case 7:\n        buf[13 - i++] = _hexToByte[oct];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n        buf[i++] = _hexToByte[oct];\n        break;\n    }\n  });\n  // Zero out remaining bytes if string was short\n  while (i < 16) {\n    buf[i++] = 0;\n  }\n  return buf;\n}\n/** Convert UUID byte array into a string */\nfunction arrayToGuid(buf) {\n  if (buf.length !== 16) {\n    throw new Error("Byte array for GUID must be exactly 16 bytes long");\n  }\n  if (!_convertMapsInitialized) {\n    initConvertMaps();\n  }\n  var guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] + _byteToHex[buf[1]] + _byteToHex[buf[0]] + "-" + _byteToHex[buf[5]] + _byteToHex[buf[4]] + "-" + _byteToHex[buf[7]] + _byteToHex[buf[6]] + "-" + _byteToHex[buf[8]] + _byteToHex[buf[9]] + "-" + _byteToHex[buf[10]] + _byteToHex[buf[11]] + _byteToHex[buf[12]] + _byteToHex[buf[13]] + _byteToHex[buf[14]] + _byteToHex[buf[15]];\n  return guid;\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js\nvar es_promise = __webpack_require__(292);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js\nvar es_array_concat = __webpack_require__(97);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __webpack_require__(39);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.map.js\nvar es_map = __webpack_require__(307);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js\nvar es_array_index_of = __webpack_require__(67);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/AsyncBuilder.js\nfunction AsyncBuilder_typeof(obj) { "@babel/helpers - typeof"; return AsyncBuilder_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AsyncBuilder_typeof(obj); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (AsyncBuilder_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction AsyncBuilder_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction AsyncBuilder_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, AsyncBuilder_toPropertyKey(descriptor.key), descriptor); } }\nfunction AsyncBuilder_createClass(Constructor, protoProps, staticProps) { if (protoProps) AsyncBuilder_defineProperties(Constructor.prototype, protoProps); if (staticProps) AsyncBuilder_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction AsyncBuilder_toPropertyKey(arg) { var key = AsyncBuilder_toPrimitive(arg, "string"); return AsyncBuilder_typeof(key) === "symbol" ? key : String(key); }\nfunction AsyncBuilder_toPrimitive(input, hint) { if (AsyncBuilder_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (AsyncBuilder_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar CancellationToken = /*#__PURE__*/function () {\n  function CancellationToken() {\n    var cancelled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    AsyncBuilder_classCallCheck(this, CancellationToken);\n    this._id = 0;\n    this._cancelled = cancelled;\n    this._listeners = new Map();\n  }\n  AsyncBuilder_createClass(CancellationToken, [{\n    key: "isCancelled",\n    get: function get() {\n      return this._cancelled;\n    }\n  }, {\n    key: "cancel",\n    value: function cancel() {\n      if (!this._cancelled) {\n        this._cancelled = true;\n        var _iterator = _createForOfIteratorHelper(this._listeners),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n              listener = _step$value[1];\n            listener();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: "addListener",\n    value: function addListener(f) {\n      var id = this._id;\n      this._listeners.set(this._id++, f);\n      return id;\n    }\n  }, {\n    key: "removeListener",\n    value: function removeListener(id) {\n      return this._listeners.delete(id);\n    }\n  }, {\n    key: "register",\n    value: function register(f, state) {\n      var $ = this;\n      var id = this.addListener(state == null ? f : function () {\n        return f(state);\n      });\n      return {\n        Dispose: function Dispose() {\n          $.removeListener(id);\n        }\n      };\n    }\n  }, {\n    key: "Dispose",\n    value: function Dispose() {\n      // Implement IDisposable for compatibility but do nothing\n      // According to docs, calling Dispose does not trigger cancellation\n      // https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.dispose?view=net-6.0\n    }\n  }]);\n  return CancellationToken;\n}();\nvar OperationCanceledError = /*#__PURE__*/function (_Error) {\n  _inherits(OperationCanceledError, _Error);\n  var _super = _createSuper(OperationCanceledError);\n  function OperationCanceledError() {\n    var _this;\n    AsyncBuilder_classCallCheck(this, OperationCanceledError);\n    _this = _super.call(this, "The operation was canceled");\n    Object.setPrototypeOf(_assertThisInitialized(_this), OperationCanceledError.prototype);\n    return _this;\n  }\n  return AsyncBuilder_createClass(OperationCanceledError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar Trampoline = /*#__PURE__*/function () {\n  function Trampoline() {\n    AsyncBuilder_classCallCheck(this, Trampoline);\n    this.callCount = 0;\n  }\n  AsyncBuilder_createClass(Trampoline, [{\n    key: "incrementAndCheck",\n    value: function incrementAndCheck() {\n      return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n  }, {\n    key: "hijack",\n    value: function hijack(f) {\n      this.callCount = 0;\n      setTimeout(f, 0);\n    }\n  }], [{\n    key: "maxTrampolineCallCount",\n    get: function get() {\n      return 2000;\n    }\n  }]);\n  return Trampoline;\n}();\nfunction protectedCont(f) {\n  return function (ctx) {\n    if (ctx.cancelToken.isCancelled) {\n      ctx.onCancel(new OperationCanceledError());\n    } else if (ctx.trampoline.incrementAndCheck()) {\n      ctx.trampoline.hijack(function () {\n        try {\n          f(ctx);\n        } catch (err) {\n          ctx.onError(Object(Types["e" /* ensureErrorOrException */])(err));\n        }\n      });\n    } else {\n      try {\n        f(ctx);\n      } catch (err) {\n        ctx.onError(Object(Types["e" /* ensureErrorOrException */])(err));\n      }\n    }\n  };\n}\nfunction protectedBind(computation, binder) {\n  return protectedCont(function (ctx) {\n    computation({\n      onSuccess: function onSuccess(x) {\n        try {\n          binder(x)(ctx);\n        } catch (err) {\n          ctx.onError(Object(Types["e" /* ensureErrorOrException */])(err));\n        }\n      },\n      onError: ctx.onError,\n      onCancel: ctx.onCancel,\n      cancelToken: ctx.cancelToken,\n      trampoline: ctx.trampoline\n    });\n  });\n}\nfunction protectedReturn(value) {\n  return protectedCont(function (ctx) {\n    return ctx.onSuccess(value);\n  });\n}\nvar AsyncBuilder_AsyncBuilder = /*#__PURE__*/function () {\n  function AsyncBuilder() {\n    AsyncBuilder_classCallCheck(this, AsyncBuilder);\n  }\n  AsyncBuilder_createClass(AsyncBuilder, [{\n    key: "Bind",\n    value: function Bind(computation, binder) {\n      return protectedBind(computation, binder);\n    }\n  }, {\n    key: "Combine",\n    value: function Combine(computation1, computation2) {\n      return this.Bind(computation1, function () {\n        return computation2;\n      });\n    }\n  }, {\n    key: "Delay",\n    value: function Delay(generator) {\n      return protectedCont(function (ctx) {\n        return generator()(ctx);\n      });\n    }\n  }, {\n    key: "For",\n    value: function For(sequence, body) {\n      var iter = sequence[Symbol.iterator]();\n      var cur = iter.next();\n      return this.While(function () {\n        return !cur.done;\n      }, this.Delay(function () {\n        var res = body(cur.value);\n        cur = iter.next();\n        return res;\n      }));\n    }\n  }, {\n    key: "Return",\n    value: function Return(value) {\n      return protectedReturn(value);\n    }\n  }, {\n    key: "ReturnFrom",\n    value: function ReturnFrom(computation) {\n      return computation;\n    }\n  }, {\n    key: "TryFinally",\n    value: function TryFinally(computation, compensation) {\n      return protectedCont(function (ctx) {\n        computation({\n          onSuccess: function onSuccess(x) {\n            compensation();\n            ctx.onSuccess(x);\n          },\n          onError: function onError(x) {\n            compensation();\n            ctx.onError(x);\n          },\n          onCancel: function onCancel(x) {\n            compensation();\n            ctx.onCancel(x);\n          },\n          cancelToken: ctx.cancelToken,\n          trampoline: ctx.trampoline\n        });\n      });\n    }\n  }, {\n    key: "TryWith",\n    value: function TryWith(computation, catchHandler) {\n      return protectedCont(function (ctx) {\n        computation({\n          onSuccess: ctx.onSuccess,\n          onCancel: ctx.onCancel,\n          cancelToken: ctx.cancelToken,\n          trampoline: ctx.trampoline,\n          onError: function onError(ex) {\n            try {\n              catchHandler(ex)(ctx);\n            } catch (err) {\n              ctx.onError(Object(Types["e" /* ensureErrorOrException */])(err));\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: "Using",\n    value: function Using(resource, binder) {\n      return this.TryFinally(binder(resource), function () {\n        return resource.Dispose();\n      });\n    }\n  }, {\n    key: "While",\n    value: function While(guard, computation) {\n      var _this2 = this;\n      if (guard()) {\n        return this.Bind(computation, function () {\n          return _this2.While(guard, computation);\n        });\n      } else {\n        return this.Return(void 0);\n      }\n    }\n  }, {\n    key: "Zero",\n    value: function Zero() {\n      return protectedCont(function (ctx) {\n        return ctx.onSuccess(void 0);\n      });\n    }\n  }]);\n  return AsyncBuilder;\n}();\nvar AsyncBuilder_singleton = new AsyncBuilder_AsyncBuilder();\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/Choice.js\nfunction Choice_typeof(obj) { "@babel/helpers - typeof"; return Choice_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Choice_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Choice_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Choice_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Choice_toPropertyKey(descriptor.key), descriptor); } }\nfunction Choice_createClass(Constructor, protoProps, staticProps) { if (protoProps) Choice_defineProperties(Constructor.prototype, protoProps); if (staticProps) Choice_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Choice_toPropertyKey(arg) { var key = Choice_toPrimitive(arg, "string"); return Choice_typeof(key) === "symbol" ? key : String(key); }\nfunction Choice_toPrimitive(input, hint) { if (Choice_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Choice_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction Choice_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Choice_setPrototypeOf(subClass, superClass); }\nfunction Choice_setPrototypeOf(o, p) { Choice_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Choice_setPrototypeOf(o, p); }\nfunction Choice_createSuper(Derived) { var hasNativeReflectConstruct = Choice_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Choice_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Choice_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Choice_possibleConstructorReturn(this, result); }; }\nfunction Choice_possibleConstructorReturn(self, call) { if (call && (Choice_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Choice_assertThisInitialized(self); }\nfunction Choice_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction Choice_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction Choice_getPrototypeOf(o) { Choice_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Choice_getPrototypeOf(o); }\n\n\n\nvar FSharpResult$2 = /*#__PURE__*/function (_Union) {\n  Choice_inherits(FSharpResult$2, _Union);\n  var _super = Choice_createSuper(FSharpResult$2);\n  function FSharpResult$2(tag) {\n    var _this;\n    Choice_classCallCheck(this, FSharpResult$2);\n    _this = _super.call(this);\n    _this.tag = tag | 0;\n    for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      fields[_key - 1] = arguments[_key];\n    }\n    _this.fields = fields;\n    return _this;\n  }\n  Choice_createClass(FSharpResult$2, [{\n    key: "cases",\n    value: function cases() {\n      return ["Ok", "Error"];\n    }\n  }]);\n  return FSharpResult$2;\n}(Types["d" /* Union */]);\nfunction FSharpResult$2$reflection(gen0, gen1) {\n  return Object(Reflection["l" /* union_type */])("FSharp.Core.FSharpResult`2", [gen0, gen1], FSharpResult$2, function () {\n    return [[["ResultValue", gen0]], [["ErrorValue", gen1]]];\n  });\n}\nfunction Result_Map(mapping, result) {\n  if (result.tag === 0) {\n    return new FSharpResult$2(0, mapping(result.fields[0]));\n  } else {\n    return new FSharpResult$2(1, result.fields[0]);\n  }\n}\nfunction Result_MapError(mapping, result) {\n  if (result.tag === 0) {\n    return new FSharpResult$2(0, result.fields[0]);\n  } else {\n    return new FSharpResult$2(1, mapping(result.fields[0]));\n  }\n}\nfunction Result_Bind(binder, result) {\n  if (result.tag === 0) {\n    return binder(result.fields[0]);\n  } else {\n    return new FSharpResult$2(1, result.fields[0]);\n  }\n}\nvar FSharpChoice$2 = /*#__PURE__*/function (_Union2) {\n  Choice_inherits(FSharpChoice$2, _Union2);\n  var _super2 = Choice_createSuper(FSharpChoice$2);\n  function FSharpChoice$2(tag) {\n    var _this2;\n    Choice_classCallCheck(this, FSharpChoice$2);\n    _this2 = _super2.call(this);\n    _this2.tag = tag | 0;\n    for (var _len2 = arguments.length, fields = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      fields[_key2 - 1] = arguments[_key2];\n    }\n    _this2.fields = fields;\n    return _this2;\n  }\n  Choice_createClass(FSharpChoice$2, [{\n    key: "cases",\n    value: function cases() {\n      return ["Choice1Of2", "Choice2Of2"];\n    }\n  }]);\n  return FSharpChoice$2;\n}(Types["d" /* Union */]);\nfunction FSharpChoice$2$reflection(gen0, gen1) {\n  return Object(Reflection["l" /* union_type */])("FSharp.Core.FSharpChoice`2", [gen0, gen1], FSharpChoice$2, function () {\n    return [[["Item", gen0]], [["Item", gen1]]];\n  });\n}\nvar FSharpChoice$3 = /*#__PURE__*/function (_Union3) {\n  Choice_inherits(FSharpChoice$3, _Union3);\n  var _super3 = Choice_createSuper(FSharpChoice$3);\n  function FSharpChoice$3(tag) {\n    var _this3;\n    Choice_classCallCheck(this, FSharpChoice$3);\n    _this3 = _super3.call(this);\n    _this3.tag = tag | 0;\n    for (var _len3 = arguments.length, fields = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      fields[_key3 - 1] = arguments[_key3];\n    }\n    _this3.fields = fields;\n    return _this3;\n  }\n  Choice_createClass(FSharpChoice$3, [{\n    key: "cases",\n    value: function cases() {\n      return ["Choice1Of3", "Choice2Of3", "Choice3Of3"];\n    }\n  }]);\n  return FSharpChoice$3;\n}(Types["d" /* Union */]);\nfunction FSharpChoice$3$reflection(gen0, gen1, gen2) {\n  return Object(Reflection["l" /* union_type */])("FSharp.Core.FSharpChoice`3", [gen0, gen1, gen2], FSharpChoice$3, function () {\n    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]]];\n  });\n}\nvar FSharpChoice$4 = /*#__PURE__*/function (_Union4) {\n  Choice_inherits(FSharpChoice$4, _Union4);\n  var _super4 = Choice_createSuper(FSharpChoice$4);\n  function FSharpChoice$4(tag) {\n    var _this4;\n    Choice_classCallCheck(this, FSharpChoice$4);\n    _this4 = _super4.call(this);\n    _this4.tag = tag | 0;\n    for (var _len4 = arguments.length, fields = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      fields[_key4 - 1] = arguments[_key4];\n    }\n    _this4.fields = fields;\n    return _this4;\n  }\n  Choice_createClass(FSharpChoice$4, [{\n    key: "cases",\n    value: function cases() {\n      return ["Choice1Of4", "Choice2Of4", "Choice3Of4", "Choice4Of4"];\n    }\n  }]);\n  return FSharpChoice$4;\n}(Types["d" /* Union */]);\nfunction FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\n  return Object(Reflection["l" /* union_type */])("FSharp.Core.FSharpChoice`4", [gen0, gen1, gen2, gen3], FSharpChoice$4, function () {\n    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]], [["Item", gen3]]];\n  });\n}\nvar FSharpChoice$5 = /*#__PURE__*/function (_Union5) {\n  Choice_inherits(FSharpChoice$5, _Union5);\n  var _super5 = Choice_createSuper(FSharpChoice$5);\n  function FSharpChoice$5(tag) {\n    var _this5;\n    Choice_classCallCheck(this, FSharpChoice$5);\n    _this5 = _super5.call(this);\n    _this5.tag = tag | 0;\n    for (var _len5 = arguments.length, fields = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      fields[_key5 - 1] = arguments[_key5];\n    }\n    _this5.fields = fields;\n    return _this5;\n  }\n  Choice_createClass(FSharpChoice$5, [{\n    key: "cases",\n    value: function cases() {\n      return ["Choice1Of5", "Choice2Of5", "Choice3Of5", "Choice4Of5", "Choice5Of5"];\n    }\n  }]);\n  return FSharpChoice$5;\n}(Types["d" /* Union */]);\nfunction FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\n  return Object(Reflection["l" /* union_type */])("FSharp.Core.FSharpChoice`5", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, function () {\n    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]], [["Item", gen3]], [["Item", gen4]]];\n  });\n}\nvar FSharpChoice$6 = /*#__PURE__*/function (_Union6) {\n  Choice_inherits(FSharpChoice$6, _Union6);\n  var _super6 = Choice_createSuper(FSharpChoice$6);\n  function FSharpChoice$6(tag) {\n    var _this6;\n    Choice_classCallCheck(this, FSharpChoice$6);\n    _this6 = _super6.call(this);\n    _this6.tag = tag | 0;\n    for (var _len6 = arguments.length, fields = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      fields[_key6 - 1] = arguments[_key6];\n    }\n    _this6.fields = fields;\n    return _this6;\n  }\n  Choice_createClass(FSharpChoice$6, [{\n    key: "cases",\n    value: function cases() {\n      return ["Choice1Of6", "Choice2Of6", "Choice3Of6", "Choice4Of6", "Choice5Of6", "Choice6Of6"];\n    }\n  }]);\n  return FSharpChoice$6;\n}(Types["d" /* Union */]);\nfunction FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\n  return Object(Reflection["l" /* union_type */])("FSharp.Core.FSharpChoice`6", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, function () {\n    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]], [["Item", gen3]], [["Item", gen4]], [["Item", gen5]]];\n  });\n}\nvar FSharpChoice$7 = /*#__PURE__*/function (_Union7) {\n  Choice_inherits(FSharpChoice$7, _Union7);\n  var _super7 = Choice_createSuper(FSharpChoice$7);\n  function FSharpChoice$7(tag) {\n    var _this7;\n    Choice_classCallCheck(this, FSharpChoice$7);\n    _this7 = _super7.call(this);\n    _this7.tag = tag | 0;\n    for (var _len7 = arguments.length, fields = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      fields[_key7 - 1] = arguments[_key7];\n    }\n    _this7.fields = fields;\n    return _this7;\n  }\n  Choice_createClass(FSharpChoice$7, [{\n    key: "cases",\n    value: function cases() {\n      return ["Choice1Of7", "Choice2Of7", "Choice3Of7", "Choice4Of7", "Choice5Of7", "Choice6Of7", "Choice7Of7"];\n    }\n  }]);\n  return FSharpChoice$7;\n}(Types["d" /* Union */]);\nfunction FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\n  return Object(Reflection["l" /* union_type */])("FSharp.Core.FSharpChoice`7", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, function () {\n    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]], [["Item", gen3]], [["Item", gen4]], [["Item", gen5]], [["Item", gen6]]];\n  });\n}\nfunction Choice_makeChoice1Of2(x) {\n  return new FSharpChoice$2(0, x);\n}\nfunction Choice_makeChoice2Of2(x) {\n  return new FSharpChoice$2(1, x);\n}\nfunction Choice_tryValueIfChoice1Of2(x) {\n  if (x.tag === 0) {\n    return Object(Option["c" /* some */])(x.fields[0]);\n  } else {\n    return void 0;\n  }\n}\nfunction Choice_tryValueIfChoice2Of2(x) {\n  if (x.tag === 1) {\n    return Object(Option["c" /* some */])(x.fields[0]);\n  } else {\n    return void 0;\n  }\n}\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/SystemException.js\nfunction SystemException_typeof(obj) { "@babel/helpers - typeof"; return SystemException_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, SystemException_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction SystemException_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, SystemException_toPropertyKey(descriptor.key), descriptor); } }\nfunction SystemException_createClass(Constructor, protoProps, staticProps) { if (protoProps) SystemException_defineProperties(Constructor.prototype, protoProps); if (staticProps) SystemException_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction SystemException_toPropertyKey(arg) { var key = SystemException_toPrimitive(arg, "string"); return SystemException_typeof(key) === "symbol" ? key : String(key); }\nfunction SystemException_toPrimitive(input, hint) { if (SystemException_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (SystemException_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction SystemException_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction SystemException_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) SystemException_setPrototypeOf(subClass, superClass); }\nfunction SystemException_setPrototypeOf(o, p) { SystemException_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return SystemException_setPrototypeOf(o, p); }\nfunction SystemException_createSuper(Derived) { var hasNativeReflectConstruct = SystemException_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = SystemException_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = SystemException_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return SystemException_possibleConstructorReturn(this, result); }; }\nfunction SystemException_possibleConstructorReturn(self, call) { if (call && (SystemException_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return SystemException_assertThisInitialized(self); }\nfunction SystemException_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction SystemException_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction SystemException_getPrototypeOf(o) { SystemException_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return SystemException_getPrototypeOf(o); }\n\n\nvar SystemException = /*#__PURE__*/function (_Exception) {\n  SystemException_inherits(SystemException, _Exception);\n  var _super = SystemException_createSuper(SystemException);\n  function SystemException() {\n    SystemException_classCallCheck(this, SystemException);\n    return _super.call(this);\n  }\n  return SystemException_createClass(SystemException);\n}(Types["a" /* Exception */]);\nfunction SystemException$reflection() {\n  return Object(Reflection["b" /* class_type */])("System.SystemException", void 0, SystemException, Object(Reflection["b" /* class_type */])("System.Exception"));\n}\nfunction SystemException_$ctor() {\n  return new SystemException();\n}\nvar TimeoutException = /*#__PURE__*/function (_SystemException) {\n  SystemException_inherits(TimeoutException, _SystemException);\n  var _super2 = SystemException_createSuper(TimeoutException);\n  function TimeoutException() {\n    SystemException_classCallCheck(this, TimeoutException);\n    return _super2.call(this);\n  }\n  return SystemException_createClass(TimeoutException);\n}(SystemException);\nfunction TimeoutException$reflection() {\n  return Object(Reflection["b" /* class_type */])("System.TimeoutException", void 0, TimeoutException, SystemException$reflection());\n}\nfunction TimeoutException_$ctor() {\n  return new TimeoutException();\n}\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/Async.js\nfunction Async_typeof(obj) { "@babel/helpers - typeof"; return Async_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Async_typeof(obj); }\nfunction Async_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Async_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction Async_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Async_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Async_arrayLikeToArray(o, minLen); }\nfunction Async_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Async_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Async_toPropertyKey(descriptor.key), descriptor); } }\nfunction Async_createClass(Constructor, protoProps, staticProps) { if (protoProps) Async_defineProperties(Constructor.prototype, protoProps); if (staticProps) Async_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Async_toPropertyKey(arg) { var key = Async_toPrimitive(arg, "string"); return Async_typeof(key) === "symbol" ? key : String(key); }\nfunction Async_toPrimitive(input, hint) { if (Async_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Async_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction Async_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\n\n\n\n\n\n\n// Implemented just for type references\nvar Async = /*#__PURE__*/Async_createClass(function Async() {\n  Async_classCallCheck(this, Async);\n});\nfunction emptyContinuation(_x) {\n  // NOP\n}\n// see AsyncBuilder.Delay\nfunction Async_delay(generator) {\n  return protectedCont(function (ctx) {\n    return generator()(ctx);\n  });\n}\n// MakeAsync: body:(AsyncActivation<\'T> -> AsyncReturn) -> Async<\'T>\nfunction makeAsync(body) {\n  return body;\n}\n// Invoke: computation: Async<\'T> -> ctxt:AsyncActivation<\'T> -> AsyncReturn\nfunction invoke(computation, ctx) {\n  return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<\'T> -> result1:\'U -> part2:(\'U -> Async<\'T>) -> AsyncReturn\nfunction callThenInvoke(ctx, result1, part2) {\n  return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<\'T> -> part1:Async<\'U> -> part2:(\'U -> Async<\'T>) -> AsyncReturn\nfunction bind(ctx, part1, part2) {\n  return protectedBind(part1, part2)(ctx);\n}\nfunction createCancellationToken(arg) {\n  var token = new CancellationToken(typeof arg === "boolean" ? arg : false);\n  if (typeof arg === "number") {\n    setTimeout(function () {\n      token.cancel();\n    }, arg);\n  }\n  return token;\n}\nfunction cancel(token) {\n  token.cancel();\n}\nfunction cancelAfter(token, ms) {\n  setTimeout(function () {\n    token.cancel();\n  }, ms);\n}\nfunction isCancellationRequested(token) {\n  return token != null && token.isCancelled;\n}\nfunction throwIfCancellationRequested(token) {\n  if (token != null && token.isCancelled) {\n    throw new Error("Operation is cancelled");\n  }\n}\nfunction throwAfter(millisecondsDueTime) {\n  return protectedCont(function (ctx) {\n    var tokenId;\n    var timeoutId = setTimeout(function () {\n      ctx.cancelToken.removeListener(tokenId);\n      ctx.onError(new TimeoutException());\n    }, millisecondsDueTime);\n    tokenId = ctx.cancelToken.addListener(function () {\n      clearTimeout(timeoutId);\n      ctx.onCancel(new OperationCanceledError());\n    });\n  });\n}\nfunction startChild(computation, ms) {\n  if (ms) {\n    var computationWithTimeout = protectedBind(parallel2(computation, throwAfter(ms)), function (xs) {\n      return protectedReturn(xs[0]);\n    });\n    return startChild(computationWithTimeout);\n  }\n  var promise = startAsPromise(computation);\n  // JS Promises are hot, computation has already started\n  // but we delay returning the result\n  return protectedCont(function (ctx) {\n    return protectedReturn(awaitPromise(promise))(ctx);\n  });\n}\nfunction awaitPromise(p) {\n  return fromContinuations(function (conts) {\n    return p.then(conts[0]).catch(function (err) {\n      return (err instanceof OperationCanceledError ? conts[2] : conts[1])(err);\n    });\n  });\n}\nfunction cancellationToken() {\n  return protectedCont(function (ctx) {\n    return ctx.onSuccess(ctx.cancelToken);\n  });\n}\nvar defaultCancellationToken = new CancellationToken();\nfunction catchAsync(work) {\n  return protectedCont(function (ctx) {\n    work({\n      onSuccess: function onSuccess(x) {\n        return ctx.onSuccess(Choice_makeChoice1Of2(x));\n      },\n      onError: function onError(ex) {\n        return ctx.onSuccess(Choice_makeChoice2Of2(ex));\n      },\n      onCancel: ctx.onCancel,\n      cancelToken: ctx.cancelToken,\n      trampoline: ctx.trampoline\n    });\n  });\n}\nfunction fromContinuations(f) {\n  return protectedCont(function (ctx) {\n    return f([ctx.onSuccess, ctx.onError, ctx.onCancel]);\n  });\n}\nfunction ignore(computation) {\n  return protectedBind(computation, function (_x) {\n    return protectedReturn(void 0);\n  });\n}\nfunction parallel(computations) {\n  return Async_delay(function () {\n    return awaitPromise(Promise.all(Array.from(computations, function (w) {\n      return startAsPromise(w);\n    })));\n  });\n}\nfunction parallel2(a, b) {\n  return Async_delay(function () {\n    return awaitPromise(Promise.all([startAsPromise(a), startAsPromise(b)]));\n  });\n}\nfunction sequential(computations) {\n  function _sequential(computations) {\n    var pr = Promise.resolve([]);\n    var _iterator = Async_createForOfIteratorHelper(computations),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var c = _step.value;\n        pr = pr.then(function (results) {\n          return startAsPromise(c).then(function (r) {\n            return results.concat([r]);\n          });\n        });\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return pr;\n  }\n  return Async_delay(function () {\n    return awaitPromise(_sequential(computations));\n  });\n}\nfunction sleep(millisecondsDueTime) {\n  return protectedCont(function (ctx) {\n    var tokenId;\n    var timeoutId = setTimeout(function () {\n      ctx.cancelToken.removeListener(tokenId);\n      ctx.onSuccess(void 0);\n    }, millisecondsDueTime);\n    tokenId = ctx.cancelToken.addListener(function () {\n      clearTimeout(timeoutId);\n      ctx.onCancel(new OperationCanceledError());\n    });\n  });\n}\nfunction runSynchronously() {\n  throw new Error("Asynchronous code cannot be run synchronously in JS");\n}\nfunction start(computation, cancellationToken) {\n  return startWithContinuations(computation, cancellationToken);\n}\nfunction startImmediate(computation, cancellationToken) {\n  return start(computation, cancellationToken);\n}\nfunction startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n  if (typeof continuation !== "function") {\n    cancelToken = continuation;\n    continuation = undefined;\n  }\n  var trampoline = new Trampoline();\n  computation({\n    onSuccess: continuation ? continuation : emptyContinuation,\n    onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n    onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n    cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n    trampoline: trampoline\n  });\n}\nfunction startAsPromise(computation, cancellationToken) {\n  return new Promise(function (resolve, reject) {\n    return startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken);\n  });\n}\n/* harmony default export */ var fable_library_3_7_17_Async = (Async);\n// CONCATENATED MODULE: ./tests/fable_modules/Fable.Mocha.2.9.1/Mocha.fs.js\nfunction Mocha_fs_typeof(obj) { "@babel/helpers - typeof"; return Mocha_fs_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Mocha_fs_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Mocha_fs_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Mocha_fs_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Mocha_fs_toPropertyKey(descriptor.key), descriptor); } }\nfunction Mocha_fs_createClass(Constructor, protoProps, staticProps) { if (protoProps) Mocha_fs_defineProperties(Constructor.prototype, protoProps); if (staticProps) Mocha_fs_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Mocha_fs_toPropertyKey(arg) { var key = Mocha_fs_toPrimitive(arg, "string"); return Mocha_fs_typeof(key) === "symbol" ? key : String(key); }\nfunction Mocha_fs_toPrimitive(input, hint) { if (Mocha_fs_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Mocha_fs_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction Mocha_fs_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Mocha_fs_setPrototypeOf(subClass, superClass); }\nfunction Mocha_fs_setPrototypeOf(o, p) { Mocha_fs_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Mocha_fs_setPrototypeOf(o, p); }\nfunction Mocha_fs_createSuper(Derived) { var hasNativeReflectConstruct = Mocha_fs_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Mocha_fs_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Mocha_fs_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Mocha_fs_possibleConstructorReturn(this, result); }; }\nfunction Mocha_fs_possibleConstructorReturn(self, call) { if (call && (Mocha_fs_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Mocha_fs_assertThisInitialized(self); }\nfunction Mocha_fs_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction Mocha_fs_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction Mocha_fs_getPrototypeOf(o) { Mocha_fs_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Mocha_fs_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\nvar FocusState = /*#__PURE__*/function (_Union) {\n  Mocha_fs_inherits(FocusState, _Union);\n  var _super = Mocha_fs_createSuper(FocusState);\n  function FocusState(tag) {\n    var _this;\n    Mocha_fs_classCallCheck(this, FocusState);\n    _this = _super.call(this);\n    _this.tag = tag | 0;\n    for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      fields[_key - 1] = arguments[_key];\n    }\n    _this.fields = fields;\n    return _this;\n  }\n  Mocha_fs_createClass(FocusState, [{\n    key: "cases",\n    value: function cases() {\n      return ["Normal", "Pending", "Focused"];\n    }\n  }]);\n  return FocusState;\n}(Types["d" /* Union */]);\nfunction FocusState$reflection() {\n  return Object(Reflection["l" /* union_type */])("Fable.Mocha.FocusState", [], FocusState, function () {\n    return [[], [], []];\n  });\n}\nvar TestCase = /*#__PURE__*/function (_Union2) {\n  Mocha_fs_inherits(TestCase, _Union2);\n  var _super2 = Mocha_fs_createSuper(TestCase);\n  function TestCase(tag) {\n    var _this2;\n    Mocha_fs_classCallCheck(this, TestCase);\n    _this2 = _super2.call(this);\n    _this2.tag = tag | 0;\n    for (var _len2 = arguments.length, fields = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      fields[_key2 - 1] = arguments[_key2];\n    }\n    _this2.fields = fields;\n    return _this2;\n  }\n  Mocha_fs_createClass(TestCase, [{\n    key: "cases",\n    value: function cases() {\n      return ["SyncTest", "AsyncTest", "TestList", "TestListSequential"];\n    }\n  }]);\n  return TestCase;\n}(Types["d" /* Union */]);\nfunction TestCase$reflection() {\n  return Object(Reflection["l" /* union_type */])("Fable.Mocha.TestCase", [], TestCase, function () {\n    return [[["Item1", Reflection["j" /* string_type */]], ["Item2", Object(Reflection["f" /* lambda_type */])(Reflection["m" /* unit_type */], Reflection["m" /* unit_type */])], ["Item3", FocusState$reflection()]], [["Item1", Reflection["j" /* string_type */]], ["Item2", Object(Reflection["b" /* class_type */])("Microsoft.FSharp.Control.FSharpAsync`1", [Reflection["m" /* unit_type */]])], ["Item3", FocusState$reflection()]], [["Item1", Reflection["j" /* string_type */]], ["Item2", Object(Reflection["g" /* list_type */])(TestCase$reflection())]], [["Item1", Reflection["j" /* string_type */]], ["Item2", Object(Reflection["g" /* list_type */])(TestCase$reflection())]]];\n  });\n}\nfunction Test_testCase(name, body) {\n  return new TestCase(0, name, body, new FocusState(0));\n}\nfunction Test_ptestCase(name, body) {\n  return new TestCase(0, name, body, new FocusState(1));\n}\nfunction Test_ftestCase(name, body) {\n  return new TestCase(0, name, body, new FocusState(2));\n}\nfunction Test_testCaseAsync(name, body) {\n  return new TestCase(1, name, body, new FocusState(0));\n}\nfunction Test_ptestCaseAsync(name, body) {\n  return new TestCase(1, name, body, new FocusState(1));\n}\nfunction Test_ftestCaseAsync(name, body) {\n  return new TestCase(1, name, body, new FocusState(2));\n}\nfunction Test_testList(name, tests) {\n  return new TestCase(2, name, tests);\n}\nfunction Test_testSequenced(test) {\n  switch (test.tag) {\n    case 1:\n      {\n        var name_1 = test.fields[0];\n        return new TestCase(3, name_1, Object(List["l" /* singleton */])(new TestCase(1, name_1, test.fields[1], test.fields[2])));\n      }\n    case 2:\n      {\n        return new TestCase(3, test.fields[0], test.fields[1]);\n      }\n    case 3:\n      {\n        return new TestCase(3, test.fields[0], test.fields[1]);\n      }\n    default:\n      {\n        var name = test.fields[0];\n        return new TestCase(3, name, Object(List["l" /* singleton */])(new TestCase(0, name, test.fields[1], test.fields[2])));\n      }\n  }\n}\nvar Env_insideBrowser = new Function("try {return this===window;}catch(e){ return false;}")();\nfunction Expect_notEqual(actual, expected, msg) {\n  Object(Util["b" /* assertNotEqual */])(actual, expected, msg);\n}\nfunction Expect_isTrue(cond) {\n  return function (msg) {\n    var copyOfStruct;\n    var actual = cond;\n    var expected_1 = true;\n    var msg_1 = msg;\n    if (actual === expected_1 ? true : !new Function("try {return this===window;}catch(e){ return false;}")()) {\n      Object(Util["a" /* assertEqual */])(actual, expected_1, msg_1);\n    } else {\n      var errorMsg;\n      if (Object(List["c" /* contains */])((copyOfStruct = actual, Reflection["a" /* bool_type */]), Object(List["j" /* ofArray */])([Reflection["e" /* int32_type */], Reflection["a" /* bool_type */], Reflection["d" /* float64_type */], Reflection["j" /* string_type */], Object(Reflection["b" /* class_type */])("System.Decimal"), Object(Reflection["b" /* class_type */])("System.Guid")]), {\n        Equals: Reflection["c" /* equals */],\n        GetHashCode: Util["y" /* structuralHash */]\n      })) {\n        var arg_1 = Object(Types["f" /* toString */])(actual);\n        var arg = Object(Types["f" /* toString */])(expected_1);\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%s</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%s</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(arg)(arg_1)(msg_1);\n      } else {\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%A</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%A</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(expected_1)(actual)(msg_1);\n      }\n      throw new Error(errorMsg);\n    }\n  };\n}\nfunction Expect_isFalse(cond) {\n  return function (msg) {\n    var copyOfStruct;\n    var actual = cond;\n    var expected_1 = false;\n    var msg_1 = msg;\n    if (actual === expected_1 ? true : !new Function("try {return this===window;}catch(e){ return false;}")()) {\n      Object(Util["a" /* assertEqual */])(actual, expected_1, msg_1);\n    } else {\n      var errorMsg;\n      if (Object(List["c" /* contains */])((copyOfStruct = actual, Reflection["a" /* bool_type */]), Object(List["j" /* ofArray */])([Reflection["e" /* int32_type */], Reflection["a" /* bool_type */], Reflection["d" /* float64_type */], Reflection["j" /* string_type */], Object(Reflection["b" /* class_type */])("System.Decimal"), Object(Reflection["b" /* class_type */])("System.Guid")]), {\n        Equals: Reflection["c" /* equals */],\n        GetHashCode: Util["y" /* structuralHash */]\n      })) {\n        var arg_1 = Object(Types["f" /* toString */])(actual);\n        var arg = Object(Types["f" /* toString */])(expected_1);\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%s</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%s</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(arg)(arg_1)(msg_1);\n      } else {\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%A</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%A</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(expected_1)(actual)(msg_1);\n      }\n      throw new Error(errorMsg);\n    }\n  };\n}\nfunction Expect_isZero(number) {\n  return function (msg) {\n    var copyOfStruct;\n    var actual_1 = 0;\n    var expected = number | 0;\n    var msg_1 = msg;\n    if (actual_1 === expected ? true : !new Function("try {return this===window;}catch(e){ return false;}")()) {\n      Object(Util["a" /* assertEqual */])(actual_1, expected, msg_1);\n    } else {\n      var errorMsg;\n      if (Object(List["c" /* contains */])((copyOfStruct = actual_1, Reflection["e" /* int32_type */]), Object(List["j" /* ofArray */])([Reflection["e" /* int32_type */], Reflection["a" /* bool_type */], Reflection["d" /* float64_type */], Reflection["j" /* string_type */], Object(Reflection["b" /* class_type */])("System.Decimal"), Object(Reflection["b" /* class_type */])("System.Guid")]), {\n        Equals: Reflection["c" /* equals */],\n        GetHashCode: Util["y" /* structuralHash */]\n      })) {\n        var arg_1 = Object(Util["o" /* int32ToString */])(actual_1);\n        var arg = Object(Util["o" /* int32ToString */])(expected);\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%s</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%s</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(arg)(arg_1)(msg_1);\n      } else {\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%A</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%A</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(expected)(actual_1)(msg_1);\n      }\n      throw new Error(errorMsg);\n    }\n  };\n}\nfunction Expect_isEmpty(x) {\n  var expected = isEmpty(x);\n  return function (msg) {\n    var copyOfStruct;\n    var actual_1 = true;\n    var expected_1 = expected;\n    var msg_1 = msg;\n    if (actual_1 === expected_1 ? true : !new Function("try {return this===window;}catch(e){ return false;}")()) {\n      Object(Util["a" /* assertEqual */])(actual_1, expected_1, msg_1);\n    } else {\n      var errorMsg;\n      if (Object(List["c" /* contains */])((copyOfStruct = actual_1, Reflection["a" /* bool_type */]), Object(List["j" /* ofArray */])([Reflection["e" /* int32_type */], Reflection["a" /* bool_type */], Reflection["d" /* float64_type */], Reflection["j" /* string_type */], Object(Reflection["b" /* class_type */])("System.Decimal"), Object(Reflection["b" /* class_type */])("System.Guid")]), {\n        Equals: Reflection["c" /* equals */],\n        GetHashCode: Util["y" /* structuralHash */]\n      })) {\n        var arg_1 = Object(Types["f" /* toString */])(actual_1);\n        var arg = Object(Types["f" /* toString */])(expected_1);\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%s</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%s</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(arg)(arg_1)(msg_1);\n      } else {\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%A</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%A</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(expected_1)(actual_1)(msg_1);\n      }\n      throw new Error(errorMsg);\n    }\n  };\n}\nfunction Expect_pass() {\n  return function (msg) {\n    var copyOfStruct;\n    var actual_1 = true;\n    var expected_1 = true;\n    var msg_1 = msg;\n    if (actual_1 === expected_1 ? true : !new Function("try {return this===window;}catch(e){ return false;}")()) {\n      Object(Util["a" /* assertEqual */])(actual_1, expected_1, msg_1);\n    } else {\n      var errorMsg;\n      if (Object(List["c" /* contains */])((copyOfStruct = actual_1, Reflection["a" /* bool_type */]), Object(List["j" /* ofArray */])([Reflection["e" /* int32_type */], Reflection["a" /* bool_type */], Reflection["d" /* float64_type */], Reflection["j" /* string_type */], Object(Reflection["b" /* class_type */])("System.Decimal"), Object(Reflection["b" /* class_type */])("System.Guid")]), {\n        Equals: Reflection["c" /* equals */],\n        GetHashCode: Util["y" /* structuralHash */]\n      })) {\n        var arg_1 = Object(Types["f" /* toString */])(actual_1);\n        var arg = Object(Types["f" /* toString */])(expected_1);\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%s</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%s</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(arg)(arg_1)(msg_1);\n      } else {\n        errorMsg = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%A</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%A</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(expected_1)(actual_1)(msg_1);\n      }\n      throw new Error(errorMsg);\n    }\n  };\n}\nfunction Expect_isOk(x, message) {\n  if (x.tag === 1) {\n    Object(fable_library_3_7_17_String["g" /* toFail */])(Object(fable_library_3_7_17_String["e" /* printf */])("%s. Expected Ok, was Error(%A)."))(message)(x.fields[0]);\n  } else {\n    Expect_pass()(message);\n  }\n}\nvar Html_Node = /*#__PURE__*/function (_Record) {\n  Mocha_fs_inherits(Html_Node, _Record);\n  var _super3 = Mocha_fs_createSuper(Html_Node);\n  function Html_Node(Tag, Attributes, Content, Children) {\n    var _this3;\n    Mocha_fs_classCallCheck(this, Html_Node);\n    _this3 = _super3.call(this);\n    _this3.Tag = Tag;\n    _this3.Attributes = Attributes;\n    _this3.Content = Content;\n    _this3.Children = Children;\n    return _this3;\n  }\n  return Mocha_fs_createClass(Html_Node);\n}(Types["c" /* Record */]);\nfunction Html_Node$reflection() {\n  return Object(Reflection["i" /* record_type */])("Fable.Mocha.Html.Node", [], Html_Node, function () {\n    return [["Tag", Reflection["j" /* string_type */]], ["Attributes", Object(Reflection["g" /* list_type */])(Object(Reflection["k" /* tuple_type */])(Reflection["j" /* string_type */], Reflection["j" /* string_type */]))], ["Content", Reflection["j" /* string_type */]], ["Children", Object(Reflection["g" /* list_type */])(Html_Node$reflection())]];\n  });\n}\nfunction Html_createNode(node) {\n  var el = document.createElement(node.Tag);\n  el.innerHTML = node.Content;\n  var enumerator = Object(Util["n" /* getEnumerator */])(node.Attributes);\n  try {\n    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {\n      var forLoopVar = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();\n      el.setAttribute(forLoopVar[0], forLoopVar[1]);\n    }\n  } finally {\n    Object(Util["j" /* disposeSafe */])(enumerator);\n  }\n  var enumerator_1 = Object(Util["n" /* getEnumerator */])(node.Children);\n  try {\n    while (enumerator_1["System.Collections.IEnumerator.MoveNext"]()) {\n      var childElement = Html_createNode(enumerator_1["System.Collections.Generic.IEnumerator`1.get_Current"]());\n      el.appendChild(childElement);\n    }\n  } finally {\n    Object(Util["j" /* disposeSafe */])(enumerator_1);\n  }\n  return el;\n}\nfunction Html_simpleDiv(attrs, content) {\n  return new Html_Node("div", attrs, content, Object(List["d" /* empty */])());\n}\nfunction Html_div(attrs, children) {\n  return new Html_Node("div", attrs, "", children);\n}\nfunction Mocha_isFocused(test) {\n  var pattern_matching_result, tests, tests_1;\n  if (test.tag === 1) {\n    if (test.fields[2].tag === 2) {\n      pattern_matching_result = 1;\n    } else {\n      pattern_matching_result = 4;\n    }\n  } else if (test.tag === 2) {\n    pattern_matching_result = 2;\n    tests = test.fields[1];\n  } else if (test.tag === 3) {\n    pattern_matching_result = 3;\n    tests_1 = test.fields[1];\n  } else if (test.fields[2].tag === 2) {\n    pattern_matching_result = 0;\n  } else {\n    pattern_matching_result = 4;\n  }\n  switch (pattern_matching_result) {\n    case 0:\n      {\n        return true;\n      }\n    case 1:\n      {\n        return true;\n      }\n    case 2:\n      {\n        return Object(List["e" /* exists */])(Mocha_isFocused, tests);\n      }\n    case 3:\n      {\n        return Object(List["e" /* exists */])(Mocha_isFocused, tests_1);\n      }\n    case 4:\n      {\n        return false;\n      }\n  }\n}\nfunction Mocha_runSyncTestInBrowser(name, test, padding) {\n  try {\n    test();\n    return Html_simpleDiv(Object(List["j" /* ofArray */])([["data-test", name], ["class", "passed"], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:green"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("✔ %s"))(name));\n  } catch (ex) {\n    var error = new Html_Node("div", Object(List["l" /* singleton */])(["style", "font-size:16px;color:red;margin:10px; padding:10px; border: 1px solid red; border-radius: 10px;"]), ex.message, Object(List["d" /* empty */])());\n    return Html_div(Object(List["d" /* empty */])(), Object(List["j" /* ofArray */])([Html_simpleDiv(Object(List["j" /* ofArray */])([["data-test", name], ["class", "failed"], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:red"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("✘ %s"))(name)), error]));\n  }\n}\nfunction Mocha_runAsyncTestInBrowser(name, test, padding) {\n  var id;\n  var copyOfStruct = newGuid();\n  id = copyOfStruct;\n  startImmediate(AsyncBuilder_singleton.Delay(function () {\n    return AsyncBuilder_singleton.Bind(sleep(1000), function () {\n      return AsyncBuilder_singleton.Bind(catchAsync(test), function (_arg_1) {\n        if (_arg_1.tag === 1) {\n          var div_1 = document.getElementById(id);\n          div_1.innerHTML = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("✘ %s"))(name);\n          var error = new Html_Node("div", Object(List["l" /* singleton */])(["style", "margin:10px; padding:10px; border: 1px solid red; border-radius: 10px"]), _arg_1.fields[0].message, Object(List["d" /* empty */])());\n          div_1.setAttribute("style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx;color:red"))(padding));\n          div_1.setAttribute("class", "failed");\n          div_1.appendChild(Html_createNode(error));\n          return AsyncBuilder_singleton.Zero();\n        } else {\n          var div = document.getElementById(id);\n          div.innerHTML = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("✔ %s"))(name);\n          div.setAttribute("class", "passed");\n          div.setAttribute("style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx;color:green"))(padding));\n          return AsyncBuilder_singleton.Zero();\n        }\n      });\n    });\n  }));\n  return Html_simpleDiv(Object(List["j" /* ofArray */])([["id", id], ["data-test", name], ["class", "executing"], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx;color:gray"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("⏳ %s"))(name));\n}\nfunction Mocha_runAsyncSequentialTestInBrowser(name, test, padding) {\n  var id;\n  var copyOfStruct = newGuid();\n  id = copyOfStruct;\n  return [AsyncBuilder_singleton.Delay(function () {\n    return AsyncBuilder_singleton.Bind(sleep(1000), function () {\n      return AsyncBuilder_singleton.Bind(catchAsync(test), function (_arg_1) {\n        if (_arg_1.tag === 1) {\n          var div_1 = document.getElementById(id);\n          div_1.innerHTML = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("✘ %s"))(name);\n          var error = new Html_Node("div", Object(List["l" /* singleton */])(["style", "margin:10px; padding:10px; border: 1px solid red; border-radius: 10px"]), _arg_1.fields[0].message, Object(List["d" /* empty */])());\n          div_1.setAttribute("style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx;color:red"))(padding));\n          div_1.setAttribute("class", "failed");\n          div_1.appendChild(Html_createNode(error));\n          return AsyncBuilder_singleton.Zero();\n        } else {\n          var div = document.getElementById(id);\n          div.innerHTML = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("✔ %s"))(name);\n          div.setAttribute("class", "passed");\n          div.setAttribute("style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx;color:green"))(padding));\n          return AsyncBuilder_singleton.Zero();\n        }\n      });\n    });\n  }), Html_simpleDiv(Object(List["j" /* ofArray */])([["id", id], ["data-test", name], ["class", "executing"], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx;color:gray"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("⏳ %s"))(name))];\n}\nfunction Mocha_flattenTests(lastName, _arg) {\n  switch (_arg.tag) {\n    case 1:\n      {\n        var name_1 = _arg.fields[0];\n        return Object(List["l" /* singleton */])(new TestCase(1, Object(fable_library_3_7_17_String["c" /* isNullOrWhiteSpace */])(lastName) ? name_1 : Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("%s - %s"))(lastName)(name_1), _arg.fields[1], _arg.fields[2]));\n      }\n    case 2:\n      {\n        return toList(delay(function () {\n          return collect(function (test_2) {\n            return Mocha_flattenTests(_arg.fields[0], test_2);\n          }, _arg.fields[1]);\n        }));\n      }\n    case 3:\n      {\n        return toList(delay(function () {\n          return collect(function (test_3) {\n            return Mocha_flattenTests(_arg.fields[0], test_3);\n          }, _arg.fields[1]);\n        }));\n      }\n    default:\n      {\n        var name = _arg.fields[0];\n        return Object(List["l" /* singleton */])(new TestCase(0, Object(fable_library_3_7_17_String["c" /* isNullOrWhiteSpace */])(lastName) ? name : Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("%s - %s"))(lastName)(name), _arg.fields[1], _arg.fields[2]));\n      }\n  }\n}\nfunction Mocha_renderBrowserTests(hasFocusedTests, tests, padding) {\n  return Object(List["i" /* map */])(function (_arg) {\n    switch (_arg.tag) {\n      case 1:\n        {\n          var test_1 = _arg.fields[1];\n          var name_1 = _arg.fields[0];\n          var focus_1 = _arg.fields[2];\n          if (focus_1.tag === 1) {\n            return Html_simpleDiv(Object(List["j" /* ofArray */])([["class", "pending"], ["data-test", name_1], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:#B8860B"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("\\uD83D\\uDEA7 skipping \'%s\' due to it being marked as pending"))(name_1));\n          } else if (focus_1.tag === 2) {\n            return Mocha_runAsyncTestInBrowser(name_1, test_1, padding);\n          } else if (hasFocusedTests) {\n            return Html_simpleDiv(Object(List["j" /* ofArray */])([["class", "pending"], ["data-test", name_1], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:#B8860B"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("\\uD83D\\uDEA7 skipping \'%s\' due to other focused tests"))(name_1));\n          } else {\n            return Mocha_runAsyncTestInBrowser(name_1, test_1, padding);\n          }\n        }\n      case 2:\n        {\n          var name_2 = _arg.fields[0];\n          var tests_1 = Html_div(Object(List["d" /* empty */])(), Mocha_renderBrowserTests(hasFocusedTests, _arg.fields[1], padding + 10));\n          return Html_div(Object(List["d" /* empty */])(), Object(List["l" /* singleton */])(new Html_Node("div", Object(List["j" /* ofArray */])([["class", "module"], ["data-module", name_2], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:20px; padding:%dpx"))(padding)]]), name_2, Object(List["l" /* singleton */])(tests_1))));\n        }\n      case 3:\n        {\n          var name_3 = _arg.fields[0];\n          var xs = Object(List["b" /* choose */])(function (_arg_1) {\n            switch (_arg_1.tag) {\n              case 0:\n                {\n                  var focusedState = _arg_1.fields[2];\n                  var pattern_matching_result;\n                  if (focusedState.tag === 1) {\n                    pattern_matching_result = 1;\n                  } else if (focusedState.tag === 2) {\n                    pattern_matching_result = 2;\n                  } else if (hasFocusedTests) {\n                    pattern_matching_result = 0;\n                  } else {\n                    pattern_matching_result = 2;\n                  }\n                  switch (pattern_matching_result) {\n                    case 0:\n                      {\n                        return [AsyncBuilder_singleton.Delay(function () {\n                          return AsyncBuilder_singleton.Bind(sleep(10), function () {\n                            return AsyncBuilder_singleton.Return();\n                          });\n                        }), Html_simpleDiv(Object(List["j" /* ofArray */])([["class", "pending"], ["data-test", name_3], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:#B8860B"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("\\uD83D\\uDEA7 skipping \'%s\' due to other focused tests"))(name_3))];\n                      }\n                    case 1:\n                      {\n                        return [AsyncBuilder_singleton.Delay(function () {\n                          return AsyncBuilder_singleton.Bind(sleep(10), function () {\n                            return AsyncBuilder_singleton.Return();\n                          });\n                        }), Html_simpleDiv(Object(List["j" /* ofArray */])([["class", "pending"], ["data-test", name_3], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:#B8860B"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("\\uD83D\\uDEA7 skipping \'%s\' due to it being marked as pending"))(name_3))];\n                      }\n                    case 2:\n                      {\n                        return Mocha_runAsyncSequentialTestInBrowser(_arg_1.fields[0], AsyncBuilder_singleton.Delay(function () {\n                          return AsyncBuilder_singleton.Bind(sleep(10), function () {\n                            _arg_1.fields[1]();\n                            return AsyncBuilder_singleton.Zero();\n                          });\n                        }), padding + 10);\n                      }\n                  }\n                }\n              case 1:\n                {\n                  var focusedState_1 = _arg_1.fields[2];\n                  var pattern_matching_result_1;\n                  if (focusedState_1.tag === 1) {\n                    pattern_matching_result_1 = 1;\n                  } else if (focusedState_1.tag === 2) {\n                    pattern_matching_result_1 = 2;\n                  } else if (hasFocusedTests) {\n                    pattern_matching_result_1 = 0;\n                  } else {\n                    pattern_matching_result_1 = 2;\n                  }\n                  switch (pattern_matching_result_1) {\n                    case 0:\n                      {\n                        return [AsyncBuilder_singleton.Delay(function () {\n                          return AsyncBuilder_singleton.Bind(sleep(10), function () {\n                            return AsyncBuilder_singleton.Return();\n                          });\n                        }), Html_simpleDiv(Object(List["j" /* ofArray */])([["class", "pending"], ["data-test", name_3], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:#B8860B"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("\\uD83D\\uDEA7 skipping \'%s\' due to other focused tests"))(name_3))];\n                      }\n                    case 1:\n                      {\n                        return [AsyncBuilder_singleton.Delay(function () {\n                          return AsyncBuilder_singleton.Bind(sleep(10), function () {\n                            return AsyncBuilder_singleton.Return();\n                          });\n                        }), Html_simpleDiv(Object(List["j" /* ofArray */])([["class", "pending"], ["data-test", name_3], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:#B8860B"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("\\uD83D\\uDEA7 skipping \'%s\' due to it being marked as pending"))(name_3))];\n                      }\n                    case 2:\n                      {\n                        return Mocha_runAsyncSequentialTestInBrowser(_arg_1.fields[0], _arg_1.fields[1], padding + 10);\n                      }\n                  }\n                }\n              default:\n                {\n                  return void 0;\n                }\n            }\n          }, Mocha_flattenTests("", new TestCase(3, "", _arg.fields[1])));\n          var tests_2 = Html_div(Object(List["d" /* empty */])(), Object(List["i" /* map */])(function (tuple) {\n            return tuple[1];\n          }, xs));\n          var header_1 = new Html_Node("div", Object(List["j" /* ofArray */])([["class", "module"], ["data-module", name_3], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:20px; padding:%dpx"))(padding)]]), name_3, Object(List["l" /* singleton */])(tests_2));\n          var asyncOps = Object(List["i" /* map */])(function (tuple_1) {\n            return tuple_1[0];\n          }, xs);\n          startImmediate(ignore(AsyncBuilder_singleton.Delay(function () {\n            return AsyncBuilder_singleton.Combine(AsyncBuilder_singleton.For(asyncOps, function (_arg_7) {\n              return AsyncBuilder_singleton.Bind(_arg_7, function () {\n                return AsyncBuilder_singleton.Zero();\n              });\n            }), AsyncBuilder_singleton.Delay(function () {\n              return AsyncBuilder_singleton.Return();\n            }));\n          })));\n          return Html_div(Object(List["d" /* empty */])(), Object(List["l" /* singleton */])(header_1));\n        }\n      default:\n        {\n          var test = _arg.fields[1];\n          var name = _arg.fields[0];\n          var focus = _arg.fields[2];\n          if (focus.tag === 1) {\n            return Html_simpleDiv(Object(List["j" /* ofArray */])([["class", "pending"], ["data-test", name], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:#B8860B"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("\\uD83D\\uDEA7 skipping \'%s\' due to it being marked as pending"))(name));\n          } else if (focus.tag === 2) {\n            return Mocha_runSyncTestInBrowser(name, test, padding);\n          } else if (hasFocusedTests) {\n            return Html_simpleDiv(Object(List["j" /* ofArray */])([["class", "pending"], ["data-test", name], ["style", Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("font-size:16px; padding-left:%dpx; color:#B8860B"))(padding)]]), Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("\\uD83D\\uDEA7 skipping \'%s\' due to other focused tests"))(name));\n          } else {\n            return Mocha_runSyncTestInBrowser(name, test, padding);\n          }\n        }\n    }\n  }, tests);\n}\nfunction Mocha_configureAsyncTest(test, finished) {\n  startImmediate(AsyncBuilder_singleton.Delay(function () {\n    return AsyncBuilder_singleton.Bind(catchAsync(test), function (_arg) {\n      if (_arg.tag === 1) {\n        finished(_arg.fields[0]);\n        return AsyncBuilder_singleton.Zero();\n      } else {\n        finished();\n        return AsyncBuilder_singleton.Zero();\n      }\n    });\n  }));\n}\nfunction Mocha_invalidateTestResults() {\n  startImmediate(AsyncBuilder_singleton.Delay(function () {\n    var passedCount = document.getElementsByClassName("passed").length | 0;\n    var failedCount = document.getElementsByClassName("failed").length | 0;\n    var executingCount = document.getElementsByClassName("executing").length | 0;\n    var skippedCount = document.getElementsByClassName("pending").length | 0;\n    var total = passedCount + failedCount + executingCount + skippedCount | 0;\n    document.getElementById("total-tests").innerHTML = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("Test Results (%d total)"))(total);\n    document.getElementById("passed-tests").innerHTML = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("✔ %d passed"))(passedCount);\n    document.getElementById("failed-tests").innerHTML = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("✘ %d failed"))(failedCount);\n    document.getElementById("executing-tests").innerHTML = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("⏳ %d being executed (async)"))(executingCount);\n    document.getElementById("skipped-tests").innerHTML = Object(fable_library_3_7_17_String["h" /* toText */])(Object(fable_library_3_7_17_String["e" /* printf */])("🚧 %d pending"))(skippedCount);\n    return executingCount > 0 ? AsyncBuilder_singleton.Bind(sleep(50), function () {\n      Mocha_invalidateTestResults();\n      return AsyncBuilder_singleton.Zero();\n    }) : AsyncBuilder_singleton.Return();\n  }));\n}\nfunction Mocha_runViaMocha(test) {\n  switch (test.tag) {\n    case 1:\n      {\n        var test_2 = test.fields[1];\n        var msg_1 = test.fields[0];\n        var focus_1 = test.fields[2];\n        switch (focus_1.tag) {\n          case 1:\n            {\n              it.skip(msg_1, function (finished_1) {\n                Mocha_configureAsyncTest(test_2, finished_1);\n              });\n              break;\n            }\n          case 2:\n            {\n              it.only(msg_1, function (finished_2) {\n                Mocha_configureAsyncTest(test_2, finished_2);\n              });\n              break;\n            }\n          default:\n            {\n              it(msg_1, function (finished) {\n                Mocha_configureAsyncTest(test_2, finished);\n              });\n            }\n        }\n        break;\n      }\n    case 2:\n      {\n        describe(test.fields[0], function () {\n          Object(List["g" /* iterate */])(function (test_3) {\n            Mocha_runViaMocha(test_3);\n          }, test.fields[1]);\n        });\n        break;\n      }\n    case 3:\n      {\n        describe(test.fields[0], function () {\n          Object(List["g" /* iterate */])(function (test_4) {\n            Mocha_runViaMocha(test_4);\n          }, test.fields[1]);\n        });\n        break;\n      }\n    default:\n      {\n        var test_1 = test.fields[1];\n        var msg = test.fields[0];\n        var focus = test.fields[2];\n        switch (focus.tag) {\n          case 1:\n            {\n              it.skip(msg, test_1);\n              break;\n            }\n          case 2:\n            {\n              it.only(msg, test_1);\n              break;\n            }\n          default:\n            {\n              it(msg, test_1);\n            }\n        }\n      }\n  }\n}\nfunction Mocha_runViaDotnet(test) {\n  throw new Error("Currently not implemented, use Expecto for now.");\n  return 1;\n}\nfunction Mocha_runTests(test) {\n  if (Env_insideBrowser ? true : typeof WorkerGlobalScope !== \'undefined\' && self instanceof WorkerGlobalScope) {\n    var renderedTests = Mocha_renderBrowserTests(Mocha_isFocused(test), Object(List["l" /* singleton */])(test), 0);\n    var testResults = Html_div(Object(List["l" /* singleton */])(["style", "margin-bottom: 20px"]), Object(List["j" /* ofArray */])([Html_simpleDiv(Object(List["j" /* ofArray */])([["id", "total-tests"], ["style", "font-size:20px; margin-bottom:5px"]]), "Test Results"), Html_simpleDiv(Object(List["j" /* ofArray */])([["id", "passed-tests"], ["style", "color:green; margin-left:5px;"]]), "Passed"), Html_simpleDiv(Object(List["j" /* ofArray */])([["id", "skipped-tests"], ["style", "color:#B8860B"]]), "Pending"), Html_simpleDiv(Object(List["j" /* ofArray */])([["id", "failed-tests"], ["style", "color:red;margin-left:5px"]]), "Failed"), Html_simpleDiv(Object(List["j" /* ofArray */])([["id", "executing-tests"], ["style", "color:gray;margin-left:5px"]]), "Executing")]));\n    var element = Html_createNode(Html_div(Object(List["l" /* singleton */])(["style", "padding:20px;"]), toList(delay(function () {\n      return append(singleton(testResults), delay(function () {\n        return renderedTests;\n      }));\n    }))));\n    document.body.appendChild(element);\n    Mocha_invalidateTestResults();\n    return 0;\n  } else {\n    Mocha_runViaMocha(test);\n    return 0;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///102\n')},16:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return symbol; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isNumeric; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return compare; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return toFixed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return toPrecision; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return toExponential; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return toHex; });\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(25);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(46);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(31);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nvar symbol = Symbol("numeric");\nfunction isNumeric(x) {\n  return typeof x === "number" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nfunction compare(x, y) {\n  if (typeof x === "number") {\n    return x < y ? -1 : x > y ? 1 : 0;\n  } else {\n    return x.CompareTo(y);\n  }\n}\nfunction multiply(x, y) {\n  if (typeof x === "number") {\n    return x * y;\n  } else {\n    return x[symbol]().multiply(y);\n  }\n}\nfunction toFixed(x, dp) {\n  if (typeof x === "number") {\n    return x.toFixed(dp);\n  } else {\n    return x[symbol]().toFixed(dp);\n  }\n}\nfunction toPrecision(x, sd) {\n  if (typeof x === "number") {\n    return x.toPrecision(sd);\n  } else {\n    return x[symbol]().toPrecision(sd);\n  }\n}\nfunction toExponential(x, dp) {\n  if (typeof x === "number") {\n    return x.toExponential(dp);\n  } else {\n    return x[symbol]().toExponential(dp);\n  }\n}\nfunction toHex(x) {\n  if (typeof x === "number") {\n    return (Number(x) >>> 0).toString(16);\n  } else {\n    return x[symbol]().toHex();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXN0cy9mYWJsZV9tb2R1bGVzL2ZhYmxlLWxpYnJhcnkuMy43LjE3L051bWVyaWMuanM/NzkwOCJdLCJuYW1lcyI6WyJzeW1ib2wiLCJTeW1ib2wiLCJpc051bWVyaWMiLCJ4IiwiY29tcGFyZSIsInkiLCJDb21wYXJlVG8iLCJtdWx0aXBseSIsInRvRml4ZWQiLCJkcCIsInRvUHJlY2lzaW9uIiwic2QiLCJ0b0V4cG9uZW50aWFsIiwidG9IZXgiLCJOdW1iZXIiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTyxJQUFNQSxNQUFNLEdBQUdDLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDaEMsU0FBU0MsU0FBUyxDQUFDQyxDQUFDLEVBQUU7RUFDekIsT0FBTyxPQUFPQSxDQUFDLEtBQUssUUFBUSxLQUFLQSxDQUFDLEtBQUssSUFBSSxJQUFJQSxDQUFDLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLENBQUMsQ0FBQ0gsTUFBTSxDQUFDLENBQUM7QUFDckY7QUFDTyxTQUFTSSxPQUFPLENBQUNELENBQUMsRUFBRUUsQ0FBQyxFQUFFO0VBQzFCLElBQUksT0FBT0YsQ0FBQyxLQUFLLFFBQVEsRUFBRTtJQUN2QixPQUFPQSxDQUFDLEdBQUdFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBSUYsQ0FBQyxHQUFHRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUU7RUFDdkMsQ0FBQyxNQUNJO0lBQ0QsT0FBT0YsQ0FBQyxDQUFDRyxTQUFTLENBQUNELENBQUMsQ0FBQztFQUN6QjtBQUNKO0FBQ08sU0FBU0UsUUFBUSxDQUFDSixDQUFDLEVBQUVFLENBQUMsRUFBRTtFQUMzQixJQUFJLE9BQU9GLENBQUMsS0FBSyxRQUFRLEVBQUU7SUFDdkIsT0FBT0EsQ0FBQyxHQUFHRSxDQUFDO0VBQ2hCLENBQUMsTUFDSTtJQUNELE9BQU9GLENBQUMsQ0FBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQ08sUUFBUSxDQUFDRixDQUFDLENBQUM7RUFDbEM7QUFDSjtBQUNPLFNBQVNHLE9BQU8sQ0FBQ0wsQ0FBQyxFQUFFTSxFQUFFLEVBQUU7RUFDM0IsSUFBSSxPQUFPTixDQUFDLEtBQUssUUFBUSxFQUFFO0lBQ3ZCLE9BQU9BLENBQUMsQ0FBQ0ssT0FBTyxDQUFDQyxFQUFFLENBQUM7RUFDeEIsQ0FBQyxNQUNJO0lBQ0QsT0FBT04sQ0FBQyxDQUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDUSxPQUFPLENBQUNDLEVBQUUsQ0FBQztFQUNsQztBQUNKO0FBQ08sU0FBU0MsV0FBVyxDQUFDUCxDQUFDLEVBQUVRLEVBQUUsRUFBRTtFQUMvQixJQUFJLE9BQU9SLENBQUMsS0FBSyxRQUFRLEVBQUU7SUFDdkIsT0FBT0EsQ0FBQyxDQUFDTyxXQUFXLENBQUNDLEVBQUUsQ0FBQztFQUM1QixDQUFDLE1BQ0k7SUFDRCxPQUFPUixDQUFDLENBQUNILE1BQU0sQ0FBQyxFQUFFLENBQUNVLFdBQVcsQ0FBQ0MsRUFBRSxDQUFDO0VBQ3RDO0FBQ0o7QUFDTyxTQUFTQyxhQUFhLENBQUNULENBQUMsRUFBRU0sRUFBRSxFQUFFO0VBQ2pDLElBQUksT0FBT04sQ0FBQyxLQUFLLFFBQVEsRUFBRTtJQUN2QixPQUFPQSxDQUFDLENBQUNTLGFBQWEsQ0FBQ0gsRUFBRSxDQUFDO0VBQzlCLENBQUMsTUFDSTtJQUNELE9BQU9OLENBQUMsQ0FBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQ1ksYUFBYSxDQUFDSCxFQUFFLENBQUM7RUFDeEM7QUFDSjtBQUNPLFNBQVNJLEtBQUssQ0FBQ1YsQ0FBQyxFQUFFO0VBQ3JCLElBQUksT0FBT0EsQ0FBQyxLQUFLLFFBQVEsRUFBRTtJQUN2QixPQUFPLENBQUNXLE1BQU0sQ0FBQ1gsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFWSxRQUFRLENBQUMsRUFBRSxDQUFDO0VBQ3pDLENBQUMsTUFDSTtJQUNELE9BQU9aLENBQUMsQ0FBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQ2EsS0FBSyxFQUFFO0VBQzlCO0FBQ0oiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Qgc3ltYm9sID0gU3ltYm9sKFwibnVtZXJpY1wiKTtcbmV4cG9ydCBmdW5jdGlvbiBpc051bWVyaWMoeCkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiB8fCAoeCA9PT0gbnVsbCB8fCB4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB4W3N5bWJvbF0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmUoeCwgeSkge1xuICAgIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4geCA8IHkgPyAtMSA6ICh4ID4geSA/IDEgOiAwKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB4LkNvbXBhcmVUbyh5KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkoeCwgeSkge1xuICAgIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4geCAqIHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geFtzeW1ib2xdKCkubXVsdGlwbHkoeSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHRvRml4ZWQoeCwgZHApIHtcbiAgICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHgudG9GaXhlZChkcCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geFtzeW1ib2xdKCkudG9GaXhlZChkcCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHgsIHNkKSB7XG4gICAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB4LnRvUHJlY2lzaW9uKHNkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB4W3N5bWJvbF0oKS50b1ByZWNpc2lvbihzZCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHRvRXhwb25lbnRpYWwoeCwgZHApIHtcbiAgICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHgudG9FeHBvbmVudGlhbChkcCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geFtzeW1ib2xdKCkudG9FeHBvbmVudGlhbChkcCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHRvSGV4KHgpIHtcbiAgICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIChOdW1iZXIoeCkgPj4+IDApLnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB4W3N5bWJvbF0oKS50b0hleCgpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n')},2:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ Reflection_equals; });\n__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ class_type; });\n__webpack_require__.d(__webpack_exports__, "i", function() { return /* binding */ record_type; });\n__webpack_require__.d(__webpack_exports__, "l", function() { return /* binding */ union_type; });\n__webpack_require__.d(__webpack_exports__, "k", function() { return /* binding */ tuple_type; });\n__webpack_require__.d(__webpack_exports__, "f", function() { return /* binding */ lambda_type; });\n__webpack_require__.d(__webpack_exports__, "h", function() { return /* binding */ option_type; });\n__webpack_require__.d(__webpack_exports__, "g", function() { return /* binding */ list_type; });\n__webpack_require__.d(__webpack_exports__, "m", function() { return /* binding */ unit_type; });\n__webpack_require__.d(__webpack_exports__, "j", function() { return /* binding */ string_type; });\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ bool_type; });\n__webpack_require__.d(__webpack_exports__, "e", function() { return /* binding */ int32_type; });\n__webpack_require__.d(__webpack_exports__, "d", function() { return /* binding */ float64_type; });\n\n// UNUSED EXPORTS: CaseInfo, MethodInfo, TypeInfo, GenericParameter, getGenerics, getHashCode, anonRecord_type, delegate_type, array_type, enum_type, measure_type, generic_type, obj_type, char_type, int8_type, uint8_type, int16_type, uint16_type, uint32_type, float32_type, decimal_type, name, fullName, namespace, isArray, getElementType, isGenericType, isGenericParameter, isEnum, isSubclassOf, isInstanceOfType, getGenericTypeDefinition, getEnumUnderlyingType, getEnumValues, getEnumNames, parseEnum, tryParseEnum, getEnumName, isEnumDefined, getUnionCases, getRecordElements, getTupleElements, getFunctionElements, isUnion, isRecord, isTuple, isFunction, getUnionFields, getUnionCaseFields, getRecordFields, getRecordField, getTupleFields, getTupleField, makeUnion, makeRecord, makeTuple, makeGenericType, createInstance, getValue, getCaseTag, getCaseName, getCaseFields\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js\nvar es_array_map = __webpack_require__(112);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js\nvar es_array_concat = __webpack_require__(97);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.last-index-of.js\nvar es_array_last_index_of = __webpack_require__(207);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js\nvar es_array_includes = __webpack_require__(260);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js\nvar es_string_includes = __webpack_require__(261);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.parse-int.js\nvar es_parse_int = __webpack_require__(122);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.starts-with.js\nvar es_string_starts_with = __webpack_require__(262);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js\nvar es_object_keys = __webpack_require__(160);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reduce.js\nvar es_array_reduce = __webpack_require__(119);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.to-primitive.js\nvar es_symbol_to_primitive = __webpack_require__(36);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.date.to-primitive.js\nvar es_date_to_primitive = __webpack_require__(37);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __webpack_require__(25);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __webpack_require__(27);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js\nvar es_number_constructor = __webpack_require__(31);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-property.js\nvar es_object_define_property = __webpack_require__(35);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.set-prototype-of.js\nvar es_object_set_prototype_of = __webpack_require__(65);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-prototype-of.js\nvar es_object_get_prototype_of = __webpack_require__(60);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.construct.js\nvar es_reflect_construct = __webpack_require__(66);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __webpack_require__(28);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __webpack_require__(20);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __webpack_require__(24);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(29);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __webpack_require__(41);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __webpack_require__(39);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(42);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Types.js\nvar Types = __webpack_require__(8);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Util.js\nvar Util = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js\nvar es_regexp_to_string = __webpack_require__(46);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js\nvar es_string_trim = __webpack_require__(147);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint8-array.js\nvar es_typed_array_uint8_array = __webpack_require__(123);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.copy-within.js\nvar es_typed_array_copy_within = __webpack_require__(125);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.every.js\nvar es_typed_array_every = __webpack_require__(126);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.fill.js\nvar es_typed_array_fill = __webpack_require__(127);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.filter.js\nvar es_typed_array_filter = __webpack_require__(128);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find.js\nvar es_typed_array_find = __webpack_require__(129);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find-index.js\nvar es_typed_array_find_index = __webpack_require__(130);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.for-each.js\nvar es_typed_array_for_each = __webpack_require__(131);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.includes.js\nvar es_typed_array_includes = __webpack_require__(132);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.index-of.js\nvar es_typed_array_index_of = __webpack_require__(133);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.iterator.js\nvar es_typed_array_iterator = __webpack_require__(134);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.join.js\nvar es_typed_array_join = __webpack_require__(135);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.last-index-of.js\nvar es_typed_array_last_index_of = __webpack_require__(136);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.map.js\nvar es_typed_array_map = __webpack_require__(137);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce.js\nvar es_typed_array_reduce = __webpack_require__(138);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce-right.js\nvar es_typed_array_reduce_right = __webpack_require__(139);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reverse.js\nvar es_typed_array_reverse = __webpack_require__(140);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.set.js\nvar es_typed_array_set = __webpack_require__(141);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.slice.js\nvar es_typed_array_slice = __webpack_require__(142);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.some.js\nvar es_typed_array_some = __webpack_require__(143);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.sort.js\nvar es_typed_array_sort = __webpack_require__(144);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-locale-string.js\nvar es_typed_array_to_locale_string = __webpack_require__(145);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-string.js\nvar es_typed_array_to_string = __webpack_require__(146);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.from.js\nvar es_typed_array_from = __webpack_require__(277);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js\nvar es_array_index_of = __webpack_require__(67);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find-index.js\nvar es_array_find_index = __webpack_require__(219);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(68);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.search.js\nvar es_string_search = __webpack_require__(278);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.to-json.js\nvar web_url_to_json = __webpack_require__(218);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Numeric.js\nvar Numeric = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/lib/big.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Adapted from https://github.com/MikeMcl/big.js/blob/0f94dc9110d55c4f324a47ba6a2e832ce23ac589/big.mjs\n/* tslint:disable */\n\n\n// The shared prototype object.\nvar P = _defineProperty({\n  GetHashCode: function GetHashCode() {\n    return Object(Util["d" /* combineHashCodes */])([this.s, this.e].concat(this.c));\n  },\n  Equals: function Equals(x) {\n    return !this.cmp(x);\n  },\n  CompareTo: function CompareTo(x) {\n    return this.cmp(x);\n  }\n}, Numeric["d" /* symbol */], function () {\n  var _this = this;\n  return {\n    multiply: function multiply(y) {\n      return _this.mul(y);\n    },\n    toPrecision: function toPrecision(sd) {\n      return _this.toPrecision(sd);\n    },\n    toExponential: function toExponential(dp) {\n      return _this.toExponential(dp);\n    },\n    toFixed: function toFixed(dp) {\n      return _this.toFixed(dp);\n    },\n    toHex: function toHex() {\n      return (Number(_this) >>> 0).toString(16);\n    }\n  };\n});\n/*\n *  big.js v6.0.3\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2020 Michael Mclaughlin\n *  https://github.com/MikeMcl/big.js/LICENCE.md\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28,\n  // 0 to MAX_DP\n  /*\n   * The rounding mode (RM) used when rounding to the above decimal places.\n   *\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n   *  3  Away from zero.                                  (ROUND_UP)\n   */\n  RM = 1,\n  // 0, 1, 2 or 3\n  // The maximum value of DP and Big.DP.\n  MAX_DP = 1E6,\n  // 0 to 1000000\n  // The maximum magnitude of the exponent argument to the pow method.\n  MAX_POWER = 1E6,\n  // 1 to 1000000\n  /*\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\n   * (JavaScript numbers: -7)\n   * -1000000 is the minimum recommended exponent value of a Big.\n   */\n  NE = -29,\n  // 0 to -1000000\n  /*\n   * The positive exponent (PE) at and above which toString returns exponential notation.\n   * (JavaScript numbers: 21)\n   * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\n   */\n  PE = 29,\n  // 0 to 1000000\n  /*\n   * When true, an error will be thrown if a primitive number is passed to the Big constructor,\n   * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\n   * primitive number without a loss of precision.\n   */\n  STRICT = false,\n  // true or false\n  /**************************************************************************************************/\n  // Error messages.\n  NAME = \'[big.js] \',\n  INVALID = NAME + \'Invalid \',\n  INVALID_DP = INVALID + \'decimal places\',\n  INVALID_RM = INVALID + \'rounding mode\',\n  DIV_BY_ZERO = NAME + \'Division by zero\',\n  UNDEFINED = void 0,\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n */\nfunction _Big_() {\n  /*\n   * The Big constructor and exported function.\n   * Create and return a new instance of a Big number object.\n   *\n   * n {number|string|Big} A numeric value.\n   */\n  function Big(n) {\n    var x = this;\n    // Enable constructor usage without new.\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\n    // Duplicate.\n    if (n instanceof Big) {\n      x.s = n.s;\n      x.e = n.e;\n      x.c = n.c.slice();\n      normalize(x);\n    } else {\n      if (typeof n !== \'string\') {\n        if (Big.strict === true) {\n          throw TypeError(INVALID + \'number\');\n        }\n        // Minus zero?\n        n = n === 0 && 1 / n < 0 ? \'-0\' : String(n);\n      }\n      parse(x, n);\n    }\n    // Retain a reference to this Big constructor.\n    // Shadow Big.prototype.constructor which points to Object.\n    x.constructor = Big;\n  }\n  Big.prototype = P;\n  Big.DP = DP;\n  Big.RM = RM;\n  Big.NE = NE;\n  Big.PE = PE;\n  Big.strict = STRICT;\n  return Big;\n}\nfunction normalize(x) {\n  // x = round(x, DP, 0);\n  if (x.c.length > 1 && !x.c[0]) {\n    var i = x.c.findIndex(function (x) {\n      return x;\n    });\n    x.c = x.c.slice(i);\n    x.e = x.e - i;\n  }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n  var e, i, nl;\n  if (!NUMERIC.test(n)) {\n    throw Error(INVALID + \'number\');\n  }\n  // Determine sign.\n  x.s = n.charAt(0) == \'-\' ? (n = n.slice(1), -1) : 1;\n  // Decimal point?\n  if ((e = n.indexOf(\'.\')) > -1) n = n.replace(\'.\', \'\');\n  // Exponential form?\n  if ((i = n.search(/e/i)) > 0) {\n    // Determine exponent.\n    if (e < 0) e = i;\n    e += +n.slice(i + 1);\n    n = n.substring(0, i);\n  } else if (e < 0) {\n    // Integer.\n    e = n.length;\n  }\n  nl = n.length;\n  // Determine leading zeros before decimal point.\n  for (i = 0; i < e && i < nl && n.charAt(i) == \'0\';) ++i;\n  // original version (ignores decimal point).\n  // // Determine leading zeros.\n  // for (i = 0; i < nl && n.charAt(i) == \'0\';) ++i;\n  if (i == nl) {\n    // Zero.\n    x.c = [x.e = 0];\n  } else {\n    x.e = e - i - 1;\n    x.c = [];\n    // Convert string to array of digits without leading zeros\n    for (e = 0; i < nl;) x.c[e++] = +n.charAt(i++);\n    // older version (doesn\'t keep trailing zeroes).\n    // // Determine trailing zeros.\n    // for (; nl > 0 && n.charAt(--nl) == \'0\';);\n    // // Convert string to array of digits without leading/trailing zeros.\n    // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n  }\n\n  x = round(x, Big.DP + 1, Big.RM);\n  return x;\n}\n/*\n * Round Big x to a maximum of sd significant digits using rounding mode rm.\n *\n * x {Big} The Big to round.\n * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\n * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, sd, rm, more) {\n  var xc = x.c;\n  if (rm === UNDEFINED) rm = Big.RM;\n  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\n    throw Error(INVALID_RM);\n  }\n  if (sd < 1) {\n    more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));\n    xc.length = 1;\n    if (more) {\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n      x.e = x.e - sd + 1;\n      xc[0] = 1;\n    } else {\n      // Zero.\n      xc[0] = x.e = 0;\n    }\n  } else if (sd < xc.length) {\n    // xc[sd] is the digit after the digit that may be rounded up.\n    var isZero = xc.findIndex(function (xci, idx) {\n      return idx >= sd && xci > 0;\n    }) < 0;\n    more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !isZero);\n    // Remove any digits after the required precision.\n    xc.length = sd--;\n    // Round up?\n    if (more) {\n      // Rounding up may mean the previous digit has to be rounded up.\n      for (; ++xc[sd] > 9;) {\n        xc[sd] = 0;\n        if (!sd--) {\n          ++x.e;\n          xc.unshift(1);\n        }\n      }\n    }\n    // Remove trailing zeros.\n    for (sd = xc.length; !xc[--sd];) xc.pop();\n  }\n  return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n */\nfunction stringify(x, doExponential, isNonzero) {\n  var e = x.e,\n    s = x.c.join(\'\'),\n    n = s.length;\n  // Exponential notation?\n  if (doExponential) {\n    s = s.charAt(0) + (n > 1 ? \'.\' + s.slice(1) : \'\') + (e < 0 ? \'e\' : \'e+\') + e;\n    // Normal notation.\n  } else if (e < 0) {\n    for (; ++e;) s = \'0\' + s;\n    s = \'0.\' + s;\n  } else if (e > 0) {\n    if (++e > n) {\n      for (e -= n; e--;) s += \'0\';\n    } else if (e < n) {\n      s = s.slice(0, e) + \'.\' + s.slice(e);\n    }\n  } else if (n > 1) {\n    s = s.charAt(0) + \'.\' + s.slice(1);\n  }\n  return x.s < 0 && isNonzero ? \'-\' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n  var x = new this.constructor(this);\n  x.s = 1;\n  return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n */\nP.cmp = function (y) {\n  var isneg,\n    Big = this.constructor,\n    x = new Big(this),\n    y = new Big(y),\n    xc = x.c,\n    yc = y.c,\n    i = x.s,\n    j = y.s,\n    k = x.e,\n    l = y.e;\n  // Either zero?\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\n  // Signs differ?\n  if (i != j) return i;\n  isneg = i < 0;\n  // Compare exponents.\n  if (k != l) return k > l ^ isneg ? 1 : -1;\n  // Compare digit by digit.\n  j = Math.max(xc.length, yc.length);\n  for (i = 0; i < j; i++) {\n    k = i < xc.length ? xc[i] : 0;\n    l = i < yc.length ? yc[i] : 0;\n    if (k != l) return k > l ^ isneg ? 1 : -1;\n  }\n  return 0;\n  // original version (doesn\'t compare well trailing zeroes, e.g. 1.0 with 1.00)\n  // j = (k = xc.length) < (l = yc.length) ? k : l;\n  // // Compare digit by digit.\n  // for (i = -1; ++i < j;) {\n  //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n  // }\n  // // Compare lengths.\n  // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n  var Big = this.constructor,\n    x = new Big(this),\n    y = new Big(y),\n    a = x.c,\n    // dividend\n    b = y.c,\n    // divisor\n    k = x.s == y.s ? 1 : -1,\n    dp = Big.DP;\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n    throw Error(INVALID_DP);\n  }\n  // Divisor is zero?\n  if (!b[0]) {\n    throw Error(DIV_BY_ZERO);\n  }\n  // Dividend is 0? Return +-0.\n  if (!a[0]) {\n    y.s = k;\n    y.c = [y.e = 0];\n    return y;\n  }\n  var bl,\n    bt,\n    n,\n    cmp,\n    ri,\n    bz = b.slice(),\n    ai = bl = b.length,\n    al = a.length,\n    r = a.slice(0, bl),\n    // remainder\n    rl = r.length,\n    q = y,\n    // quotient\n    qc = q.c = [],\n    qi = 0,\n    p = dp + (q.e = x.e - y.e) + 1; // precision of the result\n  q.s = k;\n  k = p < 0 ? 0 : p;\n  // Create version of divisor with leading zero.\n  bz.unshift(0);\n  // Add zeros to make remainder as long as divisor.\n  for (; rl++ < bl;) r.push(0);\n  do {\n    // n is how many times the divisor goes into current remainder.\n    for (n = 0; n < 10; n++) {\n      // Compare divisor and remainder.\n      if (bl != (rl = r.length)) {\n        cmp = bl > rl ? 1 : -1;\n      } else {\n        for (ri = -1, cmp = 0; ++ri < bl;) {\n          if (b[ri] != r[ri]) {\n            cmp = b[ri] > r[ri] ? 1 : -1;\n            break;\n          }\n        }\n      }\n      // If divisor < remainder, subtract divisor from remainder.\n      if (cmp < 0) {\n        // Remainder can\'t be more than 1 digit longer than divisor.\n        // Equalise lengths using divisor with extra leading zero?\n        for (bt = rl == bl ? b : bz; rl;) {\n          if (r[--rl] < bt[rl]) {\n            ri = rl;\n            for (; ri && !r[--ri];) r[ri] = 9;\n            --r[ri];\n            r[rl] += 10;\n          }\n          r[rl] -= bt[rl];\n        }\n        for (; !r[0];) r.shift();\n      } else {\n        break;\n      }\n    }\n    // Add the digit n to the result array.\n    qc[qi++] = cmp ? n : ++n;\n    // Update the remainder.\n    if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\n  if (!qc[0] && qi != 1) {\n    // There can\'t be more than one zero.\n    qc.shift();\n    q.e--;\n    p--;\n  }\n  // Round?\n  if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\n  return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n  return this.cmp(y) === 0;\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n  return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n  return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n  return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n  return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n  var i,\n    j,\n    t,\n    xlty,\n    Big = this.constructor,\n    x = new Big(this),\n    y = new Big(y),\n    a = x.s,\n    b = y.s;\n  // Signs differ?\n  if (a != b) {\n    y.s = -b;\n    return x.plus(y);\n  }\n  var xc = x.c.slice(),\n    xe = x.e,\n    yc = y.c,\n    ye = y.e;\n  // Either zero?\n  if (!xc[0] || !yc[0]) {\n    if (yc[0]) {\n      y.s = -b;\n    } else if (xc[0]) {\n      y = new Big(x);\n    } else {\n      y.s = 1;\n    }\n    return y;\n  }\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\n  if (a = xe - ye) {\n    if (xlty = a < 0) {\n      a = -a;\n      t = xc;\n    } else {\n      ye = xe;\n      t = yc;\n    }\n    t.reverse();\n    for (b = a; b--;) t.push(0);\n    t.reverse();\n  } else {\n    // Exponents equal. Check digit by digit.\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n    for (a = b = 0; b < j; b++) {\n      if (xc[b] != yc[b]) {\n        xlty = xc[b] < yc[b];\n        break;\n      }\n    }\n  }\n  // x < y? Point xc to the array of the bigger number.\n  if (xlty) {\n    t = xc;\n    xc = yc;\n    yc = t;\n    y.s = -y.s;\n  }\n  /*\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n   * needs to start at yc.length.\n   */\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\n  // Subtract yc from xc.\n  for (b = i; j > a;) {\n    if (xc[--j] < yc[j]) {\n      for (i = j; i && !xc[--i];) xc[i] = 9;\n      --xc[i];\n      xc[j] += 10;\n    }\n    xc[j] -= yc[j];\n  }\n  // Remove trailing zeros.\n  for (; xc[--b] === 0;) xc.pop();\n  // Remove leading zeros and adjust exponent accordingly.\n  for (; xc[0] === 0;) {\n    xc.shift();\n    --ye;\n  }\n  if (!xc[0]) {\n    // n - n = +0\n    y.s = 1;\n    // Result must be zero.\n    xc = [ye = 0];\n  }\n  y.c = xc;\n  y.e = ye;\n  return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n  var ygtx,\n    Big = this.constructor,\n    x = new Big(this),\n    y = new Big(y),\n    a = x.s,\n    b = y.s;\n  if (!y.c[0]) {\n    throw Error(DIV_BY_ZERO);\n  }\n  x.s = y.s = 1;\n  ygtx = y.cmp(x) == 1;\n  x.s = a;\n  y.s = b;\n  if (ygtx) return new Big(x);\n  a = Big.DP;\n  b = Big.RM;\n  Big.DP = Big.RM = 0;\n  x = x.div(y);\n  Big.DP = a;\n  Big.RM = b;\n  return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n  var e,\n    k,\n    t,\n    Big = this.constructor,\n    x = new Big(this),\n    y = new Big(y);\n  // Signs differ?\n  if (x.s != y.s) {\n    y.s = -y.s;\n    return x.minus(y);\n  }\n  var xe = x.e,\n    xc = x.c,\n    ye = y.e,\n    yc = y.c;\n  // Either zero?\n  if (!xc[0] || !yc[0]) {\n    if (!yc[0]) {\n      if (xc[0]) {\n        y = new Big(x);\n      } else {\n        y.s = x.s;\n      }\n    }\n    return y;\n  }\n  xc = xc.slice();\n  // Prepend zeros to equalise exponents.\n  // Note: reverse faster than unshifts.\n  if (e = xe - ye) {\n    if (e > 0) {\n      ye = xe;\n      t = yc;\n    } else {\n      e = -e;\n      t = xc;\n    }\n    t.reverse();\n    for (; e--;) t.push(0);\n    t.reverse();\n  }\n  // Point xc to the longer array.\n  if (xc.length - yc.length < 0) {\n    t = yc;\n    yc = xc;\n    xc = t;\n  }\n  e = yc.length;\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n  for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n  if (k) {\n    xc.unshift(k);\n    ++ye;\n  }\n  // Remove trailing zeros.\n  for (e = xc.length; xc[--e] === 0;) xc.pop();\n  y.c = xc;\n  y.e = ye;\n  return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n  var Big = this.constructor,\n    x = new Big(this),\n    y = new Big(\'1\'),\n    one = new Big(\'1\'),\n    isneg = n < 0;\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\n    throw Error(INVALID + \'exponent\');\n  }\n  if (isneg) n = -n;\n  for (;;) {\n    if (n & 1) y = y.times(x);\n    n >>= 1;\n    if (!n) break;\n    x = x.times(x);\n  }\n  return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\n * significant digits using rounding mode rm, or Big.RM if rm is not specified.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.prec = function (sd, rm) {\n  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n    throw Error(INVALID + \'precision\');\n  }\n  return round(new this.constructor(this), sd, rm);\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\n * using rounding mode rm, or Big.RM if rm is not specified.\n * If dp is negative, round to an integer which is a multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.round = function (dp, rm) {\n  if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\n    throw Error(INVALID_DP);\n  }\n  return round(new this.constructor(this), dp + this.e + 1, rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n  var r,\n    c,\n    t,\n    Big = this.constructor,\n    x = new Big(this),\n    s = x.s,\n    e = x.e,\n    half = new Big(\'0.5\');\n  // Zero?\n  if (!x.c[0]) return new Big(x);\n  // Negative?\n  if (s < 0) {\n    throw Error(NAME + \'No square root\');\n  }\n  // Estimate.\n  s = Math.sqrt(x + \'\');\n  // Math.sqrt underflow/overflow?\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n  if (s === 0 || s === 1 / 0) {\n    c = x.c.join(\'\');\n    if (!(c.length + e & 1)) c += \'0\';\n    s = Math.sqrt(c);\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n    r = new Big((s == 1 / 0 ? \'5e\' : (s = s.toExponential()).slice(0, s.indexOf(\'e\') + 1)) + e);\n  } else {\n    r = new Big(s + \'\');\n  }\n  e = r.e + (Big.DP += 4);\n  // Newton-Raphson iteration.\n  do {\n    t = r;\n    r = half.times(t.plus(x.div(t)));\n  } while (t.c.slice(0, e).join(\'\') !== r.c.slice(0, e).join(\'\'));\n  return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n  var c,\n    Big = this.constructor,\n    x = new Big(this),\n    y = new Big(y),\n    xc = x.c,\n    yc = y.c,\n    a = xc.length,\n    b = yc.length,\n    i = x.e,\n    j = y.e;\n  // Determine sign of result.\n  y.s = x.s == y.s ? 1 : -1;\n  // Return signed 0 if either 0.\n  if (!xc[0] || !yc[0]) {\n    y.c = [y.e = 0];\n    return y;\n  }\n  // Initialise exponent of result as x.e + y.e.\n  y.e = i + j;\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n  if (a < b) {\n    c = xc;\n    xc = yc;\n    yc = c;\n    j = a;\n    a = b;\n    b = j;\n  }\n  // Initialise coefficient array of result with zeros.\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\n  // Multiply.\n  // i is initially xc.length.\n  for (i = b; i--;) {\n    b = 0;\n    // a is yc.length.\n    for (j = a + i; j > i;) {\n      // Current sum of products at this digit position, plus carry.\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\n      c[j--] = b % 10;\n      // carry\n      b = b / 10 | 0;\n    }\n    c[j] = b;\n  }\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\n  if (b) ++y.e;else c.shift();\n  // Remove trailing zeros.\n  for (i = c.length; !c[--i];) c.pop();\n  y.c = c;\n  return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toExponential = function (dp, rm) {\n  var x = this,\n    n = x.c[0];\n  if (dp !== UNDEFINED) {\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n      throw Error(INVALID_DP);\n    }\n    x = round(new x.constructor(x), ++dp, rm);\n    for (; x.c.length < dp;) x.c.push(0);\n  }\n  return stringify(x, true, !!n);\n};\n/*\n * Return a string representing the value of this Big in normal notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n *\n * (-0).toFixed(0) is \'0\', but (-0.1).toFixed(0) is \'-0\'.\n * (-0).toFixed(1) is \'0.0\', but (-0.01).toFixed(1) is \'-0.0\'.\n */\nP.toFixed = function (dp, rm) {\n  var x = this,\n    n = x.c[0];\n  if (dp !== UNDEFINED) {\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n      throw Error(INVALID_DP);\n    }\n    x = round(new x.constructor(x), dp + x.e + 1, rm);\n    // x.e may have changed if the value is rounded up.\n    for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\n  }\n  return stringify(x, false, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toJSON = P.toString = function () {\n  var x = this,\n    Big = x.constructor;\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\n};\n/*\n * Return the value of this Big as a primitve number.\n */\nP.toNumber = function () {\n  var n = Number(stringify(this, true, true));\n  if (this.constructor.strict === true && !this.eq(n.toString())) {\n    throw Error(NAME + \'Imprecise conversion\');\n  }\n  return n;\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * rounding mode rm, or Big.RM if rm is not specified.\n * Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toPrecision = function (sd, rm) {\n  var x = this,\n    Big = x.constructor,\n    n = x.c[0];\n  if (sd !== UNDEFINED) {\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n      throw Error(INVALID + \'precision\');\n    }\n    x = round(new Big(x), sd, rm);\n    for (; x.c.length < sd;) x.c.push(0);\n  }\n  return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = function () {\n  var x = this,\n    Big = x.constructor;\n  if (Big.strict === true) {\n    throw Error(NAME + \'valueOf disallowed\');\n  }\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\n};\n// Export\nvar Big = _Big_();\n/// <reference types="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts" />\n/* harmony default export */ var lib_big = (Big);\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/Decimal.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var Decimal = (lib_big);\nvar get_Zero = new lib_big(0);\nvar get_One = new lib_big(1);\nvar get_MinusOne = new lib_big(-1);\nvar get_MaxValue = new lib_big("79228162514264337593543950335");\nvar get_MinValue = new lib_big("-79228162514264337593543950335");\nfunction compare(x, y) {\n  return x.cmp(y);\n}\nfunction equals(x, y) {\n  return !x.cmp(y);\n}\nfunction abs(x) {\n  return x.abs();\n}\nfunction Decimal_round(x) {\n  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\n\nfunction truncate(x) {\n  return x.round(0, 0 /* ROUND_DOWN */);\n}\n\nfunction ceiling(x) {\n  return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\n\nfunction floor(x) {\n  return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\n\nfunction pow(x, n) {\n  return x.pow(n);\n}\nfunction sqrt(x) {\n  return x.sqrt();\n}\nfunction op_Addition(x, y) {\n  return x.add(y);\n}\nfunction op_Subtraction(x, y) {\n  return x.sub(y);\n}\nfunction op_Multiply(x, y) {\n  return x.mul(y);\n}\nfunction op_Division(x, y) {\n  return x.div(y);\n}\nfunction op_Modulus(x, y) {\n  return x.mod(y);\n}\nfunction op_UnaryNegation(x) {\n  var x2 = new lib_big(x);\n  x2.s = -x2.s || 0;\n  return x2;\n}\nvar add = op_Addition;\nvar subtract = op_Subtraction;\nvar multiply = op_Multiply;\nvar divide = op_Division;\nvar remainder = op_Modulus;\nvar negate = op_UnaryNegation;\nfunction Decimal_toString(x) {\n  return x.toString();\n}\nfunction tryParse(str, defValue) {\n  try {\n    defValue.contents = new lib_big(str.trim());\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\nfunction Decimal_parse(str) {\n  var defValue = new Types["b" /* FSharpRef */](get_Zero);\n  if (tryParse(str, defValue)) {\n    return defValue.contents;\n  } else {\n    throw new Error("Input string was not in a correct format.");\n  }\n}\nfunction toNumber(x) {\n  return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n  var hex = new Uint8Array(bitSize / 4 | 0);\n  var hexCount = 1;\n  for (var d = 0; d < dec.length; d++) {\n    var value = dec[d];\n    for (var i = 0; i < hexCount; i++) {\n      var digit = hex[i] * 10 + value | 0;\n      hex[i] = digit & 0xF;\n      value = digit >> 4;\n    }\n    if (value !== 0) {\n      hex[hexCount++] = value;\n    }\n  }\n  return hex.slice(0, hexCount); // digits in reverse order\n}\n\nfunction hexToDecimal(hex, bitSize) {\n  var dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n  var decCount = 1;\n  for (var d = hex.length - 1; d >= 0; d--) {\n    var carry = hex[d];\n    for (var i = 0; i < decCount; i++) {\n      var val = dec[i] * 16 + carry | 0;\n      dec[i] = val % 10 | 0;\n      carry = val / 10 | 0;\n    }\n    while (carry > 0) {\n      dec[decCount++] = carry % 10 | 0;\n      carry = carry / 10 | 0;\n    }\n  }\n  return dec.slice(0, decCount); // digits in reverse order\n}\n\nfunction setInt32Bits(hexDigits, bits, offset) {\n  for (var i = 0; i < 8; i++) {\n    hexDigits[offset + i] = bits >> i * 4 & 0xF;\n  }\n}\nfunction getInt32Bits(hexDigits, offset) {\n  var bits = 0;\n  for (var i = 0; i < 8; i++) {\n    bits = bits | hexDigits[offset + i] << i * 4;\n  }\n  return bits;\n}\nfunction fromIntArray(bits) {\n  return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nfunction fromInts(low, mid, high, signExp) {\n  var isNegative = signExp < 0;\n  var scale = signExp >> 16 & 0x7F;\n  return fromParts(low, mid, high, isNegative, scale);\n}\nfunction fromParts(low, mid, high, isNegative, scale) {\n  var bitSize = 96;\n  var hexDigits = new Uint8Array(bitSize / 4);\n  setInt32Bits(hexDigits, low, 0);\n  setInt32Bits(hexDigits, mid, 8);\n  setInt32Bits(hexDigits, high, 16);\n  var decDigits = hexToDecimal(hexDigits, bitSize);\n  scale = scale & 0x7F;\n  var big = new lib_big(0);\n  big.c = Array.from(decDigits.reverse());\n  big.e = decDigits.length - scale - 1;\n  big.s = isNegative ? -1 : 1;\n  var d = new lib_big(big);\n  return d;\n}\nfunction getBits(d) {\n  var bitSize = 96;\n  var decDigits = Uint8Array.from(d.c);\n  var hexDigits = decimalToHex(decDigits, bitSize);\n  var low = getInt32Bits(hexDigits, 0);\n  var mid = getInt32Bits(hexDigits, 8);\n  var high = getInt32Bits(hexDigits, 16);\n  var decStr = d.toString();\n  var dotPos = decStr.indexOf(".");\n  var scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n  var signExp = (scale & 0x7F) << 16 | (d.s < 0 ? 0x80000000 : 0);\n  return [low, mid, high, signExp];\n}\n// export function makeRangeStepFunction(step: Decimal, last: Decimal) {\n//   const stepComparedWithZero = step.cmp(get_Zero);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error("The step of a range cannot be zero");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Decimal) => {\n//     const comparedWithLast = x.cmp(last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Long.js + 2 modules\nvar Long = __webpack_require__(81);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/Reflection.js\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction Reflection_typeof(obj) { "@babel/helpers - typeof"; return Reflection_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Reflection_typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (Reflection_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Reflection_toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Reflection_toPropertyKey(arg) { var key = Reflection_toPrimitive(arg, "string"); return Reflection_typeof(key) === "symbol" ? key : String(key); }\nfunction Reflection_toPrimitive(input, hint) { if (Reflection_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Reflection_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\n\n\n\nvar CaseInfo = /*#__PURE__*/_createClass(function CaseInfo(declaringType, tag, name, fields) {\n  _classCallCheck(this, CaseInfo);\n  this.declaringType = declaringType;\n  this.tag = tag;\n  this.name = name;\n  this.fields = fields;\n});\nvar MethodInfo = /*#__PURE__*/_createClass(function MethodInfo(name, parameters, returnType) {\n  _classCallCheck(this, MethodInfo);\n  this.name = name;\n  this.parameters = parameters;\n  this.returnType = returnType;\n});\nvar TypeInfo = /*#__PURE__*/function () {\n  function TypeInfo(fullname, generics, construct, parent, fields, cases, enumCases) {\n    _classCallCheck(this, TypeInfo);\n    this.fullname = fullname;\n    this.generics = generics;\n    this.construct = construct;\n    this.parent = parent;\n    this.fields = fields;\n    this.cases = cases;\n    this.enumCases = enumCases;\n  }\n  _createClass(TypeInfo, [{\n    key: "toString",\n    value: function toString() {\n      return fullName(this);\n    }\n  }, {\n    key: "GetHashCode",\n    value: function GetHashCode() {\n      return getHashCode(this);\n    }\n  }, {\n    key: "Equals",\n    value: function Equals(other) {\n      return Reflection_equals(this, other);\n    }\n  }]);\n  return TypeInfo;\n}();\nvar GenericParameter = /*#__PURE__*/function (_TypeInfo) {\n  _inherits(GenericParameter, _TypeInfo);\n  var _super = _createSuper(GenericParameter);\n  function GenericParameter(name) {\n    _classCallCheck(this, GenericParameter);\n    return _super.call(this, name);\n  }\n  return _createClass(GenericParameter);\n}(TypeInfo);\nfunction getGenerics(t) {\n  return t.generics != null ? t.generics : [];\n}\nfunction getHashCode(t) {\n  var fullnameHash = Object(Util["x" /* stringHash */])(t.fullname);\n  var genHashes = getGenerics(t).map(getHashCode);\n  return Object(Util["d" /* combineHashCodes */])([fullnameHash].concat(_toConsumableArray(genHashes)));\n}\nfunction Reflection_equals(t1, t2) {\n  if (t1.fullname === "") {\n    // Anonymous records\n    return t2.fullname === "" && Object(Util["l" /* equalArraysWith */])(getRecordElements(t1), getRecordElements(t2), function (_ref, _ref2) {\n      var _ref3 = _slicedToArray(_ref, 2),\n        k1 = _ref3[0],\n        v1 = _ref3[1];\n      var _ref4 = _slicedToArray(_ref2, 2),\n        k2 = _ref4[0],\n        v2 = _ref4[1];\n      return k1 === k2 && Reflection_equals(v1, v2);\n    });\n  } else {\n    return t1.fullname === t2.fullname && Object(Util["l" /* equalArraysWith */])(getGenerics(t1), getGenerics(t2), Reflection_equals);\n  }\n}\nfunction class_type(fullname, generics, construct, parent) {\n  return new TypeInfo(fullname, generics, construct, parent);\n}\nfunction record_type(fullname, generics, construct, fields) {\n  return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nfunction anonRecord_type() {\n  for (var _len = arguments.length, fields = new Array(_len), _key = 0; _key < _len; _key++) {\n    fields[_key] = arguments[_key];\n  }\n  return new TypeInfo("", undefined, undefined, undefined, function () {\n    return fields;\n  });\n}\nfunction union_type(fullname, generics, construct, cases) {\n  var t = new TypeInfo(fullname, generics, construct, undefined, undefined, function () {\n    var caseNames = construct.prototype.cases();\n    return cases().map(function (fields, i) {\n      return new CaseInfo(t, i, caseNames[i], fields);\n    });\n  });\n  return t;\n}\nfunction tuple_type() {\n  for (var _len2 = arguments.length, generics = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    generics[_key2] = arguments[_key2];\n  }\n  return new TypeInfo("System.Tuple`" + generics.length, generics);\n}\nfunction delegate_type() {\n  for (var _len3 = arguments.length, generics = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    generics[_key3] = arguments[_key3];\n  }\n  return new TypeInfo("System.Func`" + generics.length, generics);\n}\nfunction lambda_type(argType, returnType) {\n  return new TypeInfo("Microsoft.FSharp.Core.FSharpFunc`2", [argType, returnType]);\n}\nfunction option_type(generic) {\n  return new TypeInfo("Microsoft.FSharp.Core.FSharpOption`1", [generic]);\n}\nfunction list_type(generic) {\n  return new TypeInfo("Microsoft.FSharp.Collections.FSharpList`1", [generic]);\n}\nfunction array_type(generic) {\n  return new TypeInfo("[]", [generic]);\n}\nfunction enum_type(fullname, underlyingType, enumCases) {\n  return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nfunction measure_type(fullname) {\n  return new TypeInfo(fullname);\n}\nfunction generic_type(name) {\n  return new GenericParameter(name);\n}\nvar obj_type = new TypeInfo("System.Object");\nvar unit_type = new TypeInfo("Microsoft.FSharp.Core.Unit");\nvar char_type = new TypeInfo("System.Char");\nvar string_type = new TypeInfo("System.String");\nvar bool_type = new TypeInfo("System.Boolean");\nvar int8_type = new TypeInfo("System.SByte");\nvar uint8_type = new TypeInfo("System.Byte");\nvar int16_type = new TypeInfo("System.Int16");\nvar uint16_type = new TypeInfo("System.UInt16");\nvar int32_type = new TypeInfo("System.Int32");\nvar uint32_type = new TypeInfo("System.UInt32");\nvar float32_type = new TypeInfo("System.Single");\nvar float64_type = new TypeInfo("System.Double");\nvar decimal_type = new TypeInfo("System.Decimal");\nfunction Reflection_name(info) {\n  if (Array.isArray(info)) {\n    return info[0];\n  } else if (info instanceof TypeInfo) {\n    var elemType = getElementType(info);\n    if (elemType != null) {\n      return Reflection_name(elemType) + "[]";\n    } else {\n      var i = info.fullname.lastIndexOf(".");\n      return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n  } else {\n    return info.name;\n  }\n}\nfunction fullName(t) {\n  var elemType = getElementType(t);\n  if (elemType != null) {\n    return fullName(elemType) + "[]";\n  } else if (t.generics == null || t.generics.length === 0) {\n    return t.fullname;\n  } else {\n    return t.fullname + "[" + t.generics.map(function (x) {\n      return fullName(x);\n    }).join(",") + "]";\n  }\n}\nfunction namespace(t) {\n  var elemType = getElementType(t);\n  if (elemType != null) {\n    return namespace(elemType);\n  } else {\n    var i = t.fullname.lastIndexOf(".");\n    return i === -1 ? "" : t.fullname.substr(0, i);\n  }\n}\nfunction isArray(t) {\n  return getElementType(t) != null;\n}\nfunction getElementType(t) {\n  var _a;\n  return t.fullname === "[]" && ((_a = t.generics) === null || _a === void 0 ? void 0 : _a.length) === 1 ? t.generics[0] : undefined;\n}\nfunction isGenericType(t) {\n  return t.generics != null && t.generics.length > 0;\n}\nfunction isGenericParameter(t) {\n  return t instanceof GenericParameter;\n}\nfunction isEnum(t) {\n  return t.enumCases != null && t.enumCases.length > 0;\n}\nfunction isSubclassOf(t1, t2) {\n  return t2.fullname === obj_type.fullname || t1.parent != null && (t1.parent.Equals(t2) || isSubclassOf(t1.parent, t2));\n}\nfunction isErasedToNumber(t) {\n  return isEnum(t) || [int8_type.fullname, uint8_type.fullname, int16_type.fullname, uint16_type.fullname, int32_type.fullname, uint32_type.fullname, float32_type.fullname, float64_type.fullname].includes(t.fullname);\n}\nfunction isInstanceOfType(t, o) {\n  if (t.fullname === obj_type.fullname) return true;\n  switch (Reflection_typeof(o)) {\n    case "boolean":\n      return t.fullname === bool_type.fullname;\n    case "string":\n      return t.fullname === string_type.fullname;\n    case "function":\n      return isFunction(t);\n    case "number":\n      return isErasedToNumber(t);\n    default:\n      return t.construct != null && o instanceof t.construct;\n  }\n}\n/**\n * This doesn\'t replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nfunction getGenericTypeDefinition(t) {\n  return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(function () {\n    return obj_type;\n  }));\n}\nfunction getEnumUnderlyingType(t) {\n  var _a;\n  return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nfunction getEnumValues(t) {\n  if (isEnum(t) && t.enumCases != null) {\n    return t.enumCases.map(function (kv) {\n      return kv[1];\n    });\n  } else {\n    throw new Error("".concat(t.fullname, " is not an enum type"));\n  }\n}\nfunction getEnumNames(t) {\n  if (isEnum(t) && t.enumCases != null) {\n    return t.enumCases.map(function (kv) {\n      return kv[0];\n    });\n  } else {\n    throw new Error("".concat(t.fullname, " is not an enum type"));\n  }\n}\nfunction getEnumCase(t, v) {\n  if (t.enumCases != null) {\n    if (typeof v === "string") {\n      var _iterator = _createForOfIteratorHelper(t.enumCases),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var kv = _step.value;\n          if (kv[0] === v) {\n            return kv;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      throw new Error("\'".concat(v, "\' was not found in ").concat(t.fullname));\n    } else {\n      var _iterator2 = _createForOfIteratorHelper(t.enumCases),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _kv = _step2.value;\n          if (_kv[1] === v) {\n            return _kv;\n          }\n        }\n        // .NET returns the number even if it doesn\'t match any of the cases\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return ["", v];\n    }\n  } else {\n    throw new Error("".concat(t.fullname, " is not an enum type"));\n  }\n}\nfunction parseEnum(t, str) {\n  // TODO: better int parsing here, parseInt ceils floats: "4.8" -> 4\n  var value = parseInt(str, 10);\n  return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nfunction tryParseEnum(t, str, defValue) {\n  try {\n    defValue.contents = parseEnum(t, str);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\nfunction getEnumName(t, v) {\n  return getEnumCase(t, v)[0];\n}\nfunction isEnumDefined(t, v) {\n  try {\n    var kv = getEnumCase(t, v);\n    return kv[0] != null && kv[0] !== "";\n  } catch (_a) {\n    // supress error\n  }\n  return false;\n}\n// FSharpType\nfunction getUnionCases(t) {\n  if (t.cases != null) {\n    return t.cases();\n  } else {\n    throw new Error("".concat(t.fullname, " is not an F# union type"));\n  }\n}\nfunction getRecordElements(t) {\n  if (t.fields != null) {\n    return t.fields();\n  } else {\n    throw new Error("".concat(t.fullname, " is not an F# record type"));\n  }\n}\nfunction getTupleElements(t) {\n  if (isTuple(t) && t.generics != null) {\n    return t.generics;\n  } else {\n    throw new Error("".concat(t.fullname, " is not a tuple type"));\n  }\n}\nfunction getFunctionElements(t) {\n  if (isFunction(t) && t.generics != null) {\n    var gen = t.generics;\n    return [gen[0], gen[1]];\n  } else {\n    throw new Error("".concat(t.fullname, " is not an F# function type"));\n  }\n}\nfunction isUnion(t) {\n  return t instanceof TypeInfo ? t.cases != null : t instanceof Types["d" /* Union */];\n}\nfunction isRecord(t) {\n  return t instanceof TypeInfo ? t.fields != null : t instanceof Types["c" /* Record */];\n}\nfunction isTuple(t) {\n  return t.fullname.startsWith("System.Tuple");\n}\n// In .NET this is false for delegates\nfunction isFunction(t) {\n  return t.fullname === "Microsoft.FSharp.Core.FSharpFunc`2";\n}\n// FSharpValue\nfunction getUnionFields(v, t) {\n  var cases = getUnionCases(t);\n  var case_ = cases[v.tag];\n  if (case_ == null) {\n    throw new Error("Cannot find case ".concat(v.name, " in union type"));\n  }\n  return [case_, v.fields];\n}\nfunction getUnionCaseFields(uci) {\n  return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nfunction getRecordFields(v) {\n  return Object.keys(v).map(function (k) {\n    return v[k];\n  });\n}\nfunction getRecordField(v, field) {\n  return v[field[0]];\n}\nfunction getTupleFields(v) {\n  return v;\n}\nfunction getTupleField(v, i) {\n  return v[i];\n}\nfunction makeUnion(uci, values) {\n  var expectedLength = (uci.fields || []).length;\n  if (values.length !== expectedLength) {\n    throw new Error("Expected an array of length ".concat(expectedLength, " but got ").concat(values.length));\n  }\n  return uci.declaringType.construct != null ? _construct(uci.declaringType.construct, [uci.tag].concat(_toConsumableArray(values))) : {};\n}\nfunction makeRecord(t, values) {\n  var fields = getRecordElements(t);\n  if (fields.length !== values.length) {\n    throw new Error("Expected an array of length ".concat(fields.length, " but got ").concat(values.length));\n  }\n  return t.construct != null ? _construct(t.construct, _toConsumableArray(values)) : fields.reduce(function (obj, _ref5, i) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      key = _ref6[0],\n      _t = _ref6[1];\n    obj[key] = values[i];\n    return obj;\n  }, {});\n}\nfunction makeTuple(values, _t) {\n  return values;\n}\nfunction makeGenericType(t, generics) {\n  return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nfunction createInstance(t, consArgs) {\n  // TODO: Check if consArgs length is same as t.construct?\n  // (Arg types can still be different)\n  if (typeof t.construct === "function") {\n    return _construct(t.construct, _toConsumableArray(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n  } else if (isErasedToNumber(t)) {\n    return 0;\n  } else {\n    switch (t.fullname) {\n      case obj_type.fullname:\n        return {};\n      case bool_type.fullname:\n        return false;\n      case "System.Int64":\n      case "System.UInt64":\n        // typeof<int64> and typeof<uint64> get transformed to class_type("System.Int64")\n        // and class_type("System.UInt64") respectively. Test for the name of the primitive type.\n        return Object(Long["a" /* fromInt */])(0);\n      case decimal_type.fullname:\n        return new Decimal(0);\n      case char_type.fullname:\n        // Even though char is a value type, it\'s erased to string, and Unchecked.defaultof<char> is null\n        return null;\n      default:\n        throw new Error("Cannot access constructor of ".concat(t.fullname));\n    }\n  }\n}\nfunction getValue(propertyInfo, v) {\n  return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n  if (!(x instanceof Types["d" /* Union */])) {\n    throw new Error("Value is not an F# union type");\n  }\n}\nfunction getCaseTag(x) {\n  assertUnion(x);\n  return x.tag;\n}\nfunction getCaseName(x) {\n  assertUnion(x);\n  return x.cases()[x.tag];\n}\nfunction getCaseFields(x) {\n  assertUnion(x);\n  return x.fields;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},229:function(Q,U,F){Q.exports=F(230)},230:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appTests", function() { return appTests; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allTests", function() { return allTests; });\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39);\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(25);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(28);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(20);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(24);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(29);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _fable_modules_Fable_Mocha_2_9_1_Mocha_fs_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(102);\n/* harmony import */ var _fable_modules_fable_library_3_7_17_Util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(0);\n/* harmony import */ var _fable_modules_fable_library_3_7_17_List_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(3);\n/* harmony import */ var _fable_modules_fable_library_3_7_17_Reflection_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(2);\n/* harmony import */ var _fable_modules_fable_library_3_7_17_String_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(1);\n\n\n\n\n\n\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\n\n\n\n\nfunction add(x, y) {\n  return x + y;\n}\nvar appTests = Object(_fable_modules_Fable_Mocha_2_9_1_Mocha_fs_js__WEBPACK_IMPORTED_MODULE_8__[/* Test_testList */ "c"])("App tests", Object(_fable_modules_fable_library_3_7_17_List_js__WEBPACK_IMPORTED_MODULE_10__[/* singleton */ "l"])(Object(_fable_modules_Fable_Mocha_2_9_1_Mocha_fs_js__WEBPACK_IMPORTED_MODULE_8__[/* Test_testCase */ "b"])("add works", function () {\n  var copyOfStruct;\n  var actual = add(2, 3) | 0;\n  var expected = 5;\n  var msg = "Result must be 5";\n  if (actual === expected ? true : !new Function("try {return this===window;}catch(e){ return false;}")()) {\n    Object(_fable_modules_fable_library_3_7_17_Util_js__WEBPACK_IMPORTED_MODULE_9__[/* assertEqual */ "a"])(actual, expected, msg);\n  } else {\n    var errorMsg;\n    if (Object(_fable_modules_fable_library_3_7_17_List_js__WEBPACK_IMPORTED_MODULE_10__[/* contains */ "c"])((copyOfStruct = actual, _fable_modules_fable_library_3_7_17_Reflection_js__WEBPACK_IMPORTED_MODULE_11__[/* int32_type */ "e"]), Object(_fable_modules_fable_library_3_7_17_List_js__WEBPACK_IMPORTED_MODULE_10__[/* ofArray */ "j"])([_fable_modules_fable_library_3_7_17_Reflection_js__WEBPACK_IMPORTED_MODULE_11__[/* int32_type */ "e"], _fable_modules_fable_library_3_7_17_Reflection_js__WEBPACK_IMPORTED_MODULE_11__[/* bool_type */ "a"], _fable_modules_fable_library_3_7_17_Reflection_js__WEBPACK_IMPORTED_MODULE_11__[/* float64_type */ "d"], _fable_modules_fable_library_3_7_17_Reflection_js__WEBPACK_IMPORTED_MODULE_11__[/* string_type */ "j"], Object(_fable_modules_fable_library_3_7_17_Reflection_js__WEBPACK_IMPORTED_MODULE_11__[/* class_type */ "b"])("System.Decimal"), Object(_fable_modules_fable_library_3_7_17_Reflection_js__WEBPACK_IMPORTED_MODULE_11__[/* class_type */ "b"])("System.Guid")]), {\n      Equals: _fable_modules_fable_library_3_7_17_Reflection_js__WEBPACK_IMPORTED_MODULE_11__[/* equals */ "c"],\n      GetHashCode: _fable_modules_fable_library_3_7_17_Util_js__WEBPACK_IMPORTED_MODULE_9__[/* structuralHash */ "y"]\n    })) {\n      var arg_1 = Object(_fable_modules_fable_library_3_7_17_Util_js__WEBPACK_IMPORTED_MODULE_9__[/* int32ToString */ "o"])(actual);\n      var arg = Object(_fable_modules_fable_library_3_7_17_Util_js__WEBPACK_IMPORTED_MODULE_9__[/* int32ToString */ "o"])(expected);\n      errorMsg = Object(_fable_modules_fable_library_3_7_17_String_js__WEBPACK_IMPORTED_MODULE_12__[/* toText */ "h"])(Object(_fable_modules_fable_library_3_7_17_String_js__WEBPACK_IMPORTED_MODULE_12__[/* printf */ "e"])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%s</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%s</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(arg)(arg_1)(msg);\n    } else {\n      errorMsg = Object(_fable_modules_fable_library_3_7_17_String_js__WEBPACK_IMPORTED_MODULE_12__[/* toText */ "h"])(Object(_fable_modules_fable_library_3_7_17_String_js__WEBPACK_IMPORTED_MODULE_12__[/* printf */ "e"])("<span style=\'color:black\'>Expected:</span> <br /><div style=\'margin-left:20px; color:crimson\'>%A</div><br /><span style=\'color:black\'>Actual:</span> </br ><div style=\'margin-left:20px;color:crimson\'>%A</div><br /><span style=\'color:black\'>Message:</span> </br ><div style=\'margin-left:20px; color:crimson\'>%s</div>"))(expected)(actual)(msg);\n    }\n    throw new Error(errorMsg);\n  }\n})));\nvar allTests = Object(_fable_modules_Fable_Mocha_2_9_1_Mocha_fs_js__WEBPACK_IMPORTED_MODULE_8__[/* Test_testList */ "c"])("All", Object(_fable_modules_fable_library_3_7_17_List_js__WEBPACK_IMPORTED_MODULE_10__[/* singleton */ "l"])(appTests));\n(function (args) {\n  return Object(_fable_modules_Fable_Mocha_2_9_1_Mocha_fs_js__WEBPACK_IMPORTED_MODULE_8__[/* Mocha_runTests */ "a"])(allTests);\n})((typeof process === "undefined" ? "undefined" : _typeof(process)) === \'object\' ? process.argv.slice(2) : []);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(231)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXN0cy9UZXN0cy5mcy5qcz82M2I4Il0sIm5hbWVzIjpbImFkZCIsIngiLCJ5IiwiYXBwVGVzdHMiLCJUZXN0X3Rlc3RMaXN0Iiwic2luZ2xldG9uIiwiVGVzdF90ZXN0Q2FzZSIsImNvcHlPZlN0cnVjdCIsImFjdHVhbCIsImV4cGVjdGVkIiwibXNnIiwiRnVuY3Rpb24iLCJhc3NlcnRFcXVhbCIsImVycm9yTXNnIiwiY29udGFpbnMiLCJpbnQzMl90eXBlIiwib2ZBcnJheSIsImJvb2xfdHlwZSIsImZsb2F0NjRfdHlwZSIsInN0cmluZ190eXBlIiwiY2xhc3NfdHlwZSIsIkVxdWFscyIsImVxdWFscyIsIkdldEhhc2hDb2RlIiwic3RydWN0dXJhbEhhc2giLCJhcmdfMSIsImludDMyVG9TdHJpbmciLCJhcmciLCJ0b1RleHQiLCJwcmludGYiLCJFcnJvciIsImFsbFRlc3RzIiwiYXJncyIsIk1vY2hhX3J1blRlc3RzIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE2RztBQUNIO0FBQ2Q7QUFDOEM7QUFDMUQ7QUFFekUsU0FBU0EsR0FBRyxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUN0QixPQUFPRCxDQUFDLEdBQUdDLENBQUM7QUFDaEI7QUFFTyxJQUFNQyxRQUFRLEdBQUdDLDBHQUFhLENBQUMsV0FBVyxFQUFFQyxzR0FBUyxDQUFDQywwR0FBYSxDQUFDLFdBQVcsRUFBRSxZQUFNO0VBQzFGLElBQUlDLFlBQVk7RUFDaEIsSUFBTUMsTUFBTSxHQUFHUixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7RUFDNUIsSUFBTVMsUUFBUSxHQUFHLENBQUM7RUFDbEIsSUFBTUMsR0FBRyxHQUFHLGtCQUFrQjtFQUM5QixJQUFLRixNQUFNLEtBQUtDLFFBQVEsR0FBSSxJQUFJLEdBQUksQ0FBRSxJQUFJRSxRQUFRLENBQUMscURBQXFELENBQUMsRUFBSSxFQUFFO0lBQzNHQyx1R0FBVyxDQUFDSixNQUFNLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxDQUFDO0VBQ3RDLENBQUMsTUFDSTtJQUNELElBQUlHLFFBQVE7SUFDWixJQUFJQyxxR0FBUSxFQUFFUCxZQUFZLEdBQUdDLE1BQU0sRUFBRU8scUdBQVUsR0FBR0Msb0dBQU8sQ0FBQyxDQUFDRCxxR0FBVSxFQUFFRSxvR0FBUyxFQUFFQyx1R0FBWSxFQUFFQyxzR0FBVyxFQUFFQyw2R0FBVSxDQUFDLGdCQUFnQixDQUFDLEVBQUVBLDZHQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ3BLQyxNQUFNLEVBQUVDLGlHQUFNO01BQ2RDLFdBQVcsRUFBRUMsa0dBQWNBO0lBQy9CLENBQUMsQ0FBQyxFQUFFO01BQ0EsSUFBTUMsS0FBSyxHQUFHQyx5R0FBYSxDQUFDbEIsTUFBTSxDQUFDO01BQ25DLElBQU1tQixHQUFHLEdBQUdELHlHQUFhLENBQUNqQixRQUFRLENBQUM7TUFDbkNJLFFBQVEsR0FBR2UscUdBQU0sQ0FBQ0MscUdBQU0sQ0FBQyw0VEFBa2lCLENBQUMsQ0FBQyxDQUFDRixHQUFHLENBQUMsQ0FBQ0YsS0FBSyxDQUFDLENBQUNmLEdBQUcsQ0FBQztJQUNsbEIsQ0FBQyxNQUNJO01BQ0RHLFFBQVEsR0FBR2UscUdBQU0sQ0FBQ0MscUdBQU0sQ0FBQyw0VEFBa2lCLENBQUMsQ0FBQyxDQUFDcEIsUUFBUSxDQUFDLENBQUNELE1BQU0sQ0FBQyxDQUFDRSxHQUFHLENBQUM7SUFDeGxCO0lBQ0EsTUFBTyxJQUFJb0IsS0FBSyxDQUFDakIsUUFBUSxDQUFDO0VBQzlCO0FBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVHLElBQU1rQixRQUFRLEdBQUczQiwwR0FBYSxDQUFDLEtBQUssRUFBRUMsc0dBQVMsQ0FBQ0YsUUFBUSxDQUFDLENBQUM7QUFFakUsQ0FBQyxVQUFVNkIsSUFBSSxFQUFFO0VBQ2IsT0FBT0MsMkdBQWMsQ0FBQ0YsUUFBUSxDQUFDO0FBQ25DLENBQUMsRUFBRSxRQUFPRyxPQUFPLHlDQUFQQSxPQUFPLE9BQUssUUFBUSxHQUFHQSxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDIiwiZmlsZSI6IjIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vY2hhX3J1blRlc3RzLCBUZXN0X3Rlc3RDYXNlLCBUZXN0X3Rlc3RMaXN0IH0gZnJvbSBcIi4vZmFibGVfbW9kdWxlcy9GYWJsZS5Nb2NoYS4yLjkuMS9Nb2NoYS5mcy5qc1wiO1xuaW1wb3J0IHsgaW50MzJUb1N0cmluZywgc3RydWN0dXJhbEhhc2gsIGFzc2VydEVxdWFsIH0gZnJvbSBcIi4vZmFibGVfbW9kdWxlcy9mYWJsZS1saWJyYXJ5LjMuNy4xNy9VdGlsLmpzXCI7XG5pbXBvcnQgeyBzaW5nbGV0b24sIG9mQXJyYXksIGNvbnRhaW5zIH0gZnJvbSBcIi4vZmFibGVfbW9kdWxlcy9mYWJsZS1saWJyYXJ5LjMuNy4xNy9MaXN0LmpzXCI7XG5pbXBvcnQgeyBlcXVhbHMsIGNsYXNzX3R5cGUsIHN0cmluZ190eXBlLCBmbG9hdDY0X3R5cGUsIGJvb2xfdHlwZSwgaW50MzJfdHlwZSB9IGZyb20gXCIuL2ZhYmxlX21vZHVsZXMvZmFibGUtbGlicmFyeS4zLjcuMTcvUmVmbGVjdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJpbnRmLCB0b1RleHQgfSBmcm9tIFwiLi9mYWJsZV9tb2R1bGVzL2ZhYmxlLWxpYnJhcnkuMy43LjE3L1N0cmluZy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKHgsIHkpIHtcbiAgICByZXR1cm4geCArIHk7XG59XG5cbmV4cG9ydCBjb25zdCBhcHBUZXN0cyA9IFRlc3RfdGVzdExpc3QoXCJBcHAgdGVzdHNcIiwgc2luZ2xldG9uKFRlc3RfdGVzdENhc2UoXCJhZGQgd29ya3NcIiwgKCkgPT4ge1xuICAgIGxldCBjb3B5T2ZTdHJ1Y3Q7XG4gICAgY29uc3QgYWN0dWFsID0gYWRkKDIsIDMpIHwgMDtcbiAgICBjb25zdCBleHBlY3RlZCA9IDU7XG4gICAgY29uc3QgbXNnID0gXCJSZXN1bHQgbXVzdCBiZSA1XCI7XG4gICAgaWYgKChhY3R1YWwgPT09IGV4cGVjdGVkKSA/IHRydWUgOiAoIShuZXcgRnVuY3Rpb24oXCJ0cnkge3JldHVybiB0aGlzPT09d2luZG93O31jYXRjaChlKXsgcmV0dXJuIGZhbHNlO31cIikpKCkpKSB7XG4gICAgICAgIGFzc2VydEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1zZyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgZXJyb3JNc2c7XG4gICAgICAgIGlmIChjb250YWlucygoY29weU9mU3RydWN0ID0gYWN0dWFsLCBpbnQzMl90eXBlKSwgb2ZBcnJheShbaW50MzJfdHlwZSwgYm9vbF90eXBlLCBmbG9hdDY0X3R5cGUsIHN0cmluZ190eXBlLCBjbGFzc190eXBlKFwiU3lzdGVtLkRlY2ltYWxcIiksIGNsYXNzX3R5cGUoXCJTeXN0ZW0uR3VpZFwiKV0pLCB7XG4gICAgICAgICAgICBFcXVhbHM6IGVxdWFscyxcbiAgICAgICAgICAgIEdldEhhc2hDb2RlOiBzdHJ1Y3R1cmFsSGFzaCxcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ18xID0gaW50MzJUb1N0cmluZyhhY3R1YWwpO1xuICAgICAgICAgICAgY29uc3QgYXJnID0gaW50MzJUb1N0cmluZyhleHBlY3RlZCk7XG4gICAgICAgICAgICBlcnJvck1zZyA9IHRvVGV4dChwcmludGYoXCJcXHUwMDNjc3BhbiBzdHlsZT1cXHUwMDI3Y29sb3I6YmxhY2tcXHUwMDI3XFx1MDAzZUV4cGVjdGVkOlxcdTAwM2Mvc3BhblxcdTAwM2UgXFx1MDAzY2JyIC9cXHUwMDNlXFx1MDAzY2RpdiBzdHlsZT1cXHUwMDI3bWFyZ2luLWxlZnQ6MjBweDsgY29sb3I6Y3JpbXNvblxcdTAwMjdcXHUwMDNlJXNcXHUwMDNjL2RpdlxcdTAwM2VcXHUwMDNjYnIgL1xcdTAwM2VcXHUwMDNjc3BhbiBzdHlsZT1cXHUwMDI3Y29sb3I6YmxhY2tcXHUwMDI3XFx1MDAzZUFjdHVhbDpcXHUwMDNjL3NwYW5cXHUwMDNlIFxcdTAwM2MvYnIgXFx1MDAzZVxcdTAwM2NkaXYgc3R5bGU9XFx1MDAyN21hcmdpbi1sZWZ0OjIwcHg7Y29sb3I6Y3JpbXNvblxcdTAwMjdcXHUwMDNlJXNcXHUwMDNjL2RpdlxcdTAwM2VcXHUwMDNjYnIgL1xcdTAwM2VcXHUwMDNjc3BhbiBzdHlsZT1cXHUwMDI3Y29sb3I6YmxhY2tcXHUwMDI3XFx1MDAzZU1lc3NhZ2U6XFx1MDAzYy9zcGFuXFx1MDAzZSBcXHUwMDNjL2JyIFxcdTAwM2VcXHUwMDNjZGl2IHN0eWxlPVxcdTAwMjdtYXJnaW4tbGVmdDoyMHB4OyBjb2xvcjpjcmltc29uXFx1MDAyN1xcdTAwM2Ulc1xcdTAwM2MvZGl2XFx1MDAzZVwiKSkoYXJnKShhcmdfMSkobXNnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yTXNnID0gdG9UZXh0KHByaW50ZihcIlxcdTAwM2NzcGFuIHN0eWxlPVxcdTAwMjdjb2xvcjpibGFja1xcdTAwMjdcXHUwMDNlRXhwZWN0ZWQ6XFx1MDAzYy9zcGFuXFx1MDAzZSBcXHUwMDNjYnIgL1xcdTAwM2VcXHUwMDNjZGl2IHN0eWxlPVxcdTAwMjdtYXJnaW4tbGVmdDoyMHB4OyBjb2xvcjpjcmltc29uXFx1MDAyN1xcdTAwM2UlQVxcdTAwM2MvZGl2XFx1MDAzZVxcdTAwM2NiciAvXFx1MDAzZVxcdTAwM2NzcGFuIHN0eWxlPVxcdTAwMjdjb2xvcjpibGFja1xcdTAwMjdcXHUwMDNlQWN0dWFsOlxcdTAwM2Mvc3BhblxcdTAwM2UgXFx1MDAzYy9iciBcXHUwMDNlXFx1MDAzY2RpdiBzdHlsZT1cXHUwMDI3bWFyZ2luLWxlZnQ6MjBweDtjb2xvcjpjcmltc29uXFx1MDAyN1xcdTAwM2UlQVxcdTAwM2MvZGl2XFx1MDAzZVxcdTAwM2NiciAvXFx1MDAzZVxcdTAwM2NzcGFuIHN0eWxlPVxcdTAwMjdjb2xvcjpibGFja1xcdTAwMjdcXHUwMDNlTWVzc2FnZTpcXHUwMDNjL3NwYW5cXHUwMDNlIFxcdTAwM2MvYnIgXFx1MDAzZVxcdTAwM2NkaXYgc3R5bGU9XFx1MDAyN21hcmdpbi1sZWZ0OjIwcHg7IGNvbG9yOmNyaW1zb25cXHUwMDI3XFx1MDAzZSVzXFx1MDAzYy9kaXZcXHUwMDNlXCIpKShleHBlY3RlZCkoYWN0dWFsKShtc2cpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IChuZXcgRXJyb3IoZXJyb3JNc2cpKTtcbiAgICB9XG59KSkpO1xuXG5leHBvcnQgY29uc3QgYWxsVGVzdHMgPSBUZXN0X3Rlc3RMaXN0KFwiQWxsXCIsIHNpbmdsZXRvbihhcHBUZXN0cykpO1xuXG4oZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICByZXR1cm4gTW9jaGFfcnVuVGVzdHMoYWxsVGVzdHMpO1xufSkodHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnID8gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpIDogW10pO1xuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///230\n')},3:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FSharpList; });\n/* unused harmony export FSharpList$reflection */\n/* unused harmony export ListEnumerator$1 */\n/* unused harmony export ListEnumerator$1$reflection */\n/* unused harmony export ListEnumerator$1_$ctor_3002E699 */\n/* unused harmony export FSharpList_get_Empty */\n/* unused harmony export FSharpList_Cons_305B8EAC */\n/* unused harmony export FSharpList__get_IsEmpty */\n/* unused harmony export FSharpList__get_Length */\n/* unused harmony export FSharpList__get_Head */\n/* unused harmony export FSharpList__get_Tail */\n/* unused harmony export FSharpList__get_Item_Z524259A4 */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return empty; });\n/* unused harmony export cons */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return singleton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return isEmpty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return length; });\n/* unused harmony export head */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return tryHead; });\n/* unused harmony export tail */\n/* unused harmony export tryLast */\n/* unused harmony export last */\n/* unused harmony export compareWith */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return toArray; });\n/* unused harmony export fold */\n/* unused harmony export reverse */\n/* unused harmony export foldBack */\n/* unused harmony export foldIndexed */\n/* unused harmony export fold2 */\n/* unused harmony export foldBack2 */\n/* unused harmony export unfold */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return iterate; });\n/* unused harmony export iterate2 */\n/* unused harmony export iterateIndexed */\n/* unused harmony export iterateIndexed2 */\n/* unused harmony export toSeq */\n/* unused harmony export ofArrayWithTail */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return ofArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return ofSeq; });\n/* unused harmony export concat */\n/* unused harmony export scan */\n/* unused harmony export scanBack */\n/* unused harmony export append */\n/* unused harmony export collect */\n/* unused harmony export mapIndexed */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return map; });\n/* unused harmony export indexed */\n/* unused harmony export map2 */\n/* unused harmony export mapIndexed2 */\n/* unused harmony export map3 */\n/* unused harmony export mapFold */\n/* unused harmony export mapFoldBack */\n/* unused harmony export tryPick */\n/* unused harmony export pick */\n/* unused harmony export tryFind */\n/* unused harmony export find */\n/* unused harmony export tryFindBack */\n/* unused harmony export findBack */\n/* unused harmony export tryFindIndex */\n/* unused harmony export findIndex */\n/* unused harmony export tryFindIndexBack */\n/* unused harmony export findIndexBack */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return tryItem; });\n/* unused harmony export item */\n/* unused harmony export filter */\n/* unused harmony export partition */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return choose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return contains; });\n/* unused harmony export initialize */\n/* unused harmony export replicate */\n/* unused harmony export reduce */\n/* unused harmony export reduceBack */\n/* unused harmony export forAll */\n/* unused harmony export forAll2 */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return exists; });\n/* unused harmony export exists2 */\n/* unused harmony export unzip */\n/* unused harmony export unzip3 */\n/* unused harmony export zip */\n/* unused harmony export zip3 */\n/* unused harmony export sortWith */\n/* unused harmony export sort */\n/* unused harmony export sortBy */\n/* unused harmony export sortDescending */\n/* unused harmony export sortByDescending */\n/* unused harmony export sum */\n/* unused harmony export sumBy */\n/* unused harmony export maxBy */\n/* unused harmony export max */\n/* unused harmony export minBy */\n/* unused harmony export min */\n/* unused harmony export average */\n/* unused harmony export averageBy */\n/* unused harmony export permute */\n/* unused harmony export chunkBySize */\n/* unused harmony export allPairs */\n/* unused harmony export skip */\n/* unused harmony export skipWhile */\n/* unused harmony export take */\n/* unused harmony export takeWhile */\n/* unused harmony export truncate */\n/* unused harmony export getSlice */\n/* unused harmony export splitAt */\n/* unused harmony export exactlyOne */\n/* unused harmony export tryExactlyOne */\n/* unused harmony export where */\n/* unused harmony export pairwise */\n/* unused harmony export windowed */\n/* unused harmony export splitInto */\n/* unused harmony export transpose */\n/* unused harmony export insertAt */\n/* unused harmony export insertManyAt */\n/* unused harmony export removeAt */\n/* unused harmony export removeManyAt */\n/* unused harmony export updateAt */\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(24);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(19);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(29);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(25);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(27);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(280);\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(121);\n/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(65);\n/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(60);\n/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(66);\n/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(35);\n/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(36);\n/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(37);\n/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(31);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _String_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(1);\n/* harmony import */ var _Util_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(0);\n/* harmony import */ var _Types_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(8);\n/* harmony import */ var _Reflection_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(2);\n/* harmony import */ var _Global_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(7);\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(4);\n/* harmony import */ var _Array_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(10);\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\n\nvar FSharpList = /*#__PURE__*/function (_Record, _Symbol$iterator) {\n  _inherits(FSharpList, _Record);\n  var _super = _createSuper(FSharpList);\n  function FSharpList(head, tail) {\n    var _this;\n    _classCallCheck(this, FSharpList);\n    _this = _super.call(this);\n    _this.head = head;\n    _this.tail = tail;\n    return _this;\n  }\n  _createClass(FSharpList, [{\n    key: "toString",\n    value: function toString() {\n      var xs = this;\n      return "[" + Object(_String_js__WEBPACK_IMPORTED_MODULE_17__[/* join */ "d"])("; ", xs) + "]";\n    }\n  }, {\n    key: "Equals",\n    value: function Equals(other) {\n      var xs = this;\n      if (xs === other) {\n        return true;\n      } else {\n        var loop = function loop(xs_1_mut, ys_1_mut) {\n          loop: while (true) {\n            var xs_1 = xs_1_mut,\n              ys_1 = ys_1_mut;\n            var matchValue = [xs_1.tail, ys_1.tail];\n            if (matchValue[0] != null) {\n              if (matchValue[1] != null) {\n                var xt = matchValue[0];\n                var yt = matchValue[1];\n                if (Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* equals */ "m"])(xs_1.head, ys_1.head)) {\n                  xs_1_mut = xt;\n                  ys_1_mut = yt;\n                  continue loop;\n                } else {\n                  return false;\n                }\n              } else {\n                return false;\n              }\n            } else if (matchValue[1] != null) {\n              return false;\n            } else {\n              return true;\n            }\n            break;\n          }\n        };\n        return loop(xs, other);\n      }\n    }\n  }, {\n    key: "GetHashCode",\n    value: function GetHashCode() {\n      var xs = this;\n      var loop = function loop(i_mut, h_mut, xs_1_mut) {\n        loop: while (true) {\n          var i = i_mut,\n            h = h_mut,\n            xs_1 = xs_1_mut;\n          var matchValue = xs_1.tail;\n          if (matchValue != null) {\n            var t = matchValue;\n            if (i > 18) {\n              return h | 0;\n            } else {\n              i_mut = i + 1;\n              h_mut = (h << 1) + Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* structuralHash */ "y"])(xs_1.head) + 631 * i;\n              xs_1_mut = t;\n              continue loop;\n            }\n          } else {\n            return h | 0;\n          }\n          break;\n        }\n      };\n      return loop(0, 0, xs) | 0;\n    }\n  }, {\n    key: "toJSON",\n    value: function toJSON(_key) {\n      var this$ = this;\n      return Array.from(this$);\n    }\n  }, {\n    key: "CompareTo",\n    value: function CompareTo(other) {\n      var xs = this;\n      var loop = function loop(xs_1_mut, ys_1_mut) {\n        loop: while (true) {\n          var xs_1 = xs_1_mut,\n            ys_1 = ys_1_mut;\n          var matchValue = [xs_1.tail, ys_1.tail];\n          if (matchValue[0] != null) {\n            if (matchValue[1] != null) {\n              var xt = matchValue[0];\n              var yt = matchValue[1];\n              var c = Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* compare */ "e"])(xs_1.head, ys_1.head) | 0;\n              if (c === 0) {\n                xs_1_mut = xt;\n                ys_1_mut = yt;\n                continue loop;\n              } else {\n                return c | 0;\n              }\n            } else {\n              return 1;\n            }\n          } else if (matchValue[1] != null) {\n            return -1;\n          } else {\n            return 0;\n          }\n          break;\n        }\n      };\n      return loop(xs, other) | 0;\n    }\n  }, {\n    key: "GetEnumerator",\n    value: function GetEnumerator() {\n      var xs = this;\n      return ListEnumerator$1_$ctor_3002E699(xs);\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* toIterator */ "z"])(this.GetEnumerator());\n    }\n  }, {\n    key: "System.Collections.IEnumerable.GetEnumerator",\n    value: function SystemCollectionsIEnumerableGetEnumerator() {\n      var xs = this;\n      return Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* getEnumerator */ "n"])(xs);\n    }\n  }]);\n  return FSharpList;\n}(_Types_js__WEBPACK_IMPORTED_MODULE_19__[/* Record */ "c"], Symbol.iterator);\nfunction FSharpList$reflection(gen0) {\n  return Object(_Reflection_js__WEBPACK_IMPORTED_MODULE_20__[/* record_type */ "i"])("ListModule.FSharpList", [gen0], FSharpList, function () {\n    return [["head", gen0], ["tail", Object(_Reflection_js__WEBPACK_IMPORTED_MODULE_20__[/* option_type */ "h"])(FSharpList$reflection(gen0))]];\n  });\n}\nvar ListEnumerator$1 = /*#__PURE__*/function () {\n  function ListEnumerator$1(xs) {\n    _classCallCheck(this, ListEnumerator$1);\n    this.xs = xs;\n    this.it = this.xs;\n    this.current = null;\n  }\n  _createClass(ListEnumerator$1, [{\n    key: "System.Collections.Generic.IEnumerator`1.get_Current",\n    value: function SystemCollectionsGenericIEnumerator1Get_Current() {\n      var __ = this;\n      return __.current;\n    }\n  }, {\n    key: "System.Collections.IEnumerator.get_Current",\n    value: function SystemCollectionsIEnumeratorGet_Current() {\n      var __ = this;\n      return __.current;\n    }\n  }, {\n    key: "System.Collections.IEnumerator.MoveNext",\n    value: function SystemCollectionsIEnumeratorMoveNext() {\n      var __ = this;\n      var matchValue = __.it.tail;\n      if (matchValue != null) {\n        var t = matchValue;\n        __.current = __.it.head;\n        __.it = t;\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: "System.Collections.IEnumerator.Reset",\n    value: function SystemCollectionsIEnumeratorReset() {\n      var __ = this;\n      __.it = __.xs;\n      __.current = null;\n    }\n  }, {\n    key: "Dispose",\n    value: function Dispose() {}\n  }]);\n  return ListEnumerator$1;\n}();\nfunction ListEnumerator$1$reflection(gen0) {\n  return Object(_Reflection_js__WEBPACK_IMPORTED_MODULE_20__[/* class_type */ "b"])("ListModule.ListEnumerator`1", [gen0], ListEnumerator$1);\n}\nfunction ListEnumerator$1_$ctor_3002E699(xs) {\n  return new ListEnumerator$1(xs);\n}\nfunction FSharpList_get_Empty() {\n  return new FSharpList(null, void 0);\n}\nfunction FSharpList_Cons_305B8EAC(x, xs) {\n  return new FSharpList(x, xs);\n}\nfunction FSharpList__get_IsEmpty(xs) {\n  return xs.tail == null;\n}\nfunction FSharpList__get_Length(xs) {\n  var loop = function loop(i_mut, xs_1_mut) {\n    loop: while (true) {\n      var i = i_mut,\n        xs_1 = xs_1_mut;\n      var matchValue = xs_1.tail;\n      if (matchValue != null) {\n        i_mut = i + 1;\n        xs_1_mut = matchValue;\n        continue loop;\n      } else {\n        return i | 0;\n      }\n      break;\n    }\n  };\n  return loop(0, xs) | 0;\n}\nfunction FSharpList__get_Head(xs) {\n  var matchValue = xs.tail;\n  if (matchValue != null) {\n    return xs.head;\n  } else {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_inputWasEmpty */ "f"] + "\\\\nParameter name: " + "list");\n  }\n}\nfunction FSharpList__get_Tail(xs) {\n  var matchValue = xs.tail;\n  if (matchValue != null) {\n    return matchValue;\n  } else {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_inputWasEmpty */ "f"] + "\\\\nParameter name: " + "list");\n  }\n}\nfunction FSharpList__get_Item_Z524259A4(xs, index) {\n  var loop = function loop(i_mut, xs_1_mut) {\n    loop: while (true) {\n      var i = i_mut,\n        xs_1 = xs_1_mut;\n      var matchValue = xs_1.tail;\n      if (matchValue != null) {\n        if (i === index) {\n          return xs_1.head;\n        } else {\n          i_mut = i + 1;\n          xs_1_mut = matchValue;\n          continue loop;\n        }\n      } else {\n        throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n      }\n      break;\n    }\n  };\n  return loop(0, xs);\n}\nfunction empty() {\n  return FSharpList_get_Empty();\n}\nfunction cons(x, xs) {\n  return FSharpList_Cons_305B8EAC(x, xs);\n}\nfunction singleton(x) {\n  return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\n}\nfunction isEmpty(xs) {\n  return FSharpList__get_IsEmpty(xs);\n}\nfunction length(xs) {\n  return FSharpList__get_Length(xs);\n}\nfunction head(xs) {\n  return FSharpList__get_Head(xs);\n}\nfunction tryHead(xs) {\n  if (FSharpList__get_IsEmpty(xs)) {\n    return void 0;\n  } else {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* some */ "c"])(FSharpList__get_Head(xs));\n  }\n}\nfunction tail(xs) {\n  return FSharpList__get_Tail(xs);\n}\nfunction tryLast(xs_mut) {\n  tryLast: while (true) {\n    var xs = xs_mut;\n    if (FSharpList__get_IsEmpty(xs)) {\n      return void 0;\n    } else {\n      var t = FSharpList__get_Tail(xs);\n      if (FSharpList__get_IsEmpty(t)) {\n        return Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* some */ "c"])(FSharpList__get_Head(xs));\n      } else {\n        xs_mut = t;\n        continue tryLast;\n      }\n    }\n    break;\n  }\n}\nfunction last(xs) {\n  var matchValue = tryLast(xs);\n  if (matchValue == null) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_inputWasEmpty */ "f"]);\n  } else {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* value */ "d"])(matchValue);\n  }\n}\nfunction compareWith(comparer, xs, ys) {\n  var loop = function loop(xs_1_mut, ys_1_mut) {\n    loop: while (true) {\n      var xs_1 = xs_1_mut,\n        ys_1 = ys_1_mut;\n      var matchValue = [FSharpList__get_IsEmpty(xs_1), FSharpList__get_IsEmpty(ys_1)];\n      if (matchValue[0]) {\n        if (matchValue[1]) {\n          return 0;\n        } else {\n          return -1;\n        }\n      } else if (matchValue[1]) {\n        return 1;\n      } else {\n        var c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\n        if (c === 0) {\n          xs_1_mut = FSharpList__get_Tail(xs_1);\n          ys_1_mut = FSharpList__get_Tail(ys_1);\n          continue loop;\n        } else {\n          return c | 0;\n        }\n      }\n      break;\n    }\n  };\n  return loop(xs, ys) | 0;\n}\nfunction toArray(xs) {\n  var len = FSharpList__get_Length(xs) | 0;\n  var res = Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* fill */ "b"])(new Array(len), 0, len, null);\n  var loop = function loop(i_mut, xs_1_mut) {\n    loop: while (true) {\n      var i = i_mut,\n        xs_1 = xs_1_mut;\n      if (!FSharpList__get_IsEmpty(xs_1)) {\n        res[i] = FSharpList__get_Head(xs_1);\n        i_mut = i + 1;\n        xs_1_mut = FSharpList__get_Tail(xs_1);\n        continue loop;\n      }\n      break;\n    }\n  };\n  loop(0, xs);\n  return res;\n}\nfunction fold(folder, state, xs) {\n  var acc = state;\n  var xs_1 = xs;\n  while (!FSharpList__get_IsEmpty(xs_1)) {\n    acc = folder(acc, FSharpList__get_Head(xs_1));\n    xs_1 = FSharpList__get_Tail(xs_1);\n  }\n  return acc;\n}\nfunction reverse(xs) {\n  return fold(function (acc, x) {\n    return FSharpList_Cons_305B8EAC(x, acc);\n  }, FSharpList_get_Empty(), xs);\n}\nfunction foldBack(folder, xs, state) {\n  return Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* foldBack */ "c"])(folder, toArray(xs), state);\n}\nfunction foldIndexed(folder, state, xs) {\n  var loop = function loop(i_mut, acc_mut, xs_1_mut) {\n    loop: while (true) {\n      var i = i_mut,\n        acc = acc_mut,\n        xs_1 = xs_1_mut;\n      if (FSharpList__get_IsEmpty(xs_1)) {\n        return acc;\n      } else {\n        i_mut = i + 1;\n        acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\n        xs_1_mut = FSharpList__get_Tail(xs_1);\n        continue loop;\n      }\n      break;\n    }\n  };\n  return loop(0, state, xs);\n}\nfunction fold2(folder, state, xs, ys) {\n  var acc = state;\n  var xs_1 = xs;\n  var ys_1 = ys;\n  while (!FSharpList__get_IsEmpty(xs_1) && !FSharpList__get_IsEmpty(ys_1)) {\n    acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\n    xs_1 = FSharpList__get_Tail(xs_1);\n    ys_1 = FSharpList__get_Tail(ys_1);\n  }\n  return acc;\n}\nfunction foldBack2(folder, xs, ys, state) {\n  return Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* foldBack2 */ "d"])(folder, toArray(xs), toArray(ys), state);\n}\nfunction unfold(gen, state) {\n  var loop = function loop(acc_mut, node_mut) {\n    var t;\n    loop: while (true) {\n      var acc = acc_mut,\n        node = node_mut;\n      var matchValue = gen(acc);\n      if (matchValue != null) {\n        acc_mut = matchValue[1];\n        node_mut = (t = new FSharpList(matchValue[0], void 0), (node.tail = t, t));\n        continue loop;\n      } else {\n        return node;\n      }\n      break;\n    }\n  };\n  var root = FSharpList_get_Empty();\n  var node_1 = loop(state, root);\n  var t_2 = FSharpList_get_Empty();\n  node_1.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction iterate(action, xs) {\n  fold(function (unitVar, x) {\n    action(x);\n  }, void 0, xs);\n}\nfunction iterate2(action, xs, ys) {\n  fold2(function (unitVar, x, y) {\n    action(x, y);\n  }, void 0, xs, ys);\n}\nfunction iterateIndexed(action, xs) {\n  fold(function (i, x) {\n    action(i, x);\n    return i + 1 | 0;\n  }, 0, xs);\n}\nfunction iterateIndexed2(action, xs, ys) {\n  fold2(function (i, x, y) {\n    action(i, x, y);\n    return i + 1 | 0;\n  }, 0, xs, ys);\n}\nfunction toSeq(xs) {\n  return xs;\n}\nfunction ofArrayWithTail(xs, tail_1) {\n  var res = tail_1;\n  for (var i = xs.length - 1; i >= 0; i--) {\n    res = FSharpList_Cons_305B8EAC(xs[i], res);\n  }\n  return res;\n}\nfunction ofArray(xs) {\n  return ofArrayWithTail(xs, FSharpList_get_Empty());\n}\nfunction ofSeq(xs) {\n  var xs_3, t;\n  if (Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* isArrayLike */ "p"])(xs)) {\n    return ofArray(xs);\n  } else if (xs instanceof FSharpList) {\n    return xs;\n  } else {\n    var root = FSharpList_get_Empty();\n    var node = root;\n    var enumerator = Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* getEnumerator */ "n"])(xs);\n    try {\n      while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {\n        var x = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();\n        node = (xs_3 = node, (t = new FSharpList(x, void 0), (xs_3.tail = t, t)));\n      }\n    } finally {\n      Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* disposeSafe */ "j"])(enumerator);\n    }\n    var xs_5 = node;\n    var t_2 = FSharpList_get_Empty();\n    xs_5.tail = t_2;\n    return FSharpList__get_Tail(root);\n  }\n}\nfunction concat(lists) {\n  var root = FSharpList_get_Empty();\n  var node = root;\n  var action = function action(xs) {\n    node = fold(function (acc, x) {\n      var t = new FSharpList(x, void 0);\n      acc.tail = t;\n      return t;\n    }, node, xs);\n  };\n  if (Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* isArrayLike */ "p"])(lists)) {\n    lists.forEach(action);\n  } else if (lists instanceof FSharpList) {\n    iterate(action, lists);\n  } else {\n    var enumerator = Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* getEnumerator */ "n"])(lists);\n    try {\n      while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {\n        action(enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]());\n      }\n    } finally {\n      Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* disposeSafe */ "j"])(enumerator);\n    }\n  }\n  var xs_6 = node;\n  var t_2 = FSharpList_get_Empty();\n  xs_6.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction scan(folder, state, xs) {\n  var xs_4, t_2;\n  var root = FSharpList_get_Empty();\n  var node;\n  var t = new FSharpList(state, void 0);\n  root.tail = t;\n  node = t;\n  var acc = state;\n  var xs_3 = xs;\n  while (!FSharpList__get_IsEmpty(xs_3)) {\n    acc = folder(acc, FSharpList__get_Head(xs_3));\n    node = (xs_4 = node, (t_2 = new FSharpList(acc, void 0), (xs_4.tail = t_2, t_2)));\n    xs_3 = FSharpList__get_Tail(xs_3);\n  }\n  var xs_6 = node;\n  var t_4 = FSharpList_get_Empty();\n  xs_6.tail = t_4;\n  return FSharpList__get_Tail(root);\n}\nfunction scanBack(folder, xs, state) {\n  return ofArray(Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* scanBack */ "k"])(folder, toArray(xs), state));\n}\nfunction append(xs, ys) {\n  return fold(function (acc, x) {\n    return FSharpList_Cons_305B8EAC(x, acc);\n  }, ys, reverse(xs));\n}\nfunction collect(mapping, xs) {\n  var xs_1, t;\n  var root = FSharpList_get_Empty();\n  var node = root;\n  var ys = xs;\n  while (!FSharpList__get_IsEmpty(ys)) {\n    var zs = mapping(FSharpList__get_Head(ys));\n    while (!FSharpList__get_IsEmpty(zs)) {\n      node = (xs_1 = node, (t = new FSharpList(FSharpList__get_Head(zs), void 0), (xs_1.tail = t, t)));\n      zs = FSharpList__get_Tail(zs);\n    }\n    ys = FSharpList__get_Tail(ys);\n  }\n  var xs_3 = node;\n  var t_2 = FSharpList_get_Empty();\n  xs_3.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction mapIndexed(mapping, xs) {\n  var root = FSharpList_get_Empty();\n  var node = foldIndexed(function (i, acc, x) {\n    var t = new FSharpList(mapping(i, x), void 0);\n    acc.tail = t;\n    return t;\n  }, root, xs);\n  var t_2 = FSharpList_get_Empty();\n  node.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction map(mapping, xs) {\n  var root = FSharpList_get_Empty();\n  var node = fold(function (acc, x) {\n    var t = new FSharpList(mapping(x), void 0);\n    acc.tail = t;\n    return t;\n  }, root, xs);\n  var t_2 = FSharpList_get_Empty();\n  node.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction indexed(xs) {\n  return mapIndexed(function (i, x) {\n    return [i, x];\n  }, xs);\n}\nfunction map2(mapping, xs, ys) {\n  var root = FSharpList_get_Empty();\n  var node = fold2(function (acc, x, y) {\n    var t = new FSharpList(mapping(x, y), void 0);\n    acc.tail = t;\n    return t;\n  }, root, xs, ys);\n  var t_2 = FSharpList_get_Empty();\n  node.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction mapIndexed2(mapping, xs, ys) {\n  var loop = function loop(i_mut, acc_mut, xs_1_mut, ys_1_mut) {\n    var t;\n    loop: while (true) {\n      var i = i_mut,\n        acc = acc_mut,\n        xs_1 = xs_1_mut,\n        ys_1 = ys_1_mut;\n      if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\n        return acc;\n      } else {\n        i_mut = i + 1;\n        acc_mut = (t = new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0), (acc.tail = t, t));\n        xs_1_mut = FSharpList__get_Tail(xs_1);\n        ys_1_mut = FSharpList__get_Tail(ys_1);\n        continue loop;\n      }\n      break;\n    }\n  };\n  var root = FSharpList_get_Empty();\n  var node_1 = loop(0, root, xs, ys);\n  var t_2 = FSharpList_get_Empty();\n  node_1.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction map3(mapping, xs, ys, zs) {\n  var loop = function loop(acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) {\n    var t;\n    loop: while (true) {\n      var acc = acc_mut,\n        xs_1 = xs_1_mut,\n        ys_1 = ys_1_mut,\n        zs_1 = zs_1_mut;\n      if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\n        return acc;\n      } else {\n        acc_mut = (t = new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0), (acc.tail = t, t));\n        xs_1_mut = FSharpList__get_Tail(xs_1);\n        ys_1_mut = FSharpList__get_Tail(ys_1);\n        zs_1_mut = FSharpList__get_Tail(zs_1);\n        continue loop;\n      }\n      break;\n    }\n  };\n  var root = FSharpList_get_Empty();\n  var node_1 = loop(root, xs, ys, zs);\n  var t_2 = FSharpList_get_Empty();\n  node_1.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction mapFold(mapping, state, xs) {\n  var root = FSharpList_get_Empty();\n  var patternInput_1 = fold(function (tupledArg, x) {\n    var t;\n    var patternInput = mapping(tupledArg[1], x);\n    return [(t = new FSharpList(patternInput[0], void 0), (tupledArg[0].tail = t, t)), patternInput[1]];\n  }, [root, state], xs);\n  var t_2 = FSharpList_get_Empty();\n  patternInput_1[0].tail = t_2;\n  return [FSharpList__get_Tail(root), patternInput_1[1]];\n}\nfunction mapFoldBack(mapping, xs, state) {\n  return mapFold(function (acc, x) {\n    return mapping(x, acc);\n  }, state, reverse(xs));\n}\nfunction tryPick(f, xs) {\n  var loop = function loop(xs_1_mut) {\n    loop: while (true) {\n      var xs_1 = xs_1_mut;\n      if (FSharpList__get_IsEmpty(xs_1)) {\n        return void 0;\n      } else {\n        var matchValue = f(FSharpList__get_Head(xs_1));\n        if (matchValue == null) {\n          xs_1_mut = FSharpList__get_Tail(xs_1);\n          continue loop;\n        } else {\n          return matchValue;\n        }\n      }\n      break;\n    }\n  };\n  return loop(xs);\n}\nfunction pick(f, xs) {\n  var matchValue = tryPick(f, xs);\n  if (matchValue == null) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_keyNotFoundAlt */ "g"]);\n  } else {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* value */ "d"])(matchValue);\n  }\n}\nfunction tryFind(f, xs) {\n  return tryPick(function (x) {\n    return f(x) ? Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* some */ "c"])(x) : void 0;\n  }, xs);\n}\nfunction find(f, xs) {\n  var matchValue = tryFind(f, xs);\n  if (matchValue == null) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_keyNotFoundAlt */ "g"]);\n  } else {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* value */ "d"])(matchValue);\n  }\n}\nfunction tryFindBack(f, xs) {\n  return Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* tryFindBack */ "o"])(f, toArray(xs));\n}\nfunction findBack(f, xs) {\n  var matchValue = tryFindBack(f, xs);\n  if (matchValue == null) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_keyNotFoundAlt */ "g"]);\n  } else {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* value */ "d"])(matchValue);\n  }\n}\nfunction tryFindIndex(f, xs) {\n  var loop = function loop(i_mut, xs_1_mut) {\n    loop: while (true) {\n      var i = i_mut,\n        xs_1 = xs_1_mut;\n      if (FSharpList__get_IsEmpty(xs_1)) {\n        return void 0;\n      } else if (f(FSharpList__get_Head(xs_1))) {\n        return i;\n      } else {\n        i_mut = i + 1;\n        xs_1_mut = FSharpList__get_Tail(xs_1);\n        continue loop;\n      }\n      break;\n    }\n  };\n  return loop(0, xs);\n}\nfunction findIndex(f, xs) {\n  var matchValue = tryFindIndex(f, xs);\n  if (matchValue == null) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_keyNotFoundAlt */ "g"]);\n  } else {\n    return matchValue | 0;\n  }\n}\nfunction tryFindIndexBack(f, xs) {\n  return Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* tryFindIndexBack */ "p"])(f, toArray(xs));\n}\nfunction findIndexBack(f, xs) {\n  var matchValue = tryFindIndexBack(f, xs);\n  if (matchValue == null) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_keyNotFoundAlt */ "g"]);\n  } else {\n    return matchValue | 0;\n  }\n}\nfunction tryItem(n, xs) {\n  var loop = function loop(i_mut, xs_1_mut) {\n    loop: while (true) {\n      var i = i_mut,\n        xs_1 = xs_1_mut;\n      if (FSharpList__get_IsEmpty(xs_1)) {\n        return void 0;\n      } else if (i === n) {\n        return Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* some */ "c"])(FSharpList__get_Head(xs_1));\n      } else {\n        i_mut = i + 1;\n        xs_1_mut = FSharpList__get_Tail(xs_1);\n        continue loop;\n      }\n      break;\n    }\n  };\n  return loop(0, xs);\n}\nfunction item(n, xs) {\n  return FSharpList__get_Item_Z524259A4(xs, n);\n}\nfunction filter(f, xs) {\n  var root = FSharpList_get_Empty();\n  var node = fold(function (acc, x) {\n    if (f(x)) {\n      var t = new FSharpList(x, void 0);\n      acc.tail = t;\n      return t;\n    } else {\n      return acc;\n    }\n  }, root, xs);\n  var t_2 = FSharpList_get_Empty();\n  node.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction partition(f, xs) {\n  var patternInput = [FSharpList_get_Empty(), FSharpList_get_Empty()];\n  var root2 = patternInput[1];\n  var root1 = patternInput[0];\n  var patternInput_1 = fold(Object(_Util_js__WEBPACK_IMPORTED_MODULE_18__[/* uncurry */ "A"])(2, function (tupledArg) {\n    var lacc = tupledArg[0];\n    var racc = tupledArg[1];\n    return function (x) {\n      var t, t_2;\n      return f(x) ? [(t = new FSharpList(x, void 0), (lacc.tail = t, t)), racc] : [lacc, (t_2 = new FSharpList(x, void 0), (racc.tail = t_2, t_2))];\n    };\n  }), [root1, root2], xs);\n  var t_4 = FSharpList_get_Empty();\n  patternInput_1[0].tail = t_4;\n  var t_5 = FSharpList_get_Empty();\n  patternInput_1[1].tail = t_5;\n  return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\n}\nfunction choose(f, xs) {\n  var root = FSharpList_get_Empty();\n  var node = fold(function (acc, x) {\n    var matchValue = f(x);\n    if (matchValue == null) {\n      return acc;\n    } else {\n      var t = new FSharpList(Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* value */ "d"])(matchValue), void 0);\n      acc.tail = t;\n      return t;\n    }\n  }, root, xs);\n  var t_2 = FSharpList_get_Empty();\n  node.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction contains(value, xs, eq) {\n  return tryFindIndex(function (v) {\n    return eq.Equals(value, v);\n  }, xs) != null;\n}\nfunction initialize(n, f) {\n  var xs, t;\n  var root = FSharpList_get_Empty();\n  var node = root;\n  for (var i = 0; i <= n - 1; i++) {\n    node = (xs = node, (t = new FSharpList(f(i), void 0), (xs.tail = t, t)));\n  }\n  var xs_2 = node;\n  var t_2 = FSharpList_get_Empty();\n  xs_2.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction replicate(n, x) {\n  return initialize(n, function (_arg) {\n    return x;\n  });\n}\nfunction reduce(f, xs) {\n  if (FSharpList__get_IsEmpty(xs)) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_inputWasEmpty */ "f"]);\n  } else {\n    return fold(f, head(xs), tail(xs));\n  }\n}\nfunction reduceBack(f, xs) {\n  if (FSharpList__get_IsEmpty(xs)) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_inputWasEmpty */ "f"]);\n  } else {\n    return foldBack(f, tail(xs), head(xs));\n  }\n}\nfunction forAll(f, xs) {\n  return fold(function (acc, x) {\n    return acc && f(x);\n  }, true, xs);\n}\nfunction forAll2(f, xs, ys) {\n  return fold2(function (acc, x, y) {\n    return acc && f(x, y);\n  }, true, xs, ys);\n}\nfunction exists(f, xs) {\n  return tryFindIndex(f, xs) != null;\n}\nfunction exists2(f_mut, xs_mut, ys_mut) {\n  exists2: while (true) {\n    var f = f_mut,\n      xs = xs_mut,\n      ys = ys_mut;\n    var matchValue = [FSharpList__get_IsEmpty(xs), FSharpList__get_IsEmpty(ys)];\n    var pattern_matching_result = void 0;\n    if (matchValue[0]) {\n      if (matchValue[1]) {\n        pattern_matching_result = 0;\n      } else {\n        pattern_matching_result = 2;\n      }\n    } else if (matchValue[1]) {\n      pattern_matching_result = 2;\n    } else {\n      pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n      case 0:\n        {\n          return false;\n        }\n      case 1:\n        {\n          if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\n            return true;\n          } else {\n            f_mut = f;\n            xs_mut = FSharpList__get_Tail(xs);\n            ys_mut = FSharpList__get_Tail(ys);\n            continue exists2;\n          }\n        }\n      case 2:\n        {\n          throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_differentLengths */ "a"] + "\\\\nParameter name: " + "list2");\n        }\n    }\n    break;\n  }\n}\nfunction unzip(xs) {\n  return foldBack(function (tupledArg, tupledArg_1) {\n    return [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])];\n  }, xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\n}\nfunction unzip3(xs) {\n  return foldBack(function (tupledArg, tupledArg_1) {\n    return [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])];\n  }, xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\n}\nfunction zip(xs, ys) {\n  return map2(function (x, y) {\n    return [x, y];\n  }, xs, ys);\n}\nfunction zip3(xs, ys, zs) {\n  return map3(function (x, y, z) {\n    return [x, y, z];\n  }, xs, ys, zs);\n}\nfunction sortWith(comparer, xs) {\n  var arr = toArray(xs);\n  arr.sort(comparer);\n  return ofArray(arr);\n}\nfunction sort(xs, comparer) {\n  return sortWith(function (x, y) {\n    return comparer.Compare(x, y);\n  }, xs);\n}\nfunction sortBy(projection, xs, comparer) {\n  return sortWith(function (x, y) {\n    return comparer.Compare(projection(x), projection(y));\n  }, xs);\n}\nfunction sortDescending(xs, comparer) {\n  return sortWith(function (x, y) {\n    return comparer.Compare(x, y) * -1;\n  }, xs);\n}\nfunction sortByDescending(projection, xs, comparer) {\n  return sortWith(function (x, y) {\n    return comparer.Compare(projection(x), projection(y)) * -1;\n  }, xs);\n}\nfunction sum(xs, adder) {\n  return fold(function (acc, x) {\n    return adder.Add(acc, x);\n  }, adder.GetZero(), xs);\n}\nfunction sumBy(f, xs, adder) {\n  return fold(function (acc, x) {\n    return adder.Add(acc, f(x));\n  }, adder.GetZero(), xs);\n}\nfunction maxBy(projection, xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(projection(y), projection(x)) > 0 ? y : x;\n  }, xs);\n}\nfunction max(xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(y, x) > 0 ? y : x;\n  }, xs);\n}\nfunction minBy(projection, xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(projection(y), projection(x)) > 0 ? x : y;\n  }, xs);\n}\nfunction min(xs, comparer) {\n  return reduce(function (x, y) {\n    return comparer.Compare(y, x) > 0 ? x : y;\n  }, xs);\n}\nfunction average(xs, averager) {\n  var count = 0;\n  var total = fold(function (acc, x) {\n    count = count + 1 | 0;\n    return averager.Add(acc, x);\n  }, averager.GetZero(), xs);\n  return averager.DivideByInt(total, count);\n}\nfunction averageBy(f, xs, averager) {\n  var count = 0;\n  var total = fold(function (acc, x) {\n    count = count + 1 | 0;\n    return averager.Add(acc, f(x));\n  }, averager.GetZero(), xs);\n  return averager.DivideByInt(total, count);\n}\nfunction permute(f, xs) {\n  return ofArray(Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* permute */ "i"])(f, toArray(xs)));\n}\nfunction chunkBySize(chunkSize, xs) {\n  return ofArray(Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* map */ "e"])(ofArray, Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* chunkBySize */ "a"])(chunkSize, toArray(xs))));\n}\nfunction allPairs(xs, ys) {\n  var root = FSharpList_get_Empty();\n  var node = root;\n  iterate(function (x) {\n    iterate(function (y) {\n      var xs_1, t;\n      node = (xs_1 = node, (t = new FSharpList([x, y], void 0), (xs_1.tail = t, t)));\n    }, ys);\n  }, xs);\n  var xs_3 = node;\n  var t_2 = FSharpList_get_Empty();\n  xs_3.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction skip(count_mut, xs_mut) {\n  skip: while (true) {\n    var count = count_mut,\n      xs = xs_mut;\n    if (count <= 0) {\n      return xs;\n    } else if (FSharpList__get_IsEmpty(xs)) {\n      throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_notEnoughElements */ "h"] + "\\\\nParameter name: " + "list");\n    } else {\n      count_mut = count - 1;\n      xs_mut = FSharpList__get_Tail(xs);\n      continue skip;\n    }\n    break;\n  }\n}\nfunction skipWhile(predicate_mut, xs_mut) {\n  skipWhile: while (true) {\n    var predicate = predicate_mut,\n      xs = xs_mut;\n    if (FSharpList__get_IsEmpty(xs)) {\n      return xs;\n    } else if (!predicate(FSharpList__get_Head(xs))) {\n      return xs;\n    } else {\n      predicate_mut = predicate;\n      xs_mut = FSharpList__get_Tail(xs);\n      continue skipWhile;\n    }\n    break;\n  }\n}\nfunction take(count, xs) {\n  if (count < 0) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_inputMustBeNonNegative */ "c"] + "\\\\nParameter name: " + "count");\n  }\n  var loop = function loop(i_mut, acc_mut, xs_1_mut) {\n    var t;\n    loop: while (true) {\n      var i = i_mut,\n        acc = acc_mut,\n        xs_1 = xs_1_mut;\n      if (i <= 0) {\n        return acc;\n      } else if (FSharpList__get_IsEmpty(xs_1)) {\n        throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_notEnoughElements */ "h"] + "\\\\nParameter name: " + "list");\n      } else {\n        i_mut = i - 1;\n        acc_mut = (t = new FSharpList(FSharpList__get_Head(xs_1), void 0), (acc.tail = t, t));\n        xs_1_mut = FSharpList__get_Tail(xs_1);\n        continue loop;\n      }\n      break;\n    }\n  };\n  var root = FSharpList_get_Empty();\n  var node = loop(count, root, xs);\n  var t_2 = FSharpList_get_Empty();\n  node.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction takeWhile(predicate, xs) {\n  var loop = function loop(acc_mut, xs_1_mut) {\n    var t;\n    loop: while (true) {\n      var acc = acc_mut,\n        xs_1 = xs_1_mut;\n      if (FSharpList__get_IsEmpty(xs_1)) {\n        return acc;\n      } else if (!predicate(FSharpList__get_Head(xs_1))) {\n        return acc;\n      } else {\n        acc_mut = (t = new FSharpList(FSharpList__get_Head(xs_1), void 0), (acc.tail = t, t));\n        xs_1_mut = FSharpList__get_Tail(xs_1);\n        continue loop;\n      }\n      break;\n    }\n  };\n  var root = FSharpList_get_Empty();\n  var node = loop(root, xs);\n  var t_2 = FSharpList_get_Empty();\n  node.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction truncate(count, xs) {\n  var loop = function loop(i_mut, acc_mut, xs_1_mut) {\n    var t;\n    loop: while (true) {\n      var i = i_mut,\n        acc = acc_mut,\n        xs_1 = xs_1_mut;\n      if (i <= 0) {\n        return acc;\n      } else if (FSharpList__get_IsEmpty(xs_1)) {\n        return acc;\n      } else {\n        i_mut = i - 1;\n        acc_mut = (t = new FSharpList(FSharpList__get_Head(xs_1), void 0), (acc.tail = t, t));\n        xs_1_mut = FSharpList__get_Tail(xs_1);\n        continue loop;\n      }\n      break;\n    }\n  };\n  var root = FSharpList_get_Empty();\n  var node = loop(count, root, xs);\n  var t_2 = FSharpList_get_Empty();\n  node.tail = t_2;\n  return FSharpList__get_Tail(root);\n}\nfunction getSlice(startIndex, endIndex, xs) {\n  var len = length(xs) | 0;\n  var startIndex_1 = Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* defaultArg */ "a"])(startIndex, 0) | 0;\n  var endIndex_1 = Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* defaultArg */ "a"])(endIndex, len - 1) | 0;\n  if (startIndex_1 < 0) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "startIndex");\n  } else if (endIndex_1 >= len) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "endIndex");\n  } else if (endIndex_1 < startIndex_1) {\n    return FSharpList_get_Empty();\n  } else {\n    return take(endIndex_1 - startIndex_1 + 1, skip(startIndex_1, xs));\n  }\n}\nfunction splitAt(index, xs) {\n  if (index < 0) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_inputMustBeNonNegative */ "c"] + "\\\\nParameter name: " + "index");\n  }\n  if (index > FSharpList__get_Length(xs)) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_notEnoughElements */ "h"] + "\\\\nParameter name: " + "index");\n  }\n  return [take(index, xs), skip(index, xs)];\n}\nfunction exactlyOne(xs) {\n  if (FSharpList__get_IsEmpty(xs)) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_inputSequenceEmpty */ "d"] + "\\\\nParameter name: " + "list");\n  } else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\n    return FSharpList__get_Head(xs);\n  } else {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_inputSequenceTooLong */ "e"] + "\\\\nParameter name: " + "list");\n  }\n}\nfunction tryExactlyOne(xs) {\n  if (!FSharpList__get_IsEmpty(xs) && FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\n    return Object(_Option_js__WEBPACK_IMPORTED_MODULE_22__[/* some */ "c"])(FSharpList__get_Head(xs));\n  } else {\n    return void 0;\n  }\n}\nfunction where(predicate, xs) {\n  return filter(predicate, xs);\n}\nfunction pairwise(xs) {\n  return ofArray(Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* pairwise */ "h"])(toArray(xs)));\n}\nfunction windowed(windowSize, xs) {\n  return ofArray(Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* map */ "e"])(ofArray, Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* windowed */ "s"])(windowSize, toArray(xs))));\n}\nfunction splitInto(chunks, xs) {\n  return ofArray(Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* map */ "e"])(ofArray, Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* splitInto */ "m"])(chunks, toArray(xs))));\n}\nfunction transpose(lists) {\n  return ofArray(Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* map */ "e"])(ofArray, Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* transpose */ "n"])(Object(_Array_js__WEBPACK_IMPORTED_MODULE_23__[/* map */ "e"])(toArray, Array.from(lists)))));\n}\nfunction insertAt(index, y, xs) {\n  var i = -1;\n  var isDone = false;\n  var result = fold(function (acc, x) {\n    i = i + 1 | 0;\n    if (i === index) {\n      isDone = true;\n      return FSharpList_Cons_305B8EAC(x, FSharpList_Cons_305B8EAC(y, acc));\n    } else {\n      return FSharpList_Cons_305B8EAC(x, acc);\n    }\n  }, FSharpList_get_Empty(), xs);\n  return reverse(isDone ? result : i + 1 === index ? FSharpList_Cons_305B8EAC(y, result) : function () {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n  }());\n}\nfunction insertManyAt(index, ys, xs) {\n  var i = -1;\n  var isDone = false;\n  var ys_1 = ofSeq(ys);\n  var result = fold(function (acc, x) {\n    i = i + 1 | 0;\n    if (i === index) {\n      isDone = true;\n      return FSharpList_Cons_305B8EAC(x, append(ys_1, acc));\n    } else {\n      return FSharpList_Cons_305B8EAC(x, acc);\n    }\n  }, FSharpList_get_Empty(), xs);\n  return reverse(isDone ? result : i + 1 === index ? append(ys_1, result) : function () {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n  }());\n}\nfunction removeAt(index, xs) {\n  var i = -1;\n  var isDone = false;\n  var ys = filter(function (_arg) {\n    i = i + 1 | 0;\n    if (i === index) {\n      isDone = true;\n      return false;\n    } else {\n      return true;\n    }\n  }, xs);\n  if (!isDone) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n  }\n  return ys;\n}\nfunction removeManyAt(index, count, xs) {\n  var i = -1;\n  var status = -1;\n  var ys = filter(function (_arg) {\n    i = i + 1 | 0;\n    if (i === index) {\n      status = 0;\n      return false;\n    } else if (i > index) {\n      if (i < index + count) {\n        return false;\n      } else {\n        status = 1;\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }, xs);\n  var status_1 = (status === 0 && i + 1 === index + count ? 1 : status) | 0;\n  if (status_1 < 1) {\n    var arg = status_1 < 0 ? "index" : "count";\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + arg);\n  }\n  return ys;\n}\nfunction updateAt(index, y, xs) {\n  var isDone = false;\n  var ys = mapIndexed(function (i, x) {\n    if (i === index) {\n      isDone = true;\n      return y;\n    } else {\n      return x;\n    }\n  }, xs);\n  if (!isDone) {\n    throw new Error(_Global_js__WEBPACK_IMPORTED_MODULE_21__[/* SR_indexOutOfBounds */ "b"] + "\\\\nParameter name: " + "index");\n  }\n  return ys;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},4:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export Some */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return some; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return value; });\n/* unused harmony export ofNullable */\n/* unused harmony export toNullable */\n/* unused harmony export flatten */\n/* unused harmony export toArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return defaultArg; });\n/* unused harmony export defaultArgWith */\n/* unused harmony export filter */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return map; });\n/* unused harmony export map2 */\n/* unused harmony export map3 */\n/* unused harmony export bind */\n/* unused harmony export tryOp */\n/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(36);\n/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(37);\n/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(25);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(27);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(19);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(31);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(35);\n/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(20);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(24);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(29);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _Util_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(0);\n\n\n\n\n\n\n\n\n\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n// Using a class here for better compatibility with TS files importing Some\nvar Some = /*#__PURE__*/function () {\n  function Some(value) {\n    _classCallCheck(this, Some);\n    this.value = value;\n  }\n  _createClass(Some, [{\n    key: "toJSON",\n    value: function toJSON() {\n      return this.value;\n    }\n    // Don\'t add "Some" for consistency with erased options\n  }, {\n    key: "toString",\n    value: function toString() {\n      return String(this.value);\n    }\n  }, {\n    key: "GetHashCode",\n    value: function GetHashCode() {\n      return Object(_Util_js__WEBPACK_IMPORTED_MODULE_11__[/* structuralHash */ "y"])(this.value);\n    }\n  }, {\n    key: "Equals",\n    value: function Equals(other) {\n      if (other == null) {\n        return false;\n      } else {\n        return Object(_Util_js__WEBPACK_IMPORTED_MODULE_11__[/* equals */ "m"])(this.value, other instanceof Some ? other.value : other);\n      }\n    }\n  }, {\n    key: "CompareTo",\n    value: function CompareTo(other) {\n      if (other == null) {\n        return 1;\n      } else {\n        return Object(_Util_js__WEBPACK_IMPORTED_MODULE_11__[/* compare */ "e"])(this.value, other instanceof Some ? other.value : other);\n      }\n    }\n  }]);\n  return Some;\n}();\nfunction some(x) {\n  return x == null || x instanceof Some ? new Some(x) : x;\n}\nfunction value(x) {\n  if (x == null) {\n    throw new Error("Option has no value");\n  } else {\n    return x instanceof Some ? x.value : x;\n  }\n}\nfunction ofNullable(x) {\n  // This will fail with unit probably, an alternative would be:\n  // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n  return x == null ? undefined : x;\n}\nfunction toNullable(x) {\n  return x == null ? null : value(x);\n}\nfunction flatten(x) {\n  return x == null ? undefined : value(x);\n}\nfunction toArray(opt) {\n  return opt == null ? [] : [value(opt)];\n}\nfunction defaultArg(opt, defaultValue) {\n  return opt != null ? value(opt) : defaultValue;\n}\nfunction defaultArgWith(opt, defThunk) {\n  return opt != null ? value(opt) : defThunk();\n}\nfunction filter(predicate, opt) {\n  return opt != null ? predicate(value(opt)) ? opt : undefined : opt;\n}\nfunction map(mapping, opt) {\n  return opt != null ? some(mapping(value(opt))) : undefined;\n}\nfunction map2(mapping, opt1, opt2) {\n  return opt1 != null && opt2 != null ? mapping(value(opt1), value(opt2)) : undefined;\n}\nfunction map3(mapping, opt1, opt2, opt3) {\n  return opt1 != null && opt2 != null && opt3 != null ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nfunction bind(binder, opt) {\n  return opt != null ? binder(value(opt)) : undefined;\n}\nfunction tryOp(op, arg) {\n  try {\n    return some(op(arg));\n  } catch (_a) {\n    return undefined;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXN0cy9mYWJsZV9tb2R1bGVzL2ZhYmxlLWxpYnJhcnkuMy43LjE3L09wdGlvbi5qcz9hOGFiIl0sIm5hbWVzIjpbIlNvbWUiLCJ2YWx1ZSIsIlN0cmluZyIsInN0cnVjdHVyYWxIYXNoIiwib3RoZXIiLCJlcXVhbHMiLCJjb21wYXJlIiwic29tZSIsIngiLCJFcnJvciIsIm9mTnVsbGFibGUiLCJ1bmRlZmluZWQiLCJ0b051bGxhYmxlIiwiZmxhdHRlbiIsInRvQXJyYXkiLCJvcHQiLCJkZWZhdWx0QXJnIiwiZGVmYXVsdFZhbHVlIiwiZGVmYXVsdEFyZ1dpdGgiLCJkZWZUaHVuayIsImZpbHRlciIsInByZWRpY2F0ZSIsIm1hcCIsIm1hcHBpbmciLCJtYXAyIiwib3B0MSIsIm9wdDIiLCJtYXAzIiwib3B0MyIsImJpbmQiLCJiaW5kZXIiLCJ0cnlPcCIsIm9wIiwiYXJnIiwiX2EiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEQ7QUFDNUQ7QUFDTyxJQUFNQSxJQUFJO0VBQ2IsY0FBWUMsS0FBSyxFQUFFO0lBQUE7SUFDZixJQUFJLENBQUNBLEtBQUssR0FBR0EsS0FBSztFQUN0QjtFQUFDO0lBQUE7SUFBQSxPQUNELGtCQUFTO01BQ0wsT0FBTyxJQUFJLENBQUNBLEtBQUs7SUFDckI7SUFDQTtFQUFBO0lBQUE7SUFBQSxPQUNBLG9CQUFXO01BQ1AsT0FBT0MsTUFBTSxDQUFDLElBQUksQ0FBQ0QsS0FBSyxDQUFDO0lBQzdCO0VBQUM7SUFBQTtJQUFBLE9BQ0QsdUJBQWM7TUFDVixPQUFPRSx3RUFBYyxDQUFDLElBQUksQ0FBQ0YsS0FBSyxDQUFDO0lBQ3JDO0VBQUM7SUFBQTtJQUFBLE9BQ0QsZ0JBQU9HLEtBQUssRUFBRTtNQUNWLElBQUlBLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDZixPQUFPLEtBQUs7TUFDaEIsQ0FBQyxNQUNJO1FBQ0QsT0FBT0MsZ0VBQU0sQ0FBQyxJQUFJLENBQUNKLEtBQUssRUFBRUcsS0FBSyxZQUFZSixJQUFJLEdBQUdJLEtBQUssQ0FBQ0gsS0FBSyxHQUFHRyxLQUFLLENBQUM7TUFDMUU7SUFDSjtFQUFDO0lBQUE7SUFBQSxPQUNELG1CQUFVQSxLQUFLLEVBQUU7TUFDYixJQUFJQSxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ2YsT0FBTyxDQUFDO01BQ1osQ0FBQyxNQUNJO1FBQ0QsT0FBT0UsaUVBQU8sQ0FBQyxJQUFJLENBQUNMLEtBQUssRUFBRUcsS0FBSyxZQUFZSixJQUFJLEdBQUdJLEtBQUssQ0FBQ0gsS0FBSyxHQUFHRyxLQUFLLENBQUM7TUFDM0U7SUFDSjtFQUFDO0VBQUE7QUFBQTtBQUVFLFNBQVNHLElBQUksQ0FBQ0MsQ0FBQyxFQUFFO0VBQ3BCLE9BQU9BLENBQUMsSUFBSSxJQUFJLElBQUlBLENBQUMsWUFBWVIsSUFBSSxHQUFHLElBQUlBLElBQUksQ0FBQ1EsQ0FBQyxDQUFDLEdBQUdBLENBQUM7QUFDM0Q7QUFDTyxTQUFTUCxLQUFLLENBQUNPLENBQUMsRUFBRTtFQUNyQixJQUFJQSxDQUFDLElBQUksSUFBSSxFQUFFO0lBQ1gsTUFBTSxJQUFJQyxLQUFLLENBQUMscUJBQXFCLENBQUM7RUFDMUMsQ0FBQyxNQUNJO0lBQ0QsT0FBT0QsQ0FBQyxZQUFZUixJQUFJLEdBQUdRLENBQUMsQ0FBQ1AsS0FBSyxHQUFHTyxDQUFDO0VBQzFDO0FBQ0o7QUFDTyxTQUFTRSxVQUFVLENBQUNGLENBQUMsRUFBRTtFQUMxQjtFQUNBO0VBQ0EsT0FBT0EsQ0FBQyxJQUFJLElBQUksR0FBR0csU0FBUyxHQUFHSCxDQUFDO0FBQ3BDO0FBQ08sU0FBU0ksVUFBVSxDQUFDSixDQUFDLEVBQUU7RUFDMUIsT0FBT0EsQ0FBQyxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUdQLEtBQUssQ0FBQ08sQ0FBQyxDQUFDO0FBQ3RDO0FBQ08sU0FBU0ssT0FBTyxDQUFDTCxDQUFDLEVBQUU7RUFDdkIsT0FBT0EsQ0FBQyxJQUFJLElBQUksR0FBR0csU0FBUyxHQUFHVixLQUFLLENBQUNPLENBQUMsQ0FBQztBQUMzQztBQUNPLFNBQVNNLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFO0VBQ3pCLE9BQVFBLEdBQUcsSUFBSSxJQUFJLEdBQUksRUFBRSxHQUFHLENBQUNkLEtBQUssQ0FBQ2MsR0FBRyxDQUFDLENBQUM7QUFDNUM7QUFDTyxTQUFTQyxVQUFVLENBQUNELEdBQUcsRUFBRUUsWUFBWSxFQUFFO0VBQzFDLE9BQVFGLEdBQUcsSUFBSSxJQUFJLEdBQUlkLEtBQUssQ0FBQ2MsR0FBRyxDQUFDLEdBQUdFLFlBQVk7QUFDcEQ7QUFDTyxTQUFTQyxjQUFjLENBQUNILEdBQUcsRUFBRUksUUFBUSxFQUFFO0VBQzFDLE9BQVFKLEdBQUcsSUFBSSxJQUFJLEdBQUlkLEtBQUssQ0FBQ2MsR0FBRyxDQUFDLEdBQUdJLFFBQVEsRUFBRTtBQUNsRDtBQUNPLFNBQVNDLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFTixHQUFHLEVBQUU7RUFDbkMsT0FBUUEsR0FBRyxJQUFJLElBQUksR0FBS00sU0FBUyxDQUFDcEIsS0FBSyxDQUFDYyxHQUFHLENBQUMsQ0FBQyxHQUFHQSxHQUFHLEdBQUdKLFNBQVMsR0FBSUksR0FBRztBQUMxRTtBQUNPLFNBQVNPLEdBQUcsQ0FBQ0MsT0FBTyxFQUFFUixHQUFHLEVBQUU7RUFDOUIsT0FBUUEsR0FBRyxJQUFJLElBQUksR0FBSVIsSUFBSSxDQUFDZ0IsT0FBTyxDQUFDdEIsS0FBSyxDQUFDYyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdKLFNBQVM7QUFDaEU7QUFDTyxTQUFTYSxJQUFJLENBQUNELE9BQU8sRUFBRUUsSUFBSSxFQUFFQyxJQUFJLEVBQUU7RUFDdEMsT0FBUUQsSUFBSSxJQUFJLElBQUksSUFBSUMsSUFBSSxJQUFJLElBQUksR0FBSUgsT0FBTyxDQUFDdEIsS0FBSyxDQUFDd0IsSUFBSSxDQUFDLEVBQUV4QixLQUFLLENBQUN5QixJQUFJLENBQUMsQ0FBQyxHQUFHZixTQUFTO0FBQ3pGO0FBQ08sU0FBU2dCLElBQUksQ0FBQ0osT0FBTyxFQUFFRSxJQUFJLEVBQUVDLElBQUksRUFBRUUsSUFBSSxFQUFFO0VBQzVDLE9BQVFILElBQUksSUFBSSxJQUFJLElBQUlDLElBQUksSUFBSSxJQUFJLElBQUlFLElBQUksSUFBSSxJQUFJLEdBQUlMLE9BQU8sQ0FBQ3RCLEtBQUssQ0FBQ3dCLElBQUksQ0FBQyxFQUFFeEIsS0FBSyxDQUFDeUIsSUFBSSxDQUFDLEVBQUV6QixLQUFLLENBQUMyQixJQUFJLENBQUMsQ0FBQyxHQUFHakIsU0FBUztBQUN0SDtBQUNPLFNBQVNrQixJQUFJLENBQUNDLE1BQU0sRUFBRWYsR0FBRyxFQUFFO0VBQzlCLE9BQU9BLEdBQUcsSUFBSSxJQUFJLEdBQUdlLE1BQU0sQ0FBQzdCLEtBQUssQ0FBQ2MsR0FBRyxDQUFDLENBQUMsR0FBR0osU0FBUztBQUN2RDtBQUNPLFNBQVNvQixLQUFLLENBQUNDLEVBQUUsRUFBRUMsR0FBRyxFQUFFO0VBQzNCLElBQUk7SUFDQSxPQUFPMUIsSUFBSSxDQUFDeUIsRUFBRSxDQUFDQyxHQUFHLENBQUMsQ0FBQztFQUN4QixDQUFDLENBQ0QsT0FBT0MsRUFBRSxFQUFFO0lBQ1AsT0FBT3ZCLFNBQVM7RUFDcEI7QUFDSiIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcGFyZSwgZXF1YWxzLCBzdHJ1Y3R1cmFsSGFzaCB9IGZyb20gXCIuL1V0aWwuanNcIjtcbi8vIFVzaW5nIGEgY2xhc3MgaGVyZSBmb3IgYmV0dGVyIGNvbXBhdGliaWxpdHkgd2l0aCBUUyBmaWxlcyBpbXBvcnRpbmcgU29tZVxuZXhwb3J0IGNsYXNzIFNvbWUge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYWRkIFwiU29tZVwiIGZvciBjb25zaXN0ZW5jeSB3aXRoIGVyYXNlZCBvcHRpb25zXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodGhpcy52YWx1ZSk7XG4gICAgfVxuICAgIEdldEhhc2hDb2RlKCkge1xuICAgICAgICByZXR1cm4gc3RydWN0dXJhbEhhc2godGhpcy52YWx1ZSk7XG4gICAgfVxuICAgIEVxdWFscyhvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGVxdWFscyh0aGlzLnZhbHVlLCBvdGhlciBpbnN0YW5jZW9mIFNvbWUgPyBvdGhlci52YWx1ZSA6IG90aGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBDb21wYXJlVG8ob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmUodGhpcy52YWx1ZSwgb3RoZXIgaW5zdGFuY2VvZiBTb21lID8gb3RoZXIudmFsdWUgOiBvdGhlcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc29tZSh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCB8fCB4IGluc3RhbmNlb2YgU29tZSA/IG5ldyBTb21lKHgpIDogeDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZSh4KSB7XG4gICAgaWYgKHggPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb24gaGFzIG5vIHZhbHVlXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBTb21lID8geC52YWx1ZSA6IHg7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG9mTnVsbGFibGUoeCkge1xuICAgIC8vIFRoaXMgd2lsbCBmYWlsIHdpdGggdW5pdCBwcm9iYWJseSwgYW4gYWx0ZXJuYXRpdmUgd291bGQgYmU6XG4gICAgLy8gcmV0dXJuIHggPT09IG51bGwgPyB1bmRlZmluZWQgOiAoeCA9PT0gdW5kZWZpbmVkID8gbmV3IFNvbWUoeCkgOiB4KTtcbiAgICByZXR1cm4geCA9PSBudWxsID8gdW5kZWZpbmVkIDogeDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b051bGxhYmxlKHgpIHtcbiAgICByZXR1cm4geCA9PSBudWxsID8gbnVsbCA6IHZhbHVlKHgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW4oeCkge1xuICAgIHJldHVybiB4ID09IG51bGwgPyB1bmRlZmluZWQgOiB2YWx1ZSh4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KG9wdCkge1xuICAgIHJldHVybiAob3B0ID09IG51bGwpID8gW10gOiBbdmFsdWUob3B0KV07XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEFyZyhvcHQsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiAob3B0ICE9IG51bGwpID8gdmFsdWUob3B0KSA6IGRlZmF1bHRWYWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0QXJnV2l0aChvcHQsIGRlZlRodW5rKSB7XG4gICAgcmV0dXJuIChvcHQgIT0gbnVsbCkgPyB2YWx1ZShvcHQpIDogZGVmVGh1bmsoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXIocHJlZGljYXRlLCBvcHQpIHtcbiAgICByZXR1cm4gKG9wdCAhPSBudWxsKSA/IChwcmVkaWNhdGUodmFsdWUob3B0KSkgPyBvcHQgOiB1bmRlZmluZWQpIDogb3B0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcChtYXBwaW5nLCBvcHQpIHtcbiAgICByZXR1cm4gKG9wdCAhPSBudWxsKSA/IHNvbWUobWFwcGluZyh2YWx1ZShvcHQpKSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwMihtYXBwaW5nLCBvcHQxLCBvcHQyKSB7XG4gICAgcmV0dXJuIChvcHQxICE9IG51bGwgJiYgb3B0MiAhPSBudWxsKSA/IG1hcHBpbmcodmFsdWUob3B0MSksIHZhbHVlKG9wdDIpKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXAzKG1hcHBpbmcsIG9wdDEsIG9wdDIsIG9wdDMpIHtcbiAgICByZXR1cm4gKG9wdDEgIT0gbnVsbCAmJiBvcHQyICE9IG51bGwgJiYgb3B0MyAhPSBudWxsKSA/IG1hcHBpbmcodmFsdWUob3B0MSksIHZhbHVlKG9wdDIpLCB2YWx1ZShvcHQzKSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gYmluZChiaW5kZXIsIG9wdCkge1xuICAgIHJldHVybiBvcHQgIT0gbnVsbCA/IGJpbmRlcih2YWx1ZShvcHQpKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0cnlPcChvcCwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHNvbWUob3AoYXJnKSk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n')},7:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SR_indexOutOfBounds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return SR_inputWasEmpty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SR_inputMustBeNonNegative; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SR_inputSequenceEmpty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return SR_inputSequenceTooLong; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return SR_keyNotFoundAlt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SR_differentLengths; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return SR_notEnoughElements; });\nvar SR_indexOutOfBounds = "The index was outside the range of elements in the collection.";\nvar SR_inputWasEmpty = "Collection was empty.";\nvar SR_inputMustBeNonNegative = "The input must be non-negative.";\nvar SR_inputSequenceEmpty = "The input sequence was empty.";\nvar SR_inputSequenceTooLong = "The input sequence contains more than one element.";\nvar SR_keyNotFoundAlt = "An index satisfying the predicate was not found in the collection.";\nvar SR_differentLengths = "The collections had different lengths.";\nvar SR_notEnoughElements = "The input sequence has an insufficient number of elements.";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXN0cy9mYWJsZV9tb2R1bGVzL2ZhYmxlLWxpYnJhcnkuMy43LjE3L0dsb2JhbC5qcz80OTI1Il0sIm5hbWVzIjpbIlNSX2luZGV4T3V0T2ZCb3VuZHMiLCJTUl9pbnB1dFdhc0VtcHR5IiwiU1JfaW5wdXRNdXN0QmVOb25OZWdhdGl2ZSIsIlNSX2lucHV0U2VxdWVuY2VFbXB0eSIsIlNSX2lucHV0U2VxdWVuY2VUb29Mb25nIiwiU1Jfa2V5Tm90Rm91bmRBbHQiLCJTUl9kaWZmZXJlbnRMZW5ndGhzIiwiU1Jfbm90RW5vdWdoRWxlbWVudHMiXSwibWFwcGluZ3MiOiJBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBTyxJQUFNQSxtQkFBbUIsR0FBRyxnRUFBZ0U7QUFFNUYsSUFBTUMsZ0JBQWdCLEdBQUcsdUJBQXVCO0FBRWhELElBQU1DLHlCQUF5QixHQUFHLGlDQUFpQztBQUVuRSxJQUFNQyxxQkFBcUIsR0FBRywrQkFBK0I7QUFFN0QsSUFBTUMsdUJBQXVCLEdBQUcsb0RBQW9EO0FBRXBGLElBQU1DLGlCQUFpQixHQUFHLG9FQUFvRTtBQUU5RixJQUFNQyxtQkFBbUIsR0FBRyx3Q0FBd0M7QUFFcEUsSUFBTUMsb0JBQW9CLEdBQUcsNERBQTREIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGNvbnN0IFNSX2luZGV4T3V0T2ZCb3VuZHMgPSBcIlRoZSBpbmRleCB3YXMgb3V0c2lkZSB0aGUgcmFuZ2Ugb2YgZWxlbWVudHMgaW4gdGhlIGNvbGxlY3Rpb24uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU1JfaW5wdXRXYXNFbXB0eSA9IFwiQ29sbGVjdGlvbiB3YXMgZW1wdHkuXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU1JfaW5wdXRNdXN0QmVOb25OZWdhdGl2ZSA9IFwiVGhlIGlucHV0IG11c3QgYmUgbm9uLW5lZ2F0aXZlLlwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNSX2lucHV0U2VxdWVuY2VFbXB0eSA9IFwiVGhlIGlucHV0IHNlcXVlbmNlIHdhcyBlbXB0eS5cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTUl9pbnB1dFNlcXVlbmNlVG9vTG9uZyA9IFwiVGhlIGlucHV0IHNlcXVlbmNlIGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgZWxlbWVudC5cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTUl9rZXlOb3RGb3VuZEFsdCA9IFwiQW4gaW5kZXggc2F0aXNmeWluZyB0aGUgcHJlZGljYXRlIHdhcyBub3QgZm91bmQgaW4gdGhlIGNvbGxlY3Rpb24uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU1JfZGlmZmVyZW50TGVuZ3RocyA9IFwiVGhlIGNvbGxlY3Rpb25zIGhhZCBkaWZmZXJlbnQgbGVuZ3Rocy5cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTUl9ub3RFbm91Z2hFbGVtZW50cyA9IFwiVGhlIGlucHV0IHNlcXVlbmNlIGhhcyBhbiBpbnN1ZmZpY2llbnQgbnVtYmVyIG9mIGVsZW1lbnRzLlwiO1xyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')},8:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export seqToString */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return toString; });\n/* unused harmony export unionToString */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return Union; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return Record; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return FSharpRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Exception; });\n/* unused harmony export isException */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return ensureErrorOrException; });\n/* unused harmony export FSharpException */\n/* unused harmony export MatchFailureException */\n/* unused harmony export Attribute */\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(46);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(29);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(25);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(27);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(60);\n/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(112);\n/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_es_object_entries_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(248);\n/* harmony import */ var core_js_modules_es_object_entries_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_entries_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(67);\n/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(97);\n/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(113);\n/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(160);\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(196);\n/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(39);\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(41);\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(42);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(36);\n/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(37);\n/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(31);\n/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_21__);\n/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(35);\n/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(65);\n/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(66);\n/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var _Util_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(0);\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\nfunction seqToString(self) {\n  var count = 0;\n  var str = "[";\n  var _iterator = _createForOfIteratorHelper(self),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var x = _step.value;\n      if (count === 0) {\n        str += toString(x);\n      } else if (count === 100) {\n        str += "; ...";\n        break;\n      } else {\n        str += "; " + toString(x);\n      }\n      count++;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return str + "]";\n}\nfunction toString(x) {\n  var callStack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var _a, _b;\n  if (x != null && _typeof(x) === "object") {\n    if (typeof x.toString === "function") {\n      return x.toString();\n    } else if (Symbol.iterator in x) {\n      return seqToString(x);\n    } else {\n      // TODO: Date?\n      var cons = (_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor;\n      return cons === Object && callStack < 10\n      // Same format as recordToString\n      ? "{ " + Object.entries(x).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          k = _ref2[0],\n          v = _ref2[1];\n        return k + " = " + toString(v, callStack + 1);\n      }).join("\\n  ") + " }" : (_b = cons === null || cons === void 0 ? void 0 : cons.name) !== null && _b !== void 0 ? _b : "";\n    }\n  }\n  return String(x);\n}\nfunction unionToString(name, fields) {\n  if (fields.length === 0) {\n    return name;\n  } else {\n    var fieldStr = "";\n    var withParens = true;\n    if (fields.length === 1) {\n      fieldStr = toString(fields[0]);\n      withParens = fieldStr.indexOf(" ") >= 0;\n    } else {\n      fieldStr = fields.map(function (x) {\n        return toString(x);\n      }).join(", ");\n    }\n    return name + (withParens ? " (" : " ") + fieldStr + (withParens ? ")" : "");\n  }\n}\nvar Union = /*#__PURE__*/function () {\n  function Union() {\n    _classCallCheck(this, Union);\n  }\n  _createClass(Union, [{\n    key: "name",\n    get: function get() {\n      return this.cases()[this.tag];\n    }\n  }, {\n    key: "toJSON",\n    value: function toJSON() {\n      return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      return unionToString(this.name, this.fields);\n    }\n  }, {\n    key: "GetHashCode",\n    value: function GetHashCode() {\n      var hashes = this.fields.map(function (x) {\n        return Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* structuralHash */ "y"])(x);\n      });\n      hashes.splice(0, 0, Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* numberHash */ "t"])(this.tag));\n      return Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* combineHashCodes */ "d"])(hashes);\n    }\n  }, {\n    key: "Equals",\n    value: function Equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* sameConstructor */ "w"])(this, other)) {\n        return false;\n      } else if (this.tag === other.tag) {\n        return Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* equalArrays */ "k"])(this.fields, other.fields);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: "CompareTo",\n    value: function CompareTo(other) {\n      if (this === other) {\n        return 0;\n      } else if (!Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* sameConstructor */ "w"])(this, other)) {\n        return -1;\n      } else if (this.tag === other.tag) {\n        return Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* compareArrays */ "f"])(this.fields, other.fields);\n      } else {\n        return this.tag < other.tag ? -1 : 1;\n      }\n    }\n  }]);\n  return Union;\n}();\nfunction recordToJSON(self) {\n  var o = {};\n  var keys = Object.keys(self);\n  for (var i = 0; i < keys.length; i++) {\n    o[keys[i]] = self[keys[i]];\n  }\n  return o;\n}\nfunction recordToString(self) {\n  return "{ " + Object.entries(self).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      k = _ref4[0],\n      v = _ref4[1];\n    return k + " = " + toString(v);\n  }).join("\\n  ") + " }";\n}\nfunction recordGetHashCode(self) {\n  var hashes = Object.values(self).map(function (v) {\n    return Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* structuralHash */ "y"])(v);\n  });\n  return Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* combineHashCodes */ "d"])(hashes);\n}\nfunction recordEquals(self, other) {\n  if (self === other) {\n    return true;\n  } else if (!Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* sameConstructor */ "w"])(self, other)) {\n    return false;\n  } else {\n    var thisNames = Object.keys(self);\n    for (var i = 0; i < thisNames.length; i++) {\n      if (!Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* equals */ "m"])(self[thisNames[i]], other[thisNames[i]])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\nfunction recordCompareTo(self, other) {\n  if (self === other) {\n    return 0;\n  } else if (!Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* sameConstructor */ "w"])(self, other)) {\n    return -1;\n  } else {\n    var thisNames = Object.keys(self);\n    for (var i = 0; i < thisNames.length; i++) {\n      var result = Object(_Util_js__WEBPACK_IMPORTED_MODULE_25__[/* compare */ "e"])(self[thisNames[i]], other[thisNames[i]]);\n      if (result !== 0) {\n        return result;\n      }\n    }\n    return 0;\n  }\n}\nvar Record = /*#__PURE__*/function () {\n  function Record() {\n    _classCallCheck(this, Record);\n  }\n  _createClass(Record, [{\n    key: "toJSON",\n    value: function toJSON() {\n      return recordToJSON(this);\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      return recordToString(this);\n    }\n  }, {\n    key: "GetHashCode",\n    value: function GetHashCode() {\n      return recordGetHashCode(this);\n    }\n  }, {\n    key: "Equals",\n    value: function Equals(other) {\n      return recordEquals(this, other);\n    }\n  }, {\n    key: "CompareTo",\n    value: function CompareTo(other) {\n      return recordCompareTo(this, other);\n    }\n  }]);\n  return Record;\n}();\nvar FSharpRef = /*#__PURE__*/function () {\n  function FSharpRef(contentsOrGetter, setter) {\n    _classCallCheck(this, FSharpRef);\n    if (typeof setter === "function") {\n      this.getter = contentsOrGetter;\n      this.setter = setter;\n    } else {\n      this.getter = function () {\n        return contentsOrGetter;\n      };\n      this.setter = function (v) {\n        contentsOrGetter = v;\n      };\n    }\n  }\n  _createClass(FSharpRef, [{\n    key: "contents",\n    get: function get() {\n      return this.getter();\n    },\n    set: function set(v) {\n      this.setter(v);\n    }\n  }]);\n  return FSharpRef;\n}();\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nvar Exception = /*#__PURE__*/_createClass(function Exception(message) {\n  _classCallCheck(this, Exception);\n  this.message = message;\n});\nfunction isException(x) {\n  return x instanceof Exception || x instanceof Error;\n}\nfunction ensureErrorOrException(e) {\n  return isException(e) ? e : new Error(String(e));\n}\nvar FSharpException = /*#__PURE__*/function (_Exception) {\n  _inherits(FSharpException, _Exception);\n  var _super = _createSuper(FSharpException);\n  function FSharpException() {\n    _classCallCheck(this, FSharpException);\n    return _super.apply(this, arguments);\n  }\n  _createClass(FSharpException, [{\n    key: "toJSON",\n    value: function toJSON() {\n      return recordToJSON(this);\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      return recordToString(this);\n    }\n  }, {\n    key: "GetHashCode",\n    value: function GetHashCode() {\n      return recordGetHashCode(this);\n    }\n  }, {\n    key: "Equals",\n    value: function Equals(other) {\n      return recordEquals(this, other);\n    }\n  }, {\n    key: "CompareTo",\n    value: function CompareTo(other) {\n      return recordCompareTo(this, other);\n    }\n  }]);\n  return FSharpException;\n}(Exception);\nvar MatchFailureException = /*#__PURE__*/function (_FSharpException) {\n  _inherits(MatchFailureException, _FSharpException);\n  var _super2 = _createSuper(MatchFailureException);\n  function MatchFailureException(arg1, arg2, arg3) {\n    var _this;\n    _classCallCheck(this, MatchFailureException);\n    _this = _super2.call(this);\n    _this.arg1 = arg1;\n    _this.arg2 = arg2 | 0;\n    _this.arg3 = arg3 | 0;\n    _this.message = "The match cases were incomplete";\n    return _this;\n  }\n  return _createClass(MatchFailureException);\n}(FSharpException);\nvar Attribute = /*#__PURE__*/_createClass(function Attribute() {\n  _classCallCheck(this, Attribute);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},81:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Long_fromInt; });\n__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ Long_fromValue; });\n__webpack_require__.d(__webpack_exports__, "d", function() { return /* binding */ unixEpochMillisecondsToTicks; });\n__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ ticksToUnixEpochMilliseconds; });\n\n// UNUSED EXPORTS: get_Zero, get_One, op_Addition, op_Subtraction, op_Multiply, op_Division, op_Modulus, op_UnaryNegation, op_LeftShift, op_RightShift, op_RightShiftUnsigned, op_BitwiseAnd, op_BitwiseOr, op_ExclusiveOr, op_LogicalNot, op_LessThan, op_LessThanOrEqual, op_GreaterThan, op_GreaterThanOrEqual, op_Equality, op_Inequality, equals, compare, fromBits, fromBytes, fromNumber, fromString, toInt, toBytes, toNumber, toString, getLowBits, getHighBits, getLowBitsUnsigned, getHighBitsUnsigned, abs, fromInteger, parse, tryParse, divRem\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.pad-start.js\nvar es_string_pad_start = __webpack_require__(263);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(42);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(68);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.parse-int.js\nvar es_number_parse_int = __webpack_require__(276);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js\nvar es_number_constructor = __webpack_require__(31);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __webpack_require__(25);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __webpack_require__(27);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __webpack_require__(28);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __webpack_require__(20);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __webpack_require__(24);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(29);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __webpack_require__(39);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __webpack_require__(41);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/Int32.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n// export type decimal = Decimal;\nvar NumberStyles;\n(function (NumberStyles) {\n  // None = 0x00000000,\n  // AllowLeadingWhite = 0x00000001,\n  // AllowTrailingWhite = 0x00000002,\n  // AllowLeadingSign = 0x00000004,\n  // AllowTrailingSign = 0x00000008,\n  // AllowParentheses = 0x00000010,\n  // AllowDecimalPoint = 0x00000020,\n  // AllowThousands = 0x00000040,\n  // AllowExponent = 0x00000080,\n  // AllowCurrencySymbol = 0x00000100,\n  NumberStyles[NumberStyles["AllowHexSpecifier"] = 512] = "AllowHexSpecifier";\n  // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n  // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n  // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n  //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n  // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n  //         AllowDecimalPoint | AllowExponent,\n  // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n  //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n  // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n  //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n  var _regexMatch = _slicedToArray(regexMatch, 4),\n    sign = _regexMatch[1],\n    prefix = _regexMatch[2],\n    digits = _regexMatch[3];\n  return {\n    sign: sign || "",\n    prefix: prefix || "",\n    digits: digits,\n    radix: radix\n  };\n}\nfunction getRange(unsigned, bitsize) {\n  switch (bitsize) {\n    case 8:\n      return unsigned ? [0, 255] : [-128, 127];\n    case 16:\n      return unsigned ? [0, 65535] : [-32768, 32767];\n    case 32:\n      return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n    default:\n      throw new Error("Invalid bit size.");\n  }\n}\nfunction getInvalidDigits(radix) {\n  switch (radix) {\n    case 2:\n      return /[^0-1]/;\n    case 8:\n      return /[^0-7]/;\n    case 10:\n      return /[^0-9]/;\n    case 16:\n      return /[^0-9a-fA-F]/;\n    default:\n      throw new Error("Invalid Base.");\n  }\n}\nfunction getRadix(prefix, style) {\n  if (style & NumberStyles.AllowHexSpecifier) {\n    return 16;\n  } else {\n    switch (prefix) {\n      case "0b":\n      case "0B":\n        return 2;\n      case "0o":\n      case "0O":\n        return 8;\n      case "0x":\n      case "0X":\n        return 16;\n      default:\n        return 10;\n    }\n  }\n}\nfunction isValid(str, style, radix) {\n  var integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n  var res = integerRegex.exec(str.replace(/_/g, ""));\n  if (res != null) {\n    var _res = _slicedToArray(res, 4),\n      prefix = _res[2],\n      digits = _res[3];\n    radix = radix || getRadix(prefix, style);\n    var invalidDigits = getInvalidDigits(radix);\n    if (!invalidDigits.test(digits)) {\n      return validResponse(res, radix);\n    }\n  }\n  return null;\n}\nfunction parse(str, style, unsigned, bitsize, radix) {\n  var res = isValid(str, style, radix);\n  if (res != null) {\n    var v = Number.parseInt(res.sign + res.digits, res.radix);\n    if (!Number.isNaN(v)) {\n      var _getRange = getRange(true, bitsize),\n        _getRange2 = _slicedToArray(_getRange, 2),\n        umin = _getRange2[0],\n        umax = _getRange2[1];\n      if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n        v = v << 32 - bitsize >> 32 - bitsize;\n      }\n      var _getRange3 = getRange(unsigned, bitsize),\n        _getRange4 = _slicedToArray(_getRange3, 2),\n        min = _getRange4[0],\n        max = _getRange4[1];\n      if (v >= min && v <= max) {\n        return v;\n      }\n    }\n  }\n  throw new Error("Input string was not in a correct format.");\n}\nfunction tryParse(str, style, unsigned, bitsize, defValue) {\n  try {\n    defValue.contents = parse(str, style, unsigned, bitsize);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\nfunction op_UnaryNegation_Int8(x) {\n  return x === -128 ? x : -x;\n}\nfunction op_UnaryNegation_Int16(x) {\n  return x === -32768 ? x : -x;\n}\nfunction op_UnaryNegation_Int32(x) {\n  return x === -2147483648 ? x : -x;\n}\nfunction divRem(x, y, out) {\n  var div = ~~(x / y);\n  var rem = x % y;\n  if (out != null) {\n    out.contents = rem;\n    return div;\n  } else {\n    return [div, rem];\n  }\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint8-array.js\nvar es_typed_array_uint8_array = __webpack_require__(123);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.copy-within.js\nvar es_typed_array_copy_within = __webpack_require__(125);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.every.js\nvar es_typed_array_every = __webpack_require__(126);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.fill.js\nvar es_typed_array_fill = __webpack_require__(127);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.filter.js\nvar es_typed_array_filter = __webpack_require__(128);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find.js\nvar es_typed_array_find = __webpack_require__(129);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find-index.js\nvar es_typed_array_find_index = __webpack_require__(130);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.for-each.js\nvar es_typed_array_for_each = __webpack_require__(131);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.includes.js\nvar es_typed_array_includes = __webpack_require__(132);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.index-of.js\nvar es_typed_array_index_of = __webpack_require__(133);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.iterator.js\nvar es_typed_array_iterator = __webpack_require__(134);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.join.js\nvar es_typed_array_join = __webpack_require__(135);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.last-index-of.js\nvar es_typed_array_last_index_of = __webpack_require__(136);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.map.js\nvar es_typed_array_map = __webpack_require__(137);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce.js\nvar es_typed_array_reduce = __webpack_require__(138);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce-right.js\nvar es_typed_array_reduce_right = __webpack_require__(139);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reverse.js\nvar es_typed_array_reverse = __webpack_require__(140);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.set.js\nvar es_typed_array_set = __webpack_require__(141);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.slice.js\nvar es_typed_array_slice = __webpack_require__(142);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.some.js\nvar es_typed_array_some = __webpack_require__(143);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.sort.js\nvar es_typed_array_sort = __webpack_require__(144);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-locale-string.js\nvar es_typed_array_to_locale_string = __webpack_require__(145);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-string.js\nvar es_typed_array_to_string = __webpack_require__(146);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js\nvar es_regexp_to_string = __webpack_require__(46);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.to-json.js\nvar web_url_to_json = __webpack_require__(218);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-property.js\nvar es_object_define_property = __webpack_require__(35);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js\nvar es_array_index_of = __webpack_require__(67);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.parse-int.js\nvar es_parse_int = __webpack_require__(122);\n\n// EXTERNAL MODULE: ./tests/fable_modules/fable-library.3.7.17/Numeric.js\nvar Numeric = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/lib/long.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\n\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n} catch (e) {\n  // no wasm support :(\n}\n/**\n * Constructs a 64 bit two\'s-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two\'s-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n  var h1 = this.unsigned ? 1 : 0;\n  h1 = (h1 << 5) + h1 ^ this.high;\n  h1 = (h1 << 5) + h1 ^ this.low;\n  return h1;\n};\nLong.prototype.Equals = function (x) {\n  return equals(this, x);\n};\nLong.prototype.CompareTo = function (x) {\n  return compare(this, x);\n};\nLong.prototype.toString = function (radix) {\n  return long_toString(this, radix);\n};\nLong.prototype.toJSON = function () {\n  return long_toString(this);\n};\nLong.prototype[Numeric["d" /* symbol */]] = function () {\n  var x = this;\n  return {\n    multiply: function multiply(y) {\n      return _multiply(x, y);\n    },\n    toPrecision: function toPrecision(sd) {\n      return String(x) + 0 .toPrecision(sd).substr(1);\n    },\n    toExponential: function toExponential(dp) {\n      return String(x) + 0 .toExponential(dp).substr(1);\n    },\n    toFixed: function toFixed(dp) {\n      return String(x) + 0 .toFixed(dp).substr(1);\n    },\n    toHex: function toHex() {\n      return long_toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16);\n    }\n  };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript\'s floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, "__isLong__", {\n  value: true\n});\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj["__isLong__"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = 0 <= value && value < 256) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n    obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n    if (cache) UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = -128 <= value && value < 128) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache) INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0) return UZERO;\n    if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n  }\n  if (value < 0) return negate(fromNumber(-value, unsigned));\n  return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0) throw Error(\'empty string\');\n  if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return ZERO;\n  if (typeof unsigned === \'number\') {\n    // For goog.math.long compatibility\n    radix = unsigned, unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError(\'radix\');\n  var p = str.indexOf(\'-\');\n  if (p > 0) throw Error(\'interior hyphen\');else if (p === 0) {\n    return negate(fromString(str.substring(1), unsigned, radix));\n  }\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = add(_multiply(result, power), fromNumber(value));\n    } else {\n      result = _multiply(result, radixToPower);\n      result = add(result, fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === \'number\') return fromNumber(val, unsigned);\n  if (typeof val === \'string\') return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === \'boolean\' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nfunction toInt($this) {\n  return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nfunction toNumber($this) {\n  if ($this.unsigned) return ($this.high >>> 0) * TWO_PWR_32_DBL + ($this.low >>> 0);\n  return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nfunction long_toString($this, radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError(\'radix\');\n  if (isZero($this)) return \'0\';\n  if (long_isNegative($this)) {\n    // Unsigned Longs are never negative\n    if (equals($this, MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = divide($this, radixLong),\n        rem1 = subtract(_multiply(div, radixLong), $this);\n      return long_toString(div, radix) + toInt(rem1).toString(radix);\n    } else return \'-\' + long_toString(negate($this), radix);\n  }\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned),\n    rem = $this;\n  var result = \'\';\n  while (true) {\n    var remDiv = divide(rem, radixToPower),\n      intval = toInt(subtract(rem, _multiply(remDiv, radixToPower))) >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (isZero(rem)) return digits + result;else {\n      while (digits.length < 6) digits = \'0\' + digits;\n      result = \'\' + digits + result;\n    }\n  }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nfunction getHighBits($this) {\n  return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nfunction getHighBitsUnsigned($this) {\n  return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nfunction getLowBits($this) {\n  return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nfunction getLowBitsUnsigned($this) {\n  return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nfunction getNumBitsAbs($this) {\n  if (long_isNegative($this))\n    // Unsigned Longs are never negative\n    return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n  var val = $this.high != 0 ? $this.high : $this.low;\n  for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long\'s value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nfunction isZero($this) {\n  return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long\'s value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long\'s value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nfunction long_isNegative($this) {\n  return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long\'s value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nfunction isPositive($this) {\n  return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long\'s value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nfunction isOdd($this) {\n  return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long\'s value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nfunction isEven($this) {\n  return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long\'s value equals the specified\'s.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nfunction equals($this, other) {\n  if (!isLong(other)) other = fromValue(other);\n  if ($this.unsigned !== other.unsigned && $this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n  return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long\'s value equals the specified\'s. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long\'s value differs from the specified\'s.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nfunction notEquals($this, other) {\n  return !equals($this, /* validates */other);\n}\n;\n/**\n * Tests if this Long\'s value differs from the specified\'s. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long\'s value differs from the specified\'s. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long\'s value is less than the specified\'s.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nfunction lessThan($this, other) {\n  return compare($this, /* validates */other) < 0;\n}\n;\n/**\n * Tests if this Long\'s value is less than the specified\'s. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long\'s value is less than or equal the specified\'s.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nfunction lessThanOrEqual($this, other) {\n  return compare($this, /* validates */other) <= 0;\n}\n;\n/**\n * Tests if this Long\'s value is less than or equal the specified\'s. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long\'s value is less than or equal the specified\'s. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long\'s value is greater than the specified\'s.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nfunction greaterThan($this, other) {\n  return compare($this, /* validates */other) > 0;\n}\n;\n/**\n * Tests if this Long\'s value is greater than the specified\'s. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long\'s value is greater than or equal the specified\'s.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nfunction greaterThanOrEqual($this, other) {\n  return compare($this, /* validates */other) >= 0;\n}\n;\n/**\n * Tests if this Long\'s value is greater than or equal the specified\'s. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long\'s value is greater than or equal the specified\'s. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long\'s value with the specified\'s.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nfunction compare($this, other) {\n  if (!isLong(other)) other = fromValue(other);\n  if (equals($this, other)) return 0;\n  var thisNeg = long_isNegative($this),\n    otherNeg = long_isNegative(other);\n  if (thisNeg && !otherNeg) return -1;\n  if (!thisNeg && otherNeg) return 1;\n  // At this point the sign bits are the same\n  if (!$this.unsigned) return long_isNegative(subtract($this, other)) ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return other.high >>> 0 > $this.high >>> 0 || other.high === $this.high && other.low >>> 0 > $this.low >>> 0 ? -1 : 1;\n}\n;\n/**\n * Compares this Long\'s value with the specified\'s. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long\'s value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nfunction negate($this) {\n  if (!$this.unsigned && equals($this, MIN_VALUE)) return MIN_VALUE;\n  return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long\'s value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nfunction add($this, addend) {\n  if (!isLong(addend)) addend = fromValue(addend);\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  var a48 = $this.high >>> 16;\n  var a32 = $this.high & 0xFFFF;\n  var a16 = $this.low >>> 16;\n  var a00 = $this.low & 0xFFFF;\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits(c16 << 16 | c00, c48 << 16 | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nfunction subtract($this, subtrahend) {\n  if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n  return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nfunction _multiply($this, multiplier) {\n  if (isZero($this)) return $this.unsigned ? UZERO : ZERO;\n  if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n    return fromBits(low, wasm.get_high(), $this.unsigned);\n  }\n  if (isZero(multiplier)) return $this.unsigned ? UZERO : ZERO;\n  if (equals($this, MIN_VALUE)) return isOdd(multiplier) ? MIN_VALUE : ZERO;\n  if (equals(multiplier, MIN_VALUE)) return isOdd($this) ? MIN_VALUE : ZERO;\n  if (long_isNegative($this)) {\n    if (long_isNegative(multiplier)) return _multiply(negate($this), negate(multiplier));else return negate(_multiply(negate($this), multiplier));\n  } else if (long_isNegative(multiplier)) return negate(_multiply($this, negate(multiplier)));\n  // If both longs are small, use float multiplication\n  if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24)) return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n  var a48 = $this.high >>> 16;\n  var a32 = $this.high & 0xFFFF;\n  var a16 = $this.low >>> 16;\n  var a00 = $this.low & 0xFFFF;\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits(c16 << 16 | c00, c48 << 16 | c32, $this.unsigned);\n}\n\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nfunction divide($this, divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor);\n  if (isZero(divisor)) throw Error(\'division by zero\');\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two\'s complement.\n    if (!$this.unsigned && $this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return $this;\n    }\n    var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n    return fromBits(low, wasm.get_high(), $this.unsigned);\n  }\n  if (isZero($this)) return $this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!$this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (equals($this, MIN_VALUE)) {\n      if (equals(divisor, ONE) || equals(divisor, NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n      else if (equals(divisor, MIN_VALUE)) return ONE;else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = shiftRight($this, 1);\n        approx = shiftLeft(divide(halfThis, divisor), 1);\n        if (equals(approx, ZERO)) {\n          return long_isNegative(divisor) ? ONE : NEG_ONE;\n        } else {\n          rem = subtract($this, _multiply(divisor, approx));\n          res = add(approx, divide(rem, divisor));\n          return res;\n        }\n      }\n    } else if (equals(divisor, MIN_VALUE)) return $this.unsigned ? UZERO : ZERO;\n    if (long_isNegative($this)) {\n      if (long_isNegative(divisor)) return divide(negate($this), negate(divisor));\n      return negate(divide(negate($this), divisor));\n    } else if (long_isNegative(divisor)) return negate(divide($this, negate(divisor)));\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It\'s therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned) divisor = toUnsigned(divisor);\n    if (greaterThan(divisor, $this)) return UZERO;\n    if (greaterThan(divisor, shiftRightUnsigned($this, 1)))\n      // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = $this;\n  while (greaterThanOrEqual(rem, divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = _multiply(approxRes, divisor);\n    while (long_isNegative(approxRem) || greaterThan(approxRem, rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, $this.unsigned);\n      approxRem = _multiply(approxRes, divisor);\n    }\n    // We know the answer can\'t be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (isZero(approxRes)) approxRes = ONE;\n    res = add(res, approxRes);\n    rem = subtract(rem, approxRem);\n  }\n  return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nfunction modulo($this, divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor);\n  // use wasm support if present\n  if (wasm) {\n    var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n    return fromBits(low, wasm.get_high(), $this.unsigned);\n  }\n  return subtract($this, _multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nfunction not($this) {\n  return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nfunction and($this, other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nfunction or($this, other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nfunction xor($this, other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nfunction shiftLeft($this, numBits) {\n  if (isLong(numBits)) numBits = toInt(numBits);\n  if ((numBits &= 63) === 0) return $this;else if (numBits < 32) return fromBits($this.low << numBits, $this.high << numBits | $this.low >>> 32 - numBits, $this.unsigned);else return fromBits(0, $this.low << numBits - 32, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nfunction shiftRight($this, numBits) {\n  if (isLong(numBits)) numBits = toInt(numBits);\n  if ((numBits &= 63) === 0) return $this;else if (numBits < 32) return fromBits($this.low >>> numBits | $this.high << 32 - numBits, $this.high >> numBits, $this.unsigned);else return fromBits($this.high >> numBits - 32, $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nfunction shiftRightUnsigned($this, numBits) {\n  if (isLong(numBits)) numBits = toInt(numBits);\n  numBits &= 63;\n  if (numBits === 0) return $this;else {\n    var high = $this.high;\n    if (numBits < 32) {\n      var low = $this.low;\n      return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, $this.unsigned);\n    } else if (numBits === 32) return fromBits(high, 0, $this.unsigned);else return fromBits(high >>> numBits - 32, 0, $this.unsigned);\n  }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nvar rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n  }\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nvar rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n  }\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nfunction toSigned($this) {\n  if (!$this.unsigned) return $this;\n  return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nfunction toUnsigned($this) {\n  if ($this.unsigned) return $this;\n  return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nfunction toBytes($this, le) {\n  return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nfunction toBytesLE($this) {\n  var hi = $this.high,\n    lo = $this.low;\n  return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nfunction toBytesBE($this) {\n  var hi = $this.high,\n    lo = $this.low;\n  return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nfunction fromBytes(bytes, unsigned, le) {\n  return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nfunction fromBytesLE(bytes, unsigned) {\n  return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nfunction fromBytesBE(bytes, unsigned) {\n  return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n}\n;\n// CONCATENATED MODULE: ./tests/fable_modules/fable-library.3.7.17/Long.js\n\n\n\n/* harmony default export */ var fable_library_3_7_17_Long = (Long);\nvar get_Zero = ZERO;\nvar get_One = ONE;\nvar op_Addition = add;\nvar op_Subtraction = subtract;\nvar op_Multiply = _multiply;\nvar op_Division = divide;\nvar op_Modulus = modulo;\nvar op_UnaryNegation = negate;\nvar op_LeftShift = shiftLeft;\nvar op_RightShift = shiftRight;\nvar op_RightShiftUnsigned = shiftRightUnsigned;\nvar op_BitwiseAnd = and;\nvar op_BitwiseOr = or;\nvar op_ExclusiveOr = xor;\nvar op_LogicalNot = not;\nvar op_LessThan = lessThan;\nvar op_LessThanOrEqual = lessThanOrEqual;\nvar op_GreaterThan = greaterThan;\nvar op_GreaterThanOrEqual = greaterThanOrEqual;\nvar op_Equality = equals;\nvar op_Inequality = notEquals;\nvar Long_equals = equals;\nvar Long_compare = compare;\nvar Long_fromInt = fromInt;\nvar Long_fromBits = fromBits;\nvar Long_fromBytes = fromBytes;\nvar Long_fromNumber = fromNumber;\nvar Long_fromString = fromString;\nvar Long_fromValue = fromValue;\nvar Long_toInt = toInt;\nvar Long_toBytes = toBytes;\nvar Long_toNumber = toNumber;\nvar Long_toString = long_toString;\nvar Long_getLowBits = getLowBits;\nvar Long_getHighBits = getHighBits;\nvar Long_getLowBitsUnsigned = getLowBitsUnsigned;\nvar Long_getHighBitsUnsigned = getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n  switch (radix) {\n    case 2:\n      return unsigned ? "1111111111111111111111111111111111111111111111111111111111111111" : isNegative ? "1000000000000000000000000000000000000000000000000000000000000000" : "111111111111111111111111111111111111111111111111111111111111111";\n    case 8:\n      return unsigned ? "1777777777777777777777" : isNegative ? "1000000000000000000000" : "777777777777777777777";\n    case 10:\n      return unsigned ? "18446744073709551615" : isNegative ? "9223372036854775808" : "9223372036854775807";\n    case 16:\n      return unsigned ? "FFFFFFFFFFFFFFFF" : isNegative ? "8000000000000000" : "7FFFFFFFFFFFFFFF";\n    default:\n      throw new Error("Invalid radix.");\n  }\n}\nfunction abs(x) {\n  if (!x.unsigned && long_isNegative(x)) {\n    return op_UnaryNegation(x);\n  } else {\n    return x;\n  }\n}\nfunction fromInteger(value, unsigned, kind) {\n  var x = value;\n  var xh = 0;\n  switch (kind) {\n    case 0:\n      x = value << 24 >> 24;\n      xh = x;\n      break;\n    case 4:\n      x = value << 24 >>> 24;\n      break;\n    case 1:\n      x = value << 16 >> 16;\n      xh = x;\n      break;\n    case 5:\n      x = value << 16 >>> 16;\n      break;\n    case 2:\n      x = value >> 0;\n      xh = x;\n      break;\n    case 6:\n      x = value >>> 0;\n      break;\n  }\n  return fromBits(x, xh >> 31, unsigned);\n}\nfunction Long_parse(str, style, unsigned, _bitsize, radix) {\n  var res = isValid(str, style, radix);\n  if (res != null) {\n    var lessOrEqual = function lessOrEqual(x, y) {\n      var len = Math.max(x.length, y.length);\n      return x.padStart(len, "0") <= y.padStart(len, "0");\n    };\n    var isNegative = res.sign === "-";\n    var maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n    if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n      str = isNegative ? res.sign + res.digits : res.digits;\n      return fromString(str, unsigned, res.radix);\n    }\n  }\n  throw new Error("Input string was not in a correct format.");\n}\nfunction Long_tryParse(str, style, unsigned, bitsize, defValue) {\n  try {\n    defValue.contents = Long_parse(str, style, unsigned, bitsize);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\nfunction unixEpochMillisecondsToTicks(ms, offset) {\n  return op_Multiply(op_Addition(op_Addition(fromNumber(ms), 62135596800000), offset), 10000);\n}\nfunction ticksToUnixEpochMilliseconds(ticks) {\n  return toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\n// export function makeRangeStepFunction(step: Long, last: Long, unsigned: boolean) {\n//   const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error("The step of a range cannot be zero");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Long) => {\n//     const comparedWithLast = LongLib.compare(x, last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\nfunction Long_divRem(x, y, out) {\n  var div = op_Division(x, y);\n  var rem = op_Modulus(x, y);\n  if (out != null) {\n    out.contents = rem;\n    return div;\n  } else {\n    return [div, rem];\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///81\n')}});